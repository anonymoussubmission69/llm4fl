{
    "bug_id": 39,
    "tests": [
        {
            "test_name": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray",
            "test_body": "public void testReplace_StringStringArrayStringArray() {\n1011: 1012: //JAVADOC TESTS START\nassertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\nassertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\nassertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\nassertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\nassertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\nassertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n1020: assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\nassertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\nassertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\nassertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n//JAVADOC TESTS END\n1026: assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\nassertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\nnew String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n\"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n\"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n\"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\nnew String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n\"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n\"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n1037: // Test null safety inside arrays - LANG-552\nassertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\nassertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n}\n",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:replaceEach(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZI)Ljava/lang/String;",
                    "method_body": "private static String replaceEach(String text, String[] searchList, String[] replacementList,\nif (text == null || text.length() == 0 || searchList == null ||\nreturn text;\nif (timeToLive < 0) {\nint searchLength = searchList.length;\nint replacementLength = replacementList.length;\nif (searchLength != replacementLength) {\nboolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\nint textIndex = -1;\nint replaceIndex = -1;\nint tempIndex = -1;\nfor (int i = 0; i < searchLength; i++) {\nif (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\ncontinue;\ntempIndex = text.indexOf(searchList[i]);\nif (tempIndex == -1) {\nnoMoreMatchesForReplIndex[i] = true;\nif (textIndex == -1 || tempIndex < textIndex) {\ntextIndex = tempIndex;\nreplaceIndex = i;\nif (textIndex == -1) {\nreturn text;\nint start = 0;\nint increase = 0;\nfor (int i = 0; i < searchList.length; i++) {\nint greater = replacementList[i].length() - searchList[i].length();\nif (greater > 0) {\nincrease = Math.min(increase, text.length() / 5);\nStringBuilder buf = new StringBuilder(text.length() + increase);\nwhile (textIndex != -1) {\nfor (int i = start; i < textIndex; i++) {\nbuf.append(text.charAt(i));\nbuf.append(replacementList[replaceIndex]);\nstart = textIndex + searchList[replaceIndex].length();\ntextIndex = -1;\nreplaceIndex = -1;\ntempIndex = -1;\nfor (int i = 0; i < searchLength; i++) {\nif (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\ntempIndex = text.indexOf(searchList[i], start);\nif (tempIndex == -1) {\nnoMoreMatchesForReplIndex[i] = true;\nif (textIndex == -1 || tempIndex < textIndex) {\ntextIndex = tempIndex;\nreplaceIndex = i;\nint textLength = text.length();\nfor (int i = start; i < textLength; i++) {\nbuf.append(text.charAt(i));\nString result = buf.toString();\nif (!repeat) {\nreturn result;\n}",
                    "method_id": 0
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:replaceEach(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;",
                    "method_body": "public static String replaceEach(String text, String[] searchList, String[] replacementList) {\nreturn replaceEach(text, searchList, replacementList, false, 0);\n}",
                    "method_id": 1
                }
            ],
            "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\nat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\nat org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray(StringUtilsTest.java:1039)",
            "test_id": 0
        }
    ]
}