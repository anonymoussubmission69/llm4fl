{
    "bug_id": 30,
    "tests": [
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars",
            "test_body": "public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\nassertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\nassertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\nassertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:indexOfAny(Ljava/lang/CharSequence;[C)I",
                    "method_body": "public static int indexOfAny(CharSequence cs, char[] searchChars) {\nif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\nint csLen = cs.length();\nint searchLen = searchChars.length;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\nreturn i;\n}",
                    "method_id": 0
                },
                {
                    "method_signature": "org.apache.commons.lang3.ArrayUtils:isEmpty([C)Z",
                    "method_body": "public static boolean isEmpty(char[] array) {\nif (array == null || array.length == 0) {\nreturn false;\n}",
                    "method_id": 1
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 2
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)",
            "test_id": 0
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars",
            "test_body": "public void testIndexOfAny_StringStringWithSupplementaryChars() {\nassertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\nassertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\nassertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:indexOfAny(Ljava/lang/CharSequence;[C)I",
                    "method_body": "public static int indexOfAny(CharSequence cs, char[] searchChars) {\nif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\nint csLen = cs.length();\nint searchLen = searchChars.length;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\nreturn i;\n}",
                    "method_id": 3
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:indexOfAny(Ljava/lang/CharSequence;Ljava/lang/String;)I",
                    "method_body": "public static int indexOfAny(CharSequence cs, String searchChars) {\nif (isEmpty(cs) || isEmpty(searchChars)) {\nreturn indexOfAny(cs, searchChars.toCharArray());\n}",
                    "method_id": 4
                },
                {
                    "method_signature": "org.apache.commons.lang3.ArrayUtils:isEmpty([C)Z",
                    "method_body": "public static boolean isEmpty(char[] array) {\nif (array == null || array.length == 0) {\nreturn false;\n}",
                    "method_id": 5
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 6
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)",
            "test_id": 1
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars",
            "test_body": "public void testContainsAny_StringWithBadSupplementaryChars() {\n// Test edge case: 1/2 of a (broken) supplementary char\nassertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\nassertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\nassertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\nassertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsAny(Ljava/lang/CharSequence;[C)Z",
                    "method_body": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\nif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\nint csLength = cs.length();\nint searchLength = searchChars.length;\nint csLast = csLength - 1;\nint searchLast = searchLength - 1;\nfor (int i = 0; i < csLength; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLength; j++) {\nif (searchChars[j] == ch) {\nif (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\nreturn true;\nreturn false;\n}",
                    "method_id": 7
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsAny(Ljava/lang/CharSequence;Ljava/lang/String;)Z",
                    "method_body": "public static boolean containsAny(CharSequence cs, String searchChars) {\nif (searchChars == null) {\nreturn containsAny(cs, searchChars.toCharArray());\n}",
                    "method_id": 8
                },
                {
                    "method_signature": "org.apache.commons.lang3.ArrayUtils:isEmpty([C)Z",
                    "method_body": "public static boolean isEmpty(char[] array) {\nif (array == null || array.length == 0) {\nreturn false;\n}",
                    "method_id": 9
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 10
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:174)\nat junit.framework.Assert.assertEquals(Assert.java:181)\nat junit.framework.TestCase.assertEquals(TestCase.java:341)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:186)",
            "test_id": 2
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars",
            "test_body": "public void testContainsNone_StringWithBadSupplementaryChars() {\n// Test edge case: 1/2 of a (broken) supplementary char\nassertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\nassertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\nassertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\nassertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;[C)Z",
                    "method_body": "public static boolean containsNone(CharSequence cs, char[] searchChars) {\nif (cs == null || searchChars == null) {\nint csLen = cs.length();\nint searchLen = searchChars.length;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\nreturn false;\nreturn true;\n}",
                    "method_id": 11
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;Ljava/lang/String;)Z",
                    "method_body": "public static boolean containsNone(CharSequence cs, String invalidChars) {\nif (cs == null || invalidChars == null) {\nreturn containsNone(cs, invalidChars.toCharArray());\n}",
                    "method_id": 12
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:174)\nat junit.framework.Assert.assertEquals(Assert.java:181)\nat junit.framework.TestCase.assertEquals(TestCase.java:341)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)",
            "test_id": 3
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars",
            "test_body": "public void testContainsNone_StringWithSupplementaryChars() {\nassertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\nassertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\nassertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n// Sanity check:\nassertEquals(-1, CharU20000.indexOf(CharU20001));\nassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\nassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n// Test:\nassertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\nassertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;Ljava/lang/String;)Z",
                    "method_body": "public static boolean containsNone(CharSequence cs, String invalidChars) {\nif (cs == null || invalidChars == null) {\nreturn containsNone(cs, invalidChars.toCharArray());\n}",
                    "method_id": 13
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:174)\nat junit.framework.Assert.assertEquals(Assert.java:181)\nat junit.framework.TestCase.assertEquals(TestCase.java:341)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)",
            "test_id": 4
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars",
            "test_body": "public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n// Test edge case: 1/2 of a (broken) supplementary char\nassertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\nassertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\nassertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\nassertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\nassertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsAny(Ljava/lang/CharSequence;[C)Z",
                    "method_body": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\nif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\nint csLength = cs.length();\nint searchLength = searchChars.length;\nint csLast = csLength - 1;\nint searchLast = searchLength - 1;\nfor (int i = 0; i < csLength; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLength; j++) {\nif (searchChars[j] == ch) {\nif (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\nreturn true;\nreturn false;\n}",
                    "method_id": 14
                },
                {
                    "method_signature": "org.apache.commons.lang3.ArrayUtils:isEmpty([C)Z",
                    "method_body": "public static boolean isEmpty(char[] array) {\nif (array == null || array.length == 0) {\nreturn false;\n}",
                    "method_id": 15
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 16
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:174)\nat junit.framework.Assert.assertEquals(Assert.java:181)\nat junit.framework.TestCase.assertEquals(TestCase.java:341)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:138)",
            "test_id": 5
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
            "test_body": "public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\nassertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\nassertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:indexOfAnyBut(Ljava/lang/CharSequence;[C)I",
                    "method_body": "public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\nif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\nint csLen = cs.length();\nint searchLen = searchChars.length;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\ncontinue outer;\nreturn i;\n}",
                    "method_id": 17
                },
                {
                    "method_signature": "org.apache.commons.lang3.ArrayUtils:isEmpty([C)Z",
                    "method_body": "public static boolean isEmpty(char[] array) {\nif (array == null || array.length == 0) {\nreturn false;\n}",
                    "method_id": 18
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 19
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)",
            "test_id": 6
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars",
            "test_body": "public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\nassertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\nassertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:indexOfAnyBut(Ljava/lang/String;Ljava/lang/String;)I",
                    "method_body": "public static int indexOfAnyBut(String str, String searchChars) {\nif (isEmpty(str) || isEmpty(searchChars)) {\nint strLen = str.length();\nfor (int i = 0; i < strLen; i++) {\nchar ch = str.charAt(i);\nif (searchChars.indexOf(ch) < 0) {\nreturn i;\n}",
                    "method_id": 20
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
                    "method_body": "public static boolean isEmpty(CharSequence cs) {\nreturn cs == null || cs.length() == 0;\n}",
                    "method_id": 21
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)",
            "test_id": 7
        },
        {
            "test_name": "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars",
            "test_body": "public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n// Test edge case: 1/2 of a (broken) supplementary char\nassertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\nassertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\nassertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\nassertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.StringUtils:containsNone(Ljava/lang/CharSequence;[C)Z",
                    "method_body": "public static boolean containsNone(CharSequence cs, char[] searchChars) {\nif (cs == null || searchChars == null) {\nint csLen = cs.length();\nint searchLen = searchChars.length;\nfor (int i = 0; i < csLen; i++) {\nchar ch = cs.charAt(i);\nfor (int j = 0; j < searchLen; j++) {\nif (searchChars[j] == ch) {\nreturn false;\nreturn true;\n}",
                    "method_id": 22
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:174)\nat junit.framework.Assert.assertEquals(Assert.java:181)\nat junit.framework.TestCase.assertEquals(TestCase.java:341)\nat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)",
            "test_id": 8
        }
    ]
}