{
    "bug_id": 58,
    "tests": [
        {
            "test_name": "org.apache.commons.lang.math.NumberUtilsTest.testLang300",
            "test_body": "public void testLang300() {\nNumberUtils.createNumber(\"-1l\");\nNumberUtils.createNumber(\"01l\");\nNumberUtils.createNumber(\"1l\");\n}\n",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang.math.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
                    "method_body": "public static Number createNumber(String str) throws NumberFormatException {\nif (str == null) {\nif (StringUtils.isBlank(str)) {\nif (str.startsWith(\"--\")) {\nif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\nchar lastChar = str.charAt(str.length() - 1);\nint decPos = str.indexOf('.');\nint expPos = str.indexOf('e') + str.indexOf('E') + 1;\nif (decPos > -1) {\nif (expPos > -1) {\nmant = str;\ndec = null;\nif (!Character.isDigit(lastChar)) {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = null;\nString numeric = str.substring(0, str.length() - 1);\nboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\nif (dec == null\nreturn createLong(numeric);\nthrow new NumberFormatException(str + \" is not a valid number.\");\n}",
                    "method_id": 0
                },
                {
                    "method_signature": "org.apache.commons.lang.math.NumberUtils:isAllZeros(Ljava/lang/String;)Z",
                    "method_body": "private static boolean isAllZeros(String str) {\nif (str == null) {\nfor (int i = str.length() - 1; i >= 0; i--) {\nif (str.charAt(i) != '0') {\nreturn false;\n}",
                    "method_id": 1
                },
                {
                    "method_signature": "org.apache.commons.lang.math.NumberUtils:isDigits(Ljava/lang/String;)Z",
                    "method_body": "public static boolean isDigits(String str) {\nif (StringUtils.isEmpty(str)) {\nreturn false;\nfor (int i = 0; i < str.length(); i++) {\nif (!Character.isDigit(str.charAt(i))) {\nreturn true;\n}",
                    "method_id": 2
                },
                {
                    "method_signature": "org.apache.commons.lang.StringUtils:isBlank(Ljava/lang/String;)Z",
                    "method_body": "public static boolean isBlank(String str) {\nif (str == null || (strLen = str.length()) == 0) {\nfor (int i = 0; i < strLen; i++) {\nif ((Character.isWhitespace(str.charAt(i)) == false)) {\nreturn false;\n}",
                    "method_id": 3
                },
                {
                    "method_signature": "org.apache.commons.lang.math.NumberUtils:createLong(Ljava/lang/String;)Ljava/lang/Long;",
                    "method_body": "public static Long createLong(String str) {\nif (str == null) {\nreturn Long.valueOf(str);\n}",
                    "method_id": 4
                },
                {
                    "method_signature": "org.apache.commons.lang.StringUtils:isEmpty(Ljava/lang/String;)Z",
                    "method_body": "public static boolean isEmpty(String str) {\nreturn str == null || str.length() == 0;\n}",
                    "method_id": 5
                }
            ],
            "stack_trace": "java.lang.NumberFormatException: 1l is not a valid number.\nat org.apache.commons.lang.math.NumberUtils.createNumber(NumberUtils.java:464)\nat org.apache.commons.lang.math.NumberUtilsTest.testLang300(NumberUtilsTest.java:1371)",
            "test_id": 0
        }
    ]
}