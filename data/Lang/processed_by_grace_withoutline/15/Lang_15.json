{
    "bug_id": 15,
    "tests": [
        {
            "test_name": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable",
            "test_body": "public void testIsAssignable() throws SecurityException, NoSuchMethodException,\nNoSuchFieldException {\nList list0 = null;\nList<Object> list1 = null;\nList<?> list2 = null;\nList<? super Object> list3 = null;\nList<String> list4 = null;\nList<? extends String> list5 = null;\nList<? super String> list6 = null;\nList[] list7 = null;\nList<Object>[] list8 = null;\nList<?>[] list9 = null;\nList<? super Object>[] list10 = null;\nList<String>[] list11 = null;\nList<? extends String>[] list12 = null;\nList<? super String>[] list13;\nClass<?> clazz = getClass();\nMethod method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\nList.class, List.class, List.class, List.class, List[].class, List[].class,\nList[].class, List[].class, List[].class, List[].class, List[].class);\nType[] types = method.getGenericParameterTypes();\n//        list0 = list0;\ndelegateBooleanAssertion(types, 0, 0, true);\nlist1 = list0;\ndelegateBooleanAssertion(types, 0, 1, true);\nlist0 = list1;\ndelegateBooleanAssertion(types, 1, 0, true);\nlist2 = list0;\ndelegateBooleanAssertion(types, 0, 2, true);\nlist0 = list2;\ndelegateBooleanAssertion(types, 2, 0, true);\nlist3 = list0;\ndelegateBooleanAssertion(types, 0, 3, true);\nlist0 = list3;\ndelegateBooleanAssertion(types, 3, 0, true);\nlist4 = list0;\ndelegateBooleanAssertion(types, 0, 4, true);\nlist0 = list4;\ndelegateBooleanAssertion(types, 4, 0, true);\nlist5 = list0;\ndelegateBooleanAssertion(types, 0, 5, true);\nlist0 = list5;\ndelegateBooleanAssertion(types, 5, 0, true);\nlist6 = list0;\ndelegateBooleanAssertion(types, 0, 6, true);\nlist0 = list6;\ndelegateBooleanAssertion(types, 6, 0, true);\n//        list1 = list1;\ndelegateBooleanAssertion(types, 1, 1, true);\nlist2 = list1;\ndelegateBooleanAssertion(types, 1, 2, true);\nlist1 = (List<Object>) list2;\ndelegateBooleanAssertion(types, 2, 1, false);\nlist3 = list1;\ndelegateBooleanAssertion(types, 1, 3, true);\nlist1 = (List<Object>) list3;\ndelegateBooleanAssertion(types, 3, 1, false);\n// list4 = list1;\ndelegateBooleanAssertion(types, 1, 4, false);\n// list1 = list4;\ndelegateBooleanAssertion(types, 4, 1, false);\n// list5 = list1;\ndelegateBooleanAssertion(types, 1, 5, false);\n// list1 = list5;\ndelegateBooleanAssertion(types, 5, 1, false);\nlist6 = list1;\ndelegateBooleanAssertion(types, 1, 6, true);\nlist1 = (List<Object>) list6;\ndelegateBooleanAssertion(types, 6, 1, false);\n//        list2 = list2;\ndelegateBooleanAssertion(types, 2, 2, true);\nlist2 = list3;\ndelegateBooleanAssertion(types, 2, 3, false);\nlist2 = list4;\ndelegateBooleanAssertion(types, 3, 2, true);\nlist3 = (List<? super Object>) list2;\ndelegateBooleanAssertion(types, 2, 4, false);\nlist2 = list5;\ndelegateBooleanAssertion(types, 4, 2, true);\nlist4 = (List<String>) list2;\ndelegateBooleanAssertion(types, 2, 5, false);\nlist2 = list6;\ndelegateBooleanAssertion(types, 5, 2, true);\nlist5 = (List<? extends String>) list2;\ndelegateBooleanAssertion(types, 2, 6, false);\n//        list3 = list3;\ndelegateBooleanAssertion(types, 6, 2, true);\nlist6 = (List<? super String>) list2;\ndelegateBooleanAssertion(types, 3, 3, true);\n// list4 = list3;\ndelegateBooleanAssertion(types, 3, 4, false);\n// list3 = list4;\ndelegateBooleanAssertion(types, 4, 3, false);\n// list5 = list3;\ndelegateBooleanAssertion(types, 3, 5, false);\n// list3 = list5;\ndelegateBooleanAssertion(types, 5, 3, false);\nlist6 = list3;\ndelegateBooleanAssertion(types, 3, 6, true);\nlist3 = (List<? super Object>) list6;\ndelegateBooleanAssertion(types, 6, 3, false);\n//        list4 = list4;\ndelegateBooleanAssertion(types, 4, 4, true);\nlist5 = list4;\ndelegateBooleanAssertion(types, 4, 5, true);\nlist4 = (List<String>) list5;\ndelegateBooleanAssertion(types, 5, 4, false);\nlist6 = list4;\ndelegateBooleanAssertion(types, 4, 6, true);\nlist4 = (List<String>) list6;\ndelegateBooleanAssertion(types, 6, 4, false);\n//        list5 = list5;\ndelegateBooleanAssertion(types, 5, 5, true);\nlist6 = (List<? super String>) list5;\ndelegateBooleanAssertion(types, 5, 6, false);\nlist5 = (List<? extends String>) list6;\ndelegateBooleanAssertion(types, 6, 5, false);\n//        list6 = list6;\ndelegateBooleanAssertion(types, 6, 6, true);\n228: //        list7 = list7;\ndelegateBooleanAssertion(types, 7, 7, true);\nlist8 = list7;\ndelegateBooleanAssertion(types, 7, 8, true);\nlist7 = list8;\ndelegateBooleanAssertion(types, 8, 7, true);\nlist9 = list7;\ndelegateBooleanAssertion(types, 7, 9, true);\nlist7 = list9;\ndelegateBooleanAssertion(types, 9, 7, true);\nlist10 = list7;\ndelegateBooleanAssertion(types, 7, 10, true);\nlist7 = list10;\ndelegateBooleanAssertion(types, 10, 7, true);\nlist11 = list7;\ndelegateBooleanAssertion(types, 7, 11, true);\nlist7 = list11;\ndelegateBooleanAssertion(types, 11, 7, true);\nlist12 = list7;\ndelegateBooleanAssertion(types, 7, 12, true);\nlist7 = list12;\ndelegateBooleanAssertion(types, 12, 7, true);\nlist13 = list7;\ndelegateBooleanAssertion(types, 7, 13, true);\nlist7 = list13;\ndelegateBooleanAssertion(types, 13, 7, true);\n//        list8 = list8;\ndelegateBooleanAssertion(types, 8, 8, true);\nlist9 = list8;\ndelegateBooleanAssertion(types, 8, 9, true);\nlist8 = (List<Object>[]) list9;\ndelegateBooleanAssertion(types, 9, 8, false);\nlist10 = list8;\ndelegateBooleanAssertion(types, 8, 10, true);\nlist8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\ndelegateBooleanAssertion(types, 10, 8, false);\n// list11 = list8;\ndelegateBooleanAssertion(types, 8, 11, false);\n// list8 = list11;\ndelegateBooleanAssertion(types, 11, 8, false);\n// list12 = list8;\ndelegateBooleanAssertion(types, 8, 12, false);\n// list8 = list12;\ndelegateBooleanAssertion(types, 12, 8, false);\nlist13 = list8;\ndelegateBooleanAssertion(types, 8, 13, true);\nlist8 = (List<Object>[]) list13;\ndelegateBooleanAssertion(types, 13, 8, false);\n//        list9 = list9;\ndelegateBooleanAssertion(types, 9, 9, true);\nlist10 = (List<? super Object>[]) list9;\ndelegateBooleanAssertion(types, 9, 10, false);\nlist9 = list10;\ndelegateBooleanAssertion(types, 10, 9, true);\nlist11 = (List<String>[]) list9;\ndelegateBooleanAssertion(types, 9, 11, false);\nlist9 = list11;\ndelegateBooleanAssertion(types, 11, 9, true);\nlist12 = (List<? extends String>[]) list9;\ndelegateBooleanAssertion(types, 9, 12, false);\nlist9 = list12;\ndelegateBooleanAssertion(types, 12, 9, true);\nlist13 = (List<? super String>[]) list9;\ndelegateBooleanAssertion(types, 9, 13, false);\nlist9 = list13;\ndelegateBooleanAssertion(types, 13, 9, true);\n//        list10 = list10;\ndelegateBooleanAssertion(types, 10, 10, true);\n// list11 = list10;\ndelegateBooleanAssertion(types, 10, 11, false);\n// list10 = list11;\ndelegateBooleanAssertion(types, 11, 10, false);\n// list12 = list10;\ndelegateBooleanAssertion(types, 10, 12, false);\n// list10 = list12;\ndelegateBooleanAssertion(types, 12, 10, false);\nlist13 = list10;\ndelegateBooleanAssertion(types, 10, 13, true);\nlist10 = (List<? super Object>[]) list13;\ndelegateBooleanAssertion(types, 13, 10, false);\n//        list11 = list11;\ndelegateBooleanAssertion(types, 11, 11, true);\nlist12 = list11;\ndelegateBooleanAssertion(types, 11, 12, true);\nlist11 = (List<String>[]) list12;\ndelegateBooleanAssertion(types, 12, 11, false);\nlist13 = list11;\ndelegateBooleanAssertion(types, 11, 13, true);\nlist11 = (List<String>[]) list13;\ndelegateBooleanAssertion(types, 13, 11, false);\n//        list12 = list12;\ndelegateBooleanAssertion(types, 12, 12, true);\nlist13 = (List<? super String>[]) list12;\ndelegateBooleanAssertion(types, 12, 13, false);\nlist12 = (List<? extends String>[]) list13;\ndelegateBooleanAssertion(types, 13, 12, false);\n//        list13 = list13;\ndelegateBooleanAssertion(types, 13, 13, true);\nType disType = getClass().getField(\"dis\").getGenericType();\n// Reporter.log( ( ( ParameterizedType ) disType\n// ).getOwnerType().getClass().toString() );\nType datType = getClass().getField(\"dat\").getGenericType();\nType daType = getClass().getField(\"da\").getGenericType();\nType uhderType = getClass().getField(\"uhder\").getGenericType();\nType dingType = getClass().getField(\"ding\").getGenericType();\nType testerType = getClass().getField(\"tester\").getGenericType();\nType tester2Type = getClass().getField(\"tester2\").getGenericType();\nType dat2Type = getClass().getField(\"dat2\").getGenericType();\nType dat3Type = getClass().getField(\"dat3\").getGenericType();\ndis = dat;\nAssert.assertTrue(TypeUtils.isAssignable(datType, disType));\n// dis = da;\nAssert.assertFalse(TypeUtils.isAssignable(daType, disType));\ndis = uhder;\nAssert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\ndis = ding;\nAssert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\nTypeUtils.isAssignable(dingType, disType));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.ClassUtils:isAssignable(Ljava/lang/Class;Ljava/lang/Class;)Z",
                    "method_body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\nreturn isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n}",
                    "method_id": 0
                },
                {
                    "method_signature": "org.apache.commons.lang3.JavaVersion:atLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
                    "method_body": "public boolean atLeast(JavaVersion requiredVersion) {\nreturn this.value >= requiredVersion.value;\n}",
                    "method_id": 1
                },
                {
                    "method_signature": "org.apache.commons.lang3.ClassUtils:isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z",
                    "method_body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\nif (toClass == null) {\nif (cls == null) {\nif (autoboxing) {\nif (cls.isPrimitive() && !toClass.isPrimitive()) {\ncls = primitiveToWrapper(cls);\nif (cls == null) {\nif (toClass.isPrimitive() && !cls.isPrimitive()) {\nif (cls.equals(toClass)) {\nif (cls.isPrimitive()) {\nreturn toClass.isAssignableFrom(cls);\n}",
                    "method_id": 2
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:substituteTypeVariables(Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;",
                    "method_body": "private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\nif (type instanceof TypeVariable<?> && typeVarAssigns != null) {\nreturn type;\n}",
                    "method_id": 3
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getImplicitLowerBounds(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;",
                    "method_body": "public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {\nType[] bounds = wildcardType.getLowerBounds();\nreturn bounds.length == 0 ? new Type[] { null } : bounds;\n}",
                    "method_id": 4
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;",
                    "method_body": "private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\nif (type instanceof Class<?>) {\nreturn getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\nif (type instanceof ParameterizedType) {\nreturn getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\n}",
                    "method_id": 5
                },
                {
                    "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;)Ljava/lang/String;",
                    "method_body": "public abstract int translate(CharSequence input, int index, Writer out) throws IOException;\nif (input == null) {\nStringWriter writer = new StringWriter(input.length() * 2);\ntranslate(input, writer);\nreturn writer.toString();\n}",
                    "method_id": 6
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;)Z",
                    "method_body": "private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\nif (type == null) {\nif (toParameterizedType == null) {\nif (toParameterizedType.equals(type)) {\nreturn true;\nClass<?> toClass = getRawType(toParameterizedType);\nMap<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\nif (fromTypeVarAssigns == null) {\nif (fromTypeVarAssigns.isEmpty()) {\nreturn true;\nMap<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\nfor (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\nType toTypeArg = entry.getValue();\nType fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\nif (fromTypeArg != null\nreturn false;\n}\nreturn true;\n}",
                    "method_id": 7
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/reflect/ParameterizedType;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;",
                    "method_body": "private static Map<TypeVariable<?>, Type> getTypeArguments(\nClass<?> cls = getRawType(parameterizedType);\nif (!isAssignable(cls, toClass)) {\nType ownerType = parameterizedType.getOwnerType();\nif (ownerType instanceof ParameterizedType) {\nParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\ntypeVarAssigns = getTypeArguments(parameterizedOwnerType,\n} else {\ntypeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\nType[] typeArgs = parameterizedType.getActualTypeArguments();\nTypeVariable<?>[] typeParams = cls.getTypeParameters();\nfor (int i = 0; i < typeParams.length; i++) {\nType typeArg = typeArgs[i];\ntypeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\nif (toClass.equals(cls)) {\nreturn typeVarAssigns;\nreturn getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n}",
                    "method_id": 8
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getClosestParentType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
                    "method_body": "private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\nif (superClass.isInterface()) {\nType[] interfaceTypes = cls.getGenericInterfaces();\nType genericInterface = null;\nfor (Type midType : interfaceTypes) {\nClass<?> midClass = null;\nif (midType instanceof ParameterizedType) {\nmidClass = getRawType((ParameterizedType) midType);\nif (isAssignable(midClass, superClass)\ngenericInterface = midType;\nif (genericInterface != null) {\nreturn genericInterface;\nreturn cls.getGenericSuperclass();\n}",
                    "method_id": 9
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;Ljava/util/Map;)Z",
                    "method_body": "private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\nif (type == null) {\nif (toGenericArrayType == null) {\nif (toGenericArrayType.equals(type)) {\nreturn true;\nType toComponentType = toGenericArrayType.getGenericComponentType();\nif (type instanceof Class<?>) {\nif (type instanceof GenericArrayType) {\nreturn isAssignable(((GenericArrayType) type).getGenericComponentType(),\n}",
                    "method_id": 10
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z",
                    "method_body": "public static boolean isAssignable(Type type, Type toType) {\nreturn isAssignable(type, toType, null);\n}",
                    "method_id": 11
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/WildcardType;Ljava/util/Map;)Z",
                    "method_body": "private static boolean isAssignable(Type type, WildcardType toWildcardType,\nif (type == null) {\nif (toWildcardType == null) {\nif (toWildcardType.equals(type)) {\nType[] toUpperBounds = getImplicitUpperBounds(toWildcardType);\nType[] toLowerBounds = getImplicitLowerBounds(toWildcardType);\nif (type instanceof WildcardType) {\nWildcardType wildcardType = (WildcardType) type;\nType[] upperBounds = getImplicitUpperBounds(wildcardType);\nType[] lowerBounds = getImplicitLowerBounds(wildcardType);\nfor (Type toBound : toUpperBounds) {\ntoBound = substituteTypeVariables(toBound, typeVarAssigns);\nfor (Type bound : upperBounds) {\nif (!isAssignable(bound, toBound, typeVarAssigns)) {\nreturn false;\nfor (Type toBound : toLowerBounds) {\ntoBound = substituteTypeVariables(toBound, typeVarAssigns);\nfor (Type bound : lowerBounds) {\nif (!isAssignable(toBound, bound, typeVarAssigns)) {\nreturn false;\nreturn true;\nfor (Type toBound : toUpperBounds) {\nif (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\nreturn false;\nfor (Type toBound : toLowerBounds) {\nif (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\nreturn false;\nreturn true;\n}",
                    "method_id": 12
                },
                {
                    "method_signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator:translate(Ljava/lang/CharSequence;Ljava/io/Writer;)V",
                    "method_body": "public final void translate(CharSequence input, Writer out) throws IOException {\nif (out == null) {\nif (input == null) {\nint pos = 0;\nint len = input.length();\nwhile (pos < len) {\nint consumed = translate(input, pos, out);\nif (consumed == 0) {\nchar[] c = Character.toChars(Character.codePointAt(input, pos));\nout.write(c);\npos+= c.length;\ncontinue;\nfor (int pt = 0; pt < consumed; pt++) {\npos += Character.charCount(Character.codePointAt(input, pos));\n}\n}",
                    "method_id": 13
                },
                {
                    "method_signature": "org.apache.commons.lang3.StringEscapeUtils:escapeHtml4(Ljava/lang/String;)Ljava/lang/String;",
                    "method_body": "public static final String escapeHtml4(String input) {\nreturn ESCAPE_HTML4.translate(input);\n}",
                    "method_id": 14
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getImplicitUpperBounds(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;",
                    "method_body": "public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {\nType[] bounds = wildcardType.getUpperBounds();\nreturn bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n}",
                    "method_id": 15
                },
                {
                    "method_signature": "org.apache.commons.lang3.text.translate.LookupTranslator:translate(Ljava/lang/CharSequence;ILjava/io/Writer;)I",
                    "method_body": "public int translate(CharSequence input, int index, Writer out) throws IOException {\nint max = longest;\nif (index + longest > input.length()) {\nfor (int i = max; i >= shortest; i--) {\nCharSequence subSeq = input.subSequence(index, index + i);\nCharSequence result = lookupMap.get(subSeq);\nif (result != null) {\nout.write(result.toString());\nreturn i;\nreturn 0;\n}",
                    "method_id": 16
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map;)Z",
                    "method_body": "private static boolean isAssignable(Type type, Type toType,\nif (toType == null || toType instanceof Class<?>) {\nreturn isAssignable(type, (Class<?>) toType);\nif (toType instanceof ParameterizedType) {\nreturn isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\nif (toType instanceof GenericArrayType) {\nreturn isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\nif (toType instanceof WildcardType) {\nreturn isAssignable(type, (WildcardType) toType, typeVarAssigns);\n}",
                    "method_id": 17
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getRawType(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;",
                    "method_body": "private static Class<?> getRawType(ParameterizedType parameterizedType) {\nType rawType = parameterizedType.getRawType();\nif (!(rawType instanceof Class<?>)) {\nreturn (Class<?>) rawType;\n}",
                    "method_id": 18
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z",
                    "method_body": "private static boolean isAssignable(Type type, Class<?> toClass) {\nif (type == null) {\nreturn toClass == null || !toClass.isPrimitive();\nif (toClass == null) {\nreturn false;\nif (toClass.equals(type)) {\nreturn true;\nif (type instanceof Class<?>) {\nreturn ClassUtils.isAssignable((Class<?>) type, toClass);\nif (type instanceof ParameterizedType) {\nreturn isAssignable(getRawType((ParameterizedType) type), toClass);\n}",
                    "method_id": 19
                },
                {
                    "method_signature": "org.apache.commons.lang3.SystemUtils:isJavaVersionAtLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
                    "method_body": "public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\nreturn JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n}",
                    "method_id": 20
                },
                {
                    "method_signature": "org.apache.commons.lang3.text.translate.AggregateTranslator:translate(Ljava/lang/CharSequence;ILjava/io/Writer;)I",
                    "method_body": "public int translate(CharSequence input, int index, Writer out) throws IOException {\nfor (CharSequenceTranslator translator : translators) {\nint consumed = translator.translate(input, index, out);\nif(consumed != 0) {\nreturn consumed;\nreturn 0;\n}",
                    "method_id": 21
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:normalizeUpperBounds([Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;",
                    "method_body": "public static Type[] normalizeUpperBounds(Type[] bounds) {\nif (bounds.length < 2) {\nreturn bounds;\n}",
                    "method_id": 22
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertFalse(Assert.java:64)\nat org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable(TypeUtilsTest.java:344)",
            "test_id": 0
        },
        {
            "test_name": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments",
            "test_body": "public void testGetTypeArguments() {\nMap<TypeVariable<?>, Type> typeVarAssigns;\nTypeVariable<?> treeSetTypeVar;\nType typeArg;\n477: typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\ntreeSetTypeVar = Comparable.class.getTypeParameters()[0];\nAssert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\ntypeVarAssigns.containsKey(treeSetTypeVar));\ntypeArg = typeVarAssigns.get(treeSetTypeVar);\nAssert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\ntypeVarAssigns.get(treeSetTypeVar));\n485: typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\ntreeSetTypeVar = Comparable.class.getTypeParameters()[0];\nAssert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\ntypeVarAssigns.containsKey(treeSetTypeVar));\ntypeArg = typeVarAssigns.get(treeSetTypeVar);\nAssert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\ntypeVarAssigns.get(treeSetTypeVar));\n493: Collection<Integer> col = Arrays.asList(new Integer[0]);\ntypeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\ntreeSetTypeVar = Comparable.class.getTypeParameters()[0];\nAssert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\ntypeVarAssigns.containsKey(treeSetTypeVar));\n499: typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\nAssert.assertTrue(typeVarAssigns.size() == 2);\nAssert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\nAssert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n504: typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\nAssert.assertEquals(2, typeVarAssigns.size());\nAssert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));",
            "covered_methods": [
                {
                    "method_signature": "org.apache.commons.lang3.ClassUtils:isAssignable(Ljava/lang/Class;Ljava/lang/Class;)Z",
                    "method_body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\nreturn isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n}",
                    "method_id": 23
                },
                {
                    "method_signature": "org.apache.commons.lang3.JavaVersion:atLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
                    "method_body": "public boolean atLeast(JavaVersion requiredVersion) {\nreturn this.value >= requiredVersion.value;\n}",
                    "method_id": 24
                },
                {
                    "method_signature": "org.apache.commons.lang3.ClassUtils:primitiveToWrapper(Ljava/lang/Class;)Ljava/lang/Class;",
                    "method_body": "public static Class<?> primitiveToWrapper(Class<?> cls) {\nClass<?> convertedClass = cls;\nif (cls != null && cls.isPrimitive()) {\nconvertedClass = primitiveWrapperMap.get(cls);\nreturn convertedClass;\n}",
                    "method_id": 25
                },
                {
                    "method_signature": "org.apache.commons.lang3.ClassUtils:isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z",
                    "method_body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\nif (toClass == null) {\nif (cls == null) {\nif (autoboxing) {\nif (cls.isPrimitive() && !toClass.isPrimitive()) {\ncls = primitiveToWrapper(cls);\nif (cls == null) {\nif (toClass.isPrimitive() && !cls.isPrimitive()) {\nif (cls.equals(toClass)) {\nif (cls.isPrimitive()) {\nreturn toClass.isAssignableFrom(cls);\n}",
                    "method_id": 26
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/util/Map;",
                    "method_body": "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {\nreturn getTypeArguments(type, toClass, null);\n}",
                    "method_id": 27
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;",
                    "method_body": "private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\nif (type instanceof Class<?>) {\nreturn getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\nif (type instanceof ParameterizedType) {\nreturn getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\n}",
                    "method_id": 28
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;",
                    "method_body": "private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\nif (!isAssignable(cls, toClass)) {\nif (cls.isPrimitive()) {\nif (toClass.isPrimitive()) {\ncls = ClassUtils.primitiveToWrapper(cls);\nHashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\nif (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\nreturn typeVarAssigns;\nreturn getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n}",
                    "method_id": 29
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getTypeArguments(Ljava/lang/reflect/ParameterizedType;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;",
                    "method_body": "private static Map<TypeVariable<?>, Type> getTypeArguments(\nClass<?> cls = getRawType(parameterizedType);\nif (!isAssignable(cls, toClass)) {\nType ownerType = parameterizedType.getOwnerType();\nif (ownerType instanceof ParameterizedType) {\nParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\ntypeVarAssigns = getTypeArguments(parameterizedOwnerType,\n} else {\ntypeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\nType[] typeArgs = parameterizedType.getActualTypeArguments();\nTypeVariable<?>[] typeParams = cls.getTypeParameters();\nfor (int i = 0; i < typeParams.length; i++) {\nType typeArg = typeArgs[i];\ntypeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\nif (toClass.equals(cls)) {\nreturn typeVarAssigns;\nreturn getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n}",
                    "method_id": 30
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getClosestParentType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;",
                    "method_body": "private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\nif (superClass.isInterface()) {\nType[] interfaceTypes = cls.getGenericInterfaces();\nType genericInterface = null;\nfor (Type midType : interfaceTypes) {\nClass<?> midClass = null;\nif (midType instanceof ParameterizedType) {\nmidClass = getRawType((ParameterizedType) midType);\nif (isAssignable(midClass, superClass)\ngenericInterface = midType;\nif (genericInterface != null) {\nreturn genericInterface;\nreturn cls.getGenericSuperclass();\n}",
                    "method_id": 31
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z",
                    "method_body": "public static boolean isAssignable(Type type, Type toType) {\nreturn isAssignable(type, toType, null);\n}",
                    "method_id": 32
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:getRawType(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;",
                    "method_body": "private static Class<?> getRawType(ParameterizedType parameterizedType) {\nType rawType = parameterizedType.getRawType();\nif (!(rawType instanceof Class<?>)) {\nreturn (Class<?>) rawType;\n}",
                    "method_id": 33
                },
                {
                    "method_signature": "org.apache.commons.lang3.reflect.TypeUtils:isAssignable(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z",
                    "method_body": "private static boolean isAssignable(Type type, Class<?> toClass) {\nif (type == null) {\nreturn toClass == null || !toClass.isPrimitive();\nif (toClass == null) {\nreturn false;\nif (toClass.equals(type)) {\nreturn true;\nif (type instanceof Class<?>) {\nreturn ClassUtils.isAssignable((Class<?>) type, toClass);\nif (type instanceof ParameterizedType) {\nreturn isAssignable(getRawType((ParameterizedType) type), toClass);\n}",
                    "method_id": 34
                },
                {
                    "method_signature": "org.apache.commons.lang3.SystemUtils:isJavaVersionAtLeast(Lorg/apache/commons/lang3/JavaVersion;)Z",
                    "method_body": "public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\nreturn JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n}",
                    "method_id": 35
                }
            ],
            "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments(TypeUtilsTest.java:505)",
            "test_id": 1
        }
    ]
}