{
    "bug_id": 36,
    "test_id": 1,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber",
    "test_body": "public void testIsNumber() {\nString val = \"12345\";\nassertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\nval = \"1234.5\";\nassertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\nval = \".12345\";\nassertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\nval = \"1234E5\";\nassertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\nval = \"1234E+5\";\nassertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\nval = \"1234E-5\";\nassertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\nval = \"123.4E5\";\nassertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\nval = \"-1234\";\nassertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\nval = \"-1234.5\";\nassertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\nval = \"-.12345\";\nassertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\nval = \"-1234E5\";\nassertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\nval = \"0\";\nassertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\nval = \"-0\";\nassertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\nval = \"01234\";\nassertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\nval = \"-01234\";\nassertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\nval = \"0xABC123\";\nassertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\nval = \"0x0\";\nassertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\nval = \"123.4E21D\";\nassertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\nval = \"-221.23F\";\nassertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\nval = \"22338L\";\nassertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\nval = null;\nassertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\nval = \"\";\nassertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\nval = \"--2.3\";\nassertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\nval = \".12.3\";\nassertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\nval = \"-123E\";\nassertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\nval = \"-123E+-212\";\nassertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\nval = \"-123E2.12\";\nassertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\nval = \"0xGF\";\nassertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\nval = \"0xFAE-1\";\nassertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\nval = \".\";\nassertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\nval = \"-0ABC123\";\nassertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\nval = \"123.4E-D\";\nassertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\nval = \"123.4ED\";\nassertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\nval = \"1234E5l\";\nassertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\nval = \"11a\";\nassertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \nval = \"1a\";\nassertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \nval = \"a\";\nassertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \nval = \"11g\";\nassertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \nval = \"11z\";\nassertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \nval = \"11def\";\nassertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \nval = \"11d11\";\nassertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \nval = \"11 11\";\nassertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\nval = \" 1111\";\nassertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\nval = \"1111 \";\nassertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\nassertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n1136: // LANG-521\nval = \"2.\";\nassertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: isNumber(String) LANG-521 failed\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber(NumberUtilsTest.java:1138)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createFloat(Ljava/lang/String;)Ljava/lang/Float;",
            "method_body": "public static Float createFloat(String str) {\nif (str == null) {\nreturn Float.valueOf(str);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createLong(Ljava/lang/String;)Ljava/lang/Long;",
            "method_body": "public static Long createLong(String str) {\nif (str == null) {\nreturn Long.valueOf(str);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createInteger(Ljava/lang/String;)Ljava/lang/Integer;",
            "method_body": "public static Integer createInteger(String str) {\nif (str == null) {\nreturn Integer.decode(str);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isAllZeros(Ljava/lang/String;)Z",
            "method_body": "private static boolean isAllZeros(String str) {\nif (str == null) {\nfor (int i = str.length() - 1; i >= 0; i--) {\nif (str.charAt(i) != '0') {\nreturn false;\nreturn str.length() > 0;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createDouble(Ljava/lang/String;)Ljava/lang/Double;",
            "method_body": "public static Double createDouble(String str) {\nif (str == null) {\nreturn Double.valueOf(str);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isDigits(Ljava/lang/String;)Z",
            "method_body": "public static boolean isDigits(String str) {\nif (StringUtils.isEmpty(str)) {\nfor (int i = 0; i < str.length(); i++) {\nif (!Character.isDigit(str.charAt(i))) {\nreturn true;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isNumber(Ljava/lang/String;)Z",
            "method_body": "public static boolean isNumber(String str) {\nif (StringUtils.isEmpty(str)) {\nreturn false;\nchar[] chars = str.toCharArray();\nint sz = chars.length;\nboolean hasExp = false;\nboolean hasDecPoint = false;\nboolean allowSigns = false;\nboolean foundDigit = false;\nint start = (chars[0] == '-') ? 1 : 0;\nif (sz > start + 1) {\nif (chars[start] == '0' && chars[start + 1] == 'x') {\nint i = start + 2;\nif (i == sz) {\nfor (; i < chars.length; i++) {\nif ((chars[i] < '0' || chars[i] > '9')\nreturn false;\nreturn true;\nsz--; // don't want to loop to the last char, check it afterwords\nint i = start;\nwhile (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\nif (chars[i] >= '0' && chars[i] <= '9') {\nfoundDigit = true;\nallowSigns = false;\n} else if (chars[i] == '.') {\nif (hasDecPoint || hasExp) {\nreturn false;\nhasDecPoint = true;\n} else if (chars[i] == 'e' || chars[i] == 'E') {\nif (hasExp) {\nif (!foundDigit) {\nhasExp = true;\nallowSigns = true;\n} else if (chars[i] == '+' || chars[i] == '-') {\nif (!allowSigns) {\nreturn false;\nallowSigns = false;\nfoundDigit = false; // we need a digit after the E\nreturn false;\ni++;\nif (i < chars.length) {\nif (chars[i] >= '0' && chars[i] <= '9') {\nreturn true;\nif (chars[i] == 'e' || chars[i] == 'E') {\nreturn false;\nif (!allowSigns\nreturn foundDigit;\nif (chars[i] == 'l'\nreturn foundDigit && !hasExp;\nreturn false;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isBlank(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isBlank(CharSequence str) {\nif (str == null || (strLen = str.length()) == 0) {\nreturn true;\nfor (int i = 0; i < strLen; i++) {\nif ((Character.isWhitespace(str.charAt(i)) == false)) {\nreturn false;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createBigDecimal(Ljava/lang/String;)Ljava/math/BigDecimal;",
            "method_body": "public static BigDecimal createBigDecimal(String str) {\nif (str == null) {\nif (StringUtils.isBlank(str)) {\nreturn new BigDecimal(str);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(String str) throws NumberFormatException {\nif (str == null) {\nreturn null;\nif (StringUtils.isBlank(str)) {\nthrow new NumberFormatException(\"A blank string is not a valid number\");\nif (str.startsWith(\"--\")) {\nreturn null;\nif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\nreturn createInteger(str);\nchar lastChar = str.charAt(str.length() - 1);\nint decPos = str.indexOf('.');\nint expPos = str.indexOf('e') + str.indexOf('E') + 1;\nif (decPos > -1) {\nif (expPos > -1) {\nif (expPos < decPos) {\nthrow new NumberFormatException(str + \" is not a valid number.\");\ndec = str.substring(decPos + 1, expPos);\ndec = str.substring(decPos + 1);\nmant = str.substring(0, decPos);\nif (expPos > -1) {\nmant = str.substring(0, expPos);\nmant = str;\ndec = null;\nif (!Character.isDigit(lastChar)) {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = str.substring(expPos + 1, str.length() - 1);\nexp = null;\nString numeric = str.substring(0, str.length() - 1);\nboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nswitch (lastChar) {\nif (dec == null\nreturn createLong(numeric);\n} catch (NumberFormatException nfe) {\nreturn createBigInteger(numeric);\nthrow new NumberFormatException(str + \" is not a valid number.\");\nFloat f = NumberUtils.createFloat(numeric);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n} catch (NumberFormatException nfe) {\n}\nDouble d = NumberUtils.createDouble(numeric);\nif (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\nreturn d;\n} catch (NumberFormatException nfe) {\n}\nreturn createBigDecimal(numeric);\n} catch (NumberFormatException e) {\nthrow new NumberFormatException(str + \" is not a valid number.\");\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = str.substring(expPos + 1, str.length());\nexp = null;\nif (dec == null && exp == null) {\nreturn createInteger(str);\n} catch (NumberFormatException nfe) {\nreturn createLong(str);\n} catch (NumberFormatException nfe) {\nreturn createBigInteger(str);\nboolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nFloat f = createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n} catch (NumberFormatException nfe) {\n}\nDouble d = createDouble(str);\nif (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\nreturn d;\n} catch (NumberFormatException nfe) {\nreturn createBigDecimal(str);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isEmpty(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isEmpty(CharSequence str) {\nreturn str == null || str.length() == 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createBigInteger(Ljava/lang/String;)Ljava/math/BigInteger;",
            "method_body": "public static BigInteger createBigInteger(String str) {\nif (str == null) {\nreturn new BigInteger(str);\n}",
            "method_id": 11
        }
    ]
}