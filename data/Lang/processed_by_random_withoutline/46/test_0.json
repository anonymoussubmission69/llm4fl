{
    "bug_id": 46,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaWithSlash",
    "test_body": "public void testEscapeJavaWithSlash() {\nfinal String input = \"String with a slash (/) in it\";\n106: final String expected = input;\nfinal String actual = StringEscapeUtils.escapeJava(input);\n109: /**\n* In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n* in a Java string.\n*/\nassertEquals(expected, actual);\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...tring with a slash ([]/) in it> but was:<...tring with a slash ([\\]/) in it>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaWithSlash(StringEscapeUtilsTest.java:113)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString(Ljava/lang/String;Z)Ljava/lang/String;",
            "method_body": "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\nif (str == null) {\nStringWriter writer = new StringWriter(str.length() * 2);\nescapeJavaStyleString(writer, str, escapeSingleQuotes);\nreturn writer.toString();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:escapeJavaStyleString(Ljava/io/Writer;Ljava/lang/String;Z)V",
            "method_body": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\nif (out == null) {\nif (str == null) {\nsz = str.length();\nfor (int i = 0; i < sz; i++) {\nchar ch = str.charAt(i);\nif (ch > 0xfff) {\n} else if (ch > 0xff) {\n} else if (ch > 0x7f) {\n} else if (ch < 32) {\nswitch (ch) {\nout.write('\\\\');\nout.write('/');\nbreak;\nout.write(ch);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang.StringEscapeUtils:escapeJava(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public static String escapeJava(String str) {\nreturn escapeJavaStyleString(str, false);\n}",
            "method_id": 2
        }
    ]
}