{
    "bug_id": 62,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.EntitiesTest.testNumberOverflow",
    "test_body": "200: public void testNumberOverflow() throws Exception {\n201: doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n202: doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[\u614e]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)\nat org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.Entities:unescape(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String unescape(String str) {\nint firstAmp = str.indexOf('&');\nif (firstAmp < 0) {\nStringBuffer buf = new StringBuffer(str.length());\nbuf.append(str.substring(0, firstAmp));\nfor (int i = firstAmp; i < str.length(); ++i) {\nchar ch = str.charAt(i);\nif (ch == '&') {\nint semi = str.indexOf(';', i + 1);\nif (semi == -1) {\nint amph = str.indexOf('&', i + 1);\nif( amph != -1 && amph < semi ) {\nString entityName = str.substring(i + 1, semi);\nif (entityName.length() == 0) {\n} else if (entityName.charAt(0) == '#') {\nif (entityName.length() == 1) {\nchar charAt1 = entityName.charAt(1);\nif (charAt1 == 'x' || charAt1=='X') {\nentityValue = Integer.parseInt(entityName.substring(1));\n}\n}\nif (entityValue == -1) {\nbuf.append((char) (entityValue));\ni = semi;\n} else {\nreturn buf.toString();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.Entities:addEntity(Ljava/lang/String;I)V",
            "method_body": "public void addEntity(String name, int value) {\nmap.add(name, value);\n}",
            "method_id": 1
        }
    ]
}