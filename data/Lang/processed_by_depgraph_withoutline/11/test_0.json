{
    "bug_id": 11,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.RandomStringUtilsTest.testLANG807",
    "test_body": "133: public void testLANG807() {\n134: try {\n135: RandomStringUtils.random(3,5,5,false,false);\n136: fail(\"Expected IllegalArgumentException\");\n137: } catch (IllegalArgumentException ex) { // distinguish from Random#nextInt message\n138: final String msg = ex.getMessage();\n139: assertTrue(\"Message (\" + msg + \") must contain 'start'\", msg.contains(\"start\"));\n140: assertTrue(\"Message (\" + msg + \") must contain 'end'\", msg.contains(\"end\"));",
    "stack_trace": "junit.framework.AssertionFailedError: Message (bound must be positive) must contain 'start'\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.TestCase.assertTrue(TestCase.java:192)\nat org.apache.commons.lang3.RandomStringUtilsTest.testLANG807(RandomStringUtilsTest.java:139)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.RandomStringUtils:random(IIIZZ[CLjava/util/Random;)Ljava/lang/String;",
            "method_body": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\nif (count == 0) {\n} else if (count < 0) {\nif (chars != null && chars.length == 0) {\nif (start == 0 && end == 0) {\nchar[] buffer = new char[count];\nint gap = end - start;\nwhile (count-- != 0) {\nif (chars == null) {\nch = (char) (random.nextInt(gap) + start);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.RandomStringUtils:random(IIIZZ)Ljava/lang/String;",
            "method_body": "public static String random(int count, int start, int end, boolean letters, boolean numbers) {\nreturn random(count, start, end, letters, numbers, null, RANDOM);\n}",
            "method_id": 1
        }
    ]
}