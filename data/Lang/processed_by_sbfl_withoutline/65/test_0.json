{
    "bug_id": 65,
    "test_id": 0,
    "test_name": "org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59",
    "test_body": "896: public void testTruncateLang59() throws Exception {\n897: 898: // Set TimeZone to Mountain Time\n899: TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n900: TimeZone.setDefault(MST_MDT);\n901: DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n902: format.setTimeZone(MST_MDT);\n903: 904: Date oct31_01MDT = new Date(1099206000000L); \n905: 906: Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n907: Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n908: Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n909: Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n910: 911: assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n912: assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n913: assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n914: assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n915: assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n916: 917: // ------- Demonstrate Problem -------\n918: Calendar gval = Calendar.getInstance();\n919: gval.setTime(new Date(oct31_01MDT.getTime()));\n920: gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n921: assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n922: 923: // ---------- Test Truncate ----------\n924: assertEquals(\"Truncate Calendar.MILLISECOND\",\n925: oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n926: 927: assertEquals(\"Truncate Calendar.SECOND\",\n928: oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n929: 930: assertEquals(\"Truncate Calendar.MINUTE\",\n931: oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n932: 933: assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n934: oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n935: 936: assertEquals(\"Truncate Calendar.HOUR\",\n937: oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n938: 939: assertEquals(\"Truncate Calendar.DATE\",\n940: oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n941: 942: 943: // ---------- Test Round (down) ----------\n944: assertEquals(\"Round Calendar.MILLISECOND\",\n945: oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n946: 947: assertEquals(\"Round Calendar.SECOND\",\n948: oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n949: 950: assertEquals(\"Round Calendar.MINUTE\",\n951: oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n952: 953: assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n954: oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n955: 956: assertEquals(\"Round Calendar.HOUR\",\n957: oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n958: 959: assertEquals(\"Round Calendar.DATE\",\n960: oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n961: 962: // restore default time zone\n963: TimeZone.setDefault(defaultZone);\n964: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: Truncate Calendar.SECOND expected:<Sun Oct 31 01:02:03 MDT 2004> but was:<Sun Oct 31 01:02:03 MST 2004>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59(DateUtilsTest.java:927)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang.time.DateUtils:truncate(Ljava/util/Date;I)Ljava/util/Date;",
            "method_body": "public static Date truncate(Date date, int field) {\nif (date == null) {\nCalendar gval = Calendar.getInstance();\ngval.setTime(date);\nmodify(gval, field, false);\nreturn gval.getTime();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang.time.DateUtils:modify(Ljava/util/Calendar;IZ)V",
            "method_body": "private static void modify(Calendar val, int field, boolean round) {\nif (val.get(Calendar.YEAR) > 280000000) {\nboolean roundUp = false;\nfor (int i = 0; i < fields.length; i++) {\nfor (int j = 0; j < fields[i].length; j++) {\nif (fields[i][j] == field) {\nif (round && roundUp) {\nreturn;\nint offset = 0;\nboolean offsetSet = false;\nswitch (field) {\nif (!offsetSet) {\nint min = val.getActualMinimum(fields[i][0]);\nint max = val.getActualMaximum(fields[i][0]);\noffset = val.get(fields[i][0]) - min;\nroundUp = offset > ((max - min) / 2);\nval.set(fields[i][0], val.get(fields[i][0]) - offset);\n}",
            "method_id": 1
        }
    ]
}