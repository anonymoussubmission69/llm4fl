{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.text.translate.LookupTranslatorTest.testLang882",
    "test_body": "public void testLang882() throws IOException {\nfinal LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer(\"one\"), new StringBuffer(\"two\") } });\nfinal StringWriter out = new StringWriter();\nfinal int result = lt.translate(new StringBuffer(\"one\"), 0, out);\nassertEquals(\"Incorrect codepoint consumption\", 3, result);\nassertEquals(\"Incorrect value\", \"two\", out.toString());",
    "stack_trace": "junit.framework.AssertionFailedError: Incorrect codepoint consumption expected:<3> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.apache.commons.lang3.text.translate.LookupTranslatorTest.testLang882(LookupTranslatorTest.java:48)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.text.translate.LookupTranslator:translate(Ljava/lang/CharSequence;ILjava/io/Writer;)I",
            "method_body": "public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\nint max = longest;\nif (index + longest > input.length()) {\nfor (int i = max; i >= shortest; i--) {\nfinal CharSequence subSeq = input.subSequence(index, index + i);\nfinal CharSequence result = lookupMap.get(subSeq);\nif (result != null) {\nreturn 0;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.text.translate.LookupTranslator:<init>([[Ljava/lang/CharSequence;)V",
            "method_body": "public LookupTranslator(final CharSequence[]... lookup) {\nlookupMap = new HashMap<CharSequence, CharSequence>();\nint _shortest = Integer.MAX_VALUE;\nint _longest = 0;\nif (lookup != null) {\nfor (final CharSequence[] seq : lookup) {\nthis.lookupMap.put(seq[0], seq[1]);\nfinal int sz = seq[0].length();\nif (sz < _shortest) {\n_shortest = sz;\nif (sz > _longest) {\n_longest = sz;\nshortest = _shortest;\nlongest = _longest;\n}",
            "method_id": 1
        }
    ]
}