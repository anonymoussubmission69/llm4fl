{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss",
    "test_body": "public void testStringCreateNumberEnsureNoPrecisionLoss(){\nString shouldBeFloat = \"1.23\";\nString shouldBeDouble = \"3.40282354e+38\";\nString shouldBeBigDecimal = \"1.797693134862315759e+308\";\n128: assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);\nassertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);\nassertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss(NumberUtilsTest.java:129)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:isAllZeros(Ljava/lang/String;)Z",
            "method_body": "private static boolean isAllZeros(final String str) {\nif (str == null) {\nfor (int i = str.length() - 1; i >= 0; i--) {\nif (str.charAt(i) != '0') {\nreturn false;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createFloat(Ljava/lang/String;)Ljava/lang/Float;",
            "method_body": "public static Float createFloat(final String str) {\nif (str == null) {\nreturn Float.valueOf(str);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.lang3.math.NumberUtils:createNumber(Ljava/lang/String;)Ljava/lang/Number;",
            "method_body": "public static Number createNumber(final String str) throws NumberFormatException {\nif (str == null) {\nif (StringUtils.isBlank(str)) {\nfinal String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\nint pfxLen = 0;\nfor(final String pfx : hex_prefixes) {\nif (str.startsWith(pfx)) {\nif (pfxLen > 0) { // we have a hex number\nfinal char lastChar = str.charAt(str.length() - 1);\nfinal int decPos = str.indexOf('.');\nfinal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\nint numDecimals = 0; // Check required precision (LANG-693)\nif (decPos > -1) { // there is a decimal point\nif (expPos > -1) { // there is an exponent\nif (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\ndec = str.substring(decPos + 1, expPos);\ndec = str.substring(decPos + 1);\nmant = str.substring(0, decPos);\nnumDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\nif (!Character.isDigit(lastChar) && lastChar != '.') {\nif (expPos > -1 && expPos < str.length() - 1) {\nexp = str.substring(expPos + 1, str.length());\nexp = null;\nif (dec == null && exp == null) { // no decimal point and no exponent\nfinal boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\nfinal Float f = createFloat(str);\nif (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\nreturn f;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.lang3.StringUtils:isBlank(Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean isBlank(final CharSequence cs) {\nif (cs == null || (strLen = cs.length()) == 0) {\nfor (int i = 0; i < strLen; i++) {\nif (Character.isWhitespace(cs.charAt(i)) == false) {\nreturn false;\n}",
            "method_id": 3
        }
    ]
}