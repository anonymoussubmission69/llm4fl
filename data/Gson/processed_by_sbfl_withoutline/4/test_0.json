{
    "bug_id": 4,
    "test_id": 0,
    "test_name": "com.google.gson.stream.JsonReaderTest.testTopLevelValueTypes",
    "test_body": "public void testTopLevelValueTypes() throws IOException {\nJsonReader reader1 = new JsonReader(reader(\"true\"));\nassertTrue(reader1.nextBoolean());\nassertEquals(JsonToken.END_DOCUMENT, reader1.peek());",
    "stack_trace": "com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $\nat com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1572)\nat com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1422)\nat com.google.gson.stream.JsonReader.doPeek(JsonReader.java:586)\nat com.google.gson.stream.JsonReader.nextBoolean(JsonReader.java:854)\nat com.google.gson.stream.JsonReaderTest.testTopLevelValueTypes(JsonReaderTest.java:1224)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:syntaxError(Ljava/lang/String;)Ljava/io/IOException;",
            "method_body": "private IOException syntaxError(String message) throws IOException {\nthrow new MalformedJsonException(message\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.MalformedJsonException:<init>(Ljava/lang/String;)V",
            "method_body": "public MalformedJsonException(String msg) {\nsuper(msg);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineNumber + 1;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getColumnNumber()I",
            "method_body": "int getColumnNumber() {\nreturn pos - lineStart + 1;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getPath()Ljava/lang/String;",
            "method_body": "public String getPath() {\nStringBuilder result = new StringBuilder().append('$');\nfor (int i = 0, size = stackSize; i < size; i++) {\nswitch (stack[i]) {\nreturn result.toString();\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextBoolean()Z",
            "method_body": "public boolean nextBoolean() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:checkLenient()V",
            "method_body": "private void checkLenient() throws IOException {\nif (!lenient) {\nthrow syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:fillBuffer(I)Z",
            "method_body": "private boolean fillBuffer(int minimum) throws IOException {\nchar[] buffer = this.buffer;\nlineStart -= pos;\nif (limit != pos) {\nlimit = 0;\npos = 0;\nwhile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\nlimit += total;\nif (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff') {\nif (limit >= minimum) {\nreturn true;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 9
        }
    ]
}