{
    "bug_id": 4,
    "test_id": 2,
    "test_name": "com.google.gson.stream.JsonWriterTest.testTopLevelValueTypes",
    "test_body": "public void testTopLevelValueTypes() throws IOException {\nStringWriter string1 = new StringWriter();\nJsonWriter writer1 = new JsonWriter(string1);\nwriter1.value(true);\nwriter1.close();",
    "stack_trace": "java.lang.IllegalStateException: JSON must start with an array or an object.\nat com.google.gson.stream.JsonWriter.beforeValue(JsonWriter.java:623)\nat com.google.gson.stream.JsonWriter.value(JsonWriter.java:466)\nat com.google.gson.stream.JsonWriterTest.testTopLevelValueTypes(JsonWriterTest.java:31)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonWriter:beforeValue(Z)V",
            "method_body": "private void beforeValue(boolean root) throws IOException {\nswitch (peek()) {\nif (!lenient && !root) {\nthrow new IllegalStateException(\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:value(Z)Lcom/google/gson/stream/JsonWriter;",
            "method_body": "public JsonWriter value(boolean value) throws IOException {\nwriteDeferredName();\nbeforeValue(false);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:peek()I",
            "method_body": "private int peek() {\nif (stackSize == 0) {\nreturn stack[stackSize - 1];\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:push(I)V",
            "method_body": "private void push(int newTop) {\nif (stackSize == stack.length) {\nstack[stackSize++] = newTop;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:writeDeferredName()V",
            "method_body": "private void writeDeferredName() throws IOException {\nif (deferredName != null) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:<init>(Ljava/io/Writer;)V",
            "method_body": "private String indent;\nprivate String separator = \":\";\nprivate boolean serializeNulls = true;\n* Creates a new instance that writes a JSON-encoded stream to {@code out}.",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.stream.JsonWriter:<clinit>()V",
            "method_body": "private static final String[] REPLACEMENT_CHARS;\nREPLACEMENT_CHARS = new String[128];\nfor (int i = 0; i <= 0x1f; i++) {\nREPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i);\nREPLACEMENT_CHARS['\"'] = \"\\\\\\\"\";\nREPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\";\nREPLACEMENT_CHARS['\\t'] = \"\\\\t\";\nREPLACEMENT_CHARS['\\b'] = \"\\\\b\";\nREPLACEMENT_CHARS['\\n'] = \"\\\\n\";\nREPLACEMENT_CHARS['\\r'] = \"\\\\r\";\nREPLACEMENT_CHARS['\\f'] = \"\\\\f\";\nHTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();\nHTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\";\nHTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\";\nHTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\";\nHTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\";\nHTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";\n}",
            "method_id": 6
        }
    ]
}