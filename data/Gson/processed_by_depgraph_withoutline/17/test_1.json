{
    "bug_id": 17,
    "test_id": 1,
    "test_name": "com.google.gson.DefaultDateTypeAdapterTest.testUnexpectedToken",
    "test_body": "public void testUnexpectedToken() throws Exception {\ntry {\nDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\nadapter.fromJson(\"{}\");\nfail(\"Unexpected token should fail.\");",
    "stack_trace": "com.google.gson.JsonParseException: The date should be a string value\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:100)\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:40)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:260)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:273)\nat com.google.gson.DefaultDateTypeAdapterTest.testUnexpectedToken(DefaultDateTypeAdapterTest.java:173)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:read(Lcom/google/gson/stream/JsonReader;)Ljava/util/Date;",
            "method_body": "public Date read(JsonReader in) throws IOException {\nif (in.peek() != JsonToken.STRING) {\nthrow new JsonParseException(\"The date should be a string value\");\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:<init>(Ljava/lang/Class;Ljava/text/DateFormat;Ljava/text/DateFormat;)V",
            "method_body": "DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {\nif ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {\nthis.dateType = dateType;\nthis.enUsFormat = enUsFormat;\nthis.localFormat = localFormat;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:<init>(Ljava/lang/Class;)V",
            "method_body": "DefaultDateTypeAdapter(Class<? extends Date> dateType) {\nthis(dateType,\n}",
            "method_id": 2
        }
    ]
}