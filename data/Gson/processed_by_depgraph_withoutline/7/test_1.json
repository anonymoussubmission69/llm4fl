{
    "bug_id": 7,
    "test_id": 1,
    "test_name": "com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedIntegerKeys",
    "test_body": "public void testMapDeserializationWithUnquotedIntegerKeys() {\nType typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\nMap<Integer, String> map = gson.fromJson(\"{123:\\\"456\\\"}\", typeOfMap);\nassertEquals(1, map.size());",
    "stack_trace": "com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected an int but was STRING at line 1 column 2 path $.\nat com.google.gson.Gson.fromJson(Gson.java:892)\nat com.google.gson.Gson.fromJson(Gson.java:845)\nat com.google.gson.Gson.fromJson(Gson.java:794)\nat com.google.gson.functional.MapTest.testMapDeserializationWithUnquotedIntegerKeys(MapTest.java:172)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextInt()I",
            "method_body": "public int nextInt() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_LONG) {\nif (p == PEEKED_NUMBER) {\n} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\nthrow new IllegalStateException(\"Expected an int but was \" + peek()\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getPath()Ljava/lang/String;",
            "method_body": "public String getPath() {\nStringBuilder result = new StringBuilder().append('$');\nfor (int i = 0, size = stackSize; i < size; i++) {\nswitch (stack[i]) {\nresult.append('[').append(pathIndices[i]).append(']');\nbreak;\nresult.append('.');\nif (pathNames[i] != null) {\nreturn result.toString();\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:fillBuffer(I)Z",
            "method_body": "private boolean fillBuffer(int minimum) throws IOException {\nchar[] buffer = this.buffer;\nlineStart -= pos;\nif (limit != pos) {\nlimit = 0;\npos = 0;\nwhile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\nlimit += total;\nif (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff') {\nif (limit >= minimum) {\nreturn true;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:hasNext()Z",
            "method_body": "public boolean hasNext() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nreturn p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:peek()Lcom/google/gson/stream/JsonToken;",
            "method_body": "public JsonToken peek() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nswitch (p) {\nreturn JsonToken.BEGIN_OBJECT;\nreturn JsonToken.STRING;\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:beginObject()V",
            "method_body": "public void beginObject() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_BEGIN_OBJECT) {\npush(JsonScope.EMPTY_OBJECT);\npeeked = PEEKED_NONE;\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.Gson:newJsonReader(Ljava/io/Reader;)Lcom/google/gson/stream/JsonReader;",
            "method_body": "public JsonReader newJsonReader(Reader reader) {\nJsonReader jsonReader = new JsonReader(reader);\njsonReader.setLenient(lenient);\nreturn jsonReader;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:push(I)V",
            "method_body": "private void push(int newTop) {\nif (stackSize == stack.length) {\nstack[stackSize++] = newTop;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineNumber + 1;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getColumnNumber()I",
            "method_body": "int getColumnNumber() {\nreturn pos - lineStart + 1;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:isLenient()Z",
            "method_body": "public final boolean isLenient() {\nreturn lenient;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:consumeNonExecutePrefix()V",
            "method_body": "private void consumeNonExecutePrefix() throws IOException {\nnextNonWhitespace(true);\npos--;\nif (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\nfor (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\nreturn; // not a security token!\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.Gson:fromJson(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)Ljava/lang/Object;",
            "method_body": "public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {\nboolean isEmpty = true;\nboolean oldLenient = reader.isLenient();\nreader.setLenient(true);\nreader.peek();\nisEmpty = false;\nTypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(typeOfT);\nTypeAdapter<T> typeAdapter = getAdapter(typeToken);\nT object = typeAdapter.read(reader);\n} catch (IllegalStateException e) {\nthrow new JsonSyntaxException(e);\nreader.setLenient(oldLenient);\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:isLiteral(C)Z",
            "method_body": "private boolean isLiteral(char c) throws IOException {\nswitch (c) {\nreturn true;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:setLenient(Z)V",
            "method_body": "public final void setLenient(boolean lenient) {\nthis.lenient = lenient;\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:checkLenient()V",
            "method_body": "private void checkLenient() throws IOException {\nif (!lenient) {\n}",
            "method_id": 16
        },
        {
            "method_signature": "com.google.gson.Gson:fromJson(Ljava/lang/String;Ljava/lang/reflect/Type;)Ljava/lang/Object;",
            "method_body": "public <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\nif (json == null) {\nStringReader reader = new StringReader(json);\nT target = (T) fromJson(reader, typeOfT);\n}",
            "method_id": 17
        },
        {
            "method_signature": "com.google.gson.Gson:fromJson(Ljava/io/Reader;Ljava/lang/reflect/Type;)Ljava/lang/Object;",
            "method_body": "public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\nJsonReader jsonReader = newJsonReader(json);\nT object = (T) fromJson(jsonReader, typeOfT);\n}",
            "method_id": 18
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 19
        },
        {
            "method_signature": "com.google.gson.JsonSyntaxException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public JsonSyntaxException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 20
        },
        {
            "method_signature": "com.google.gson.Gson:getAdapter(Lcom/google/gson/reflect/TypeToken;)Lcom/google/gson/TypeAdapter;",
            "method_body": "public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\nTypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\nif (cached != null) {\nMap<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();\nboolean requiresThreadLocalCleanup = false;\nif (threadCalls == null) {\nthreadCalls = new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();\ncalls.set(threadCalls);\nrequiresThreadLocalCleanup = true;\nFutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);\nif (ongoingCall != null) {\nFutureTypeAdapter<T> call = new FutureTypeAdapter<T>();\nthreadCalls.put(type, call);\nfor (TypeAdapterFactory factory : factories) {\nTypeAdapter<T> candidate = factory.create(this, type);\nif (candidate != null) {\ncall.setDelegate(candidate);\ntypeTokenCache.put(type, candidate);\nreturn candidate;\n}\nthreadCalls.remove(type);\nif (requiresThreadLocalCleanup) {\ncalls.remove();\n}",
            "method_id": 21
        },
        {
            "method_signature": "com.google.gson.internal.$Gson$Preconditions:checkNotNull(Ljava/lang/Object;)Ljava/lang/Object;",
            "method_body": "public static <T> T checkNotNull(T obj) {\nif (obj == null) {\nreturn obj;\n}",
            "method_id": 22
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:get(Ljava/lang/reflect/Type;)Lcom/google/gson/reflect/TypeToken;",
            "method_body": "public static TypeToken<?> get(Type type) {\nreturn new TypeToken<Object>(type);\n}",
            "method_id": 23
        },
        {
            "method_signature": "com.google.gson.Gson$FutureTypeAdapter:setDelegate(Lcom/google/gson/TypeAdapter;)V",
            "method_body": "public void setDelegate(TypeAdapter<T> typeAdapter) {\nif (delegate != null) {\ndelegate = typeAdapter;\n}",
            "method_id": 24
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:<init>(Ljava/lang/reflect/Type;)V",
            "method_body": "TypeToken(Type type) {\nthis.type = $Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));\nthis.rawType = (Class<? super T>) $Gson$Types.getRawType(this.type);\nthis.hashCode = this.type.hashCode();\n}",
            "method_id": 25
        },
        {
            "method_signature": "com.google.gson.reflect.TypeToken:<init>()V",
            "method_body": "protected TypeToken() {\nthis.type = getSuperclassTypeParameter(getClass());\nthis.rawType = (Class<? super T>) $Gson$Types.getRawType(type);\nthis.hashCode = type.hashCode();\n}",
            "method_id": 26
        }
    ]
}