{
    "bug_id": 8,
    "test_id": 1,
    "test_name": "com.google.gson.internal.UnsafeAllocatorInstantiationTest.testInterfaceInstantiation",
    "test_body": "public void testInterfaceInstantiation() {\nUnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\ntry {\nunsafeAllocator.newInstance(Interface.class);\nfail();\n} catch (Exception e) {\nassertEquals(e.getClass(), UnsupportedOperationException.class);\n}",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<class java.lang.reflect.InvocationTargetException> but was:<class java.lang.UnsupportedOperationException>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat com.google.gson.internal.UnsafeAllocatorInstantiationTest.testInterfaceInstantiation(UnsafeAllocatorInstantiationTest.java:45)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.internal.UnsafeAllocator:create()Lcom/google/gson/internal/UnsafeAllocator;",
            "method_body": "public abstract <T> T newInstance(Class<T> c) throws Exception;\nClass<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");\nField f = unsafeClass.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nfinal Object unsafe = f.get(null);\nfinal Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);\nreturn new UnsafeAllocator() {\nreturn (T) allocateInstance.invoke(unsafe, c);\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.internal.UnsafeAllocator$1:newInstance(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public abstract <T> T newInstance(Class<T> c) throws Exception;\nClass<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\");\nField f = unsafeClass.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nfinal Object unsafe = f.get(null);\nfinal Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class);\nreturn new UnsafeAllocator() {\nreturn (T) allocateInstance.invoke(unsafe, c);\n}",
            "method_id": 1
        }
    ]
}