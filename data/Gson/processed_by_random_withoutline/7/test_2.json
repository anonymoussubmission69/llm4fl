{
    "bug_id": 7,
    "test_id": 2,
    "test_name": "com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers",
    "test_body": "public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {\nJsonReader reader = new JsonReader(reader(\"[12.34e5x]\"));\nreader.setLenient(true);\nreader.beginArray();\nassertEquals(STRING, reader.peek());\ntry {\nreader.nextInt();\nfail();",
    "stack_trace": "java.lang.IllegalStateException: Expected an int but was STRING at line 1 column 2 path $[0]\nat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1193)\nat com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers(JsonReaderTest.java:502)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:setLenient(Z)V",
            "method_body": "public final void setLenient(boolean lenient) {\nthis.lenient = lenient;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:peek()Lcom/google/gson/stream/JsonToken;",
            "method_body": "public JsonToken peek() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nswitch (p) {\nreturn JsonToken.BEGIN_OBJECT;\nreturn JsonToken.STRING;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:isLiteral(C)Z",
            "method_body": "private boolean isLiteral(char c) throws IOException {\nswitch (c) {\nreturn true;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextInt()I",
            "method_body": "public int nextInt() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\nif (p == PEEKED_LONG) {\nif (p == PEEKED_NUMBER) {\n} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\nthrow new IllegalStateException(\"Expected an int but was \" + peek()\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:push(I)V",
            "method_body": "private void push(int newTop) {\nif (stackSize == stack.length) {\nstack[stackSize++] = newTop;\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:fillBuffer(I)Z",
            "method_body": "private boolean fillBuffer(int minimum) throws IOException {\nchar[] buffer = this.buffer;\nlineStart -= pos;\nif (limit != pos) {\nlimit = 0;\npos = 0;\nwhile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\nlimit += total;\nif (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff') {\nif (limit >= minimum) {\nreturn true;\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getLineNumber()I",
            "method_body": "int getLineNumber() {\nreturn lineNumber + 1;\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:getColumnNumber()I",
            "method_body": "int getColumnNumber() {\nreturn pos - lineStart + 1;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:checkLenient()V",
            "method_body": "private void checkLenient() throws IOException {\nif (!lenient) {\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:consumeNonExecutePrefix()V",
            "method_body": "private void consumeNonExecutePrefix() throws IOException {\nnextNonWhitespace(true);\npos--;\nif (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\nfor (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\nif (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\nreturn; // not a security token!\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:beginArray()V",
            "method_body": "public void beginArray() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nif (p == PEEKED_BEGIN_ARRAY) {\npush(JsonScope.EMPTY_ARRAY);\npathIndices[stackSize - 1] = 0;\npeeked = PEEKED_NONE;\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:peekKeyword()I",
            "method_body": "private int peekKeyword() throws IOException {\nchar c = buffer[pos];\nif (c == 't' || c == 'T') {\n} else if (c == 'f' || c == 'F') {\n} else if (c == 'n' || c == 'N') {\nreturn PEEKED_NONE;\n}",
            "method_id": 13
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:peekNumber()I",
            "method_body": "private int peekNumber() throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nlong value = 0; // Negative to accommodate Long.MIN_VALUE more easily.\nboolean negative = false;\nboolean fitsInLong = true;\nint last = NUMBER_CHAR_NONE;\nint i = 0;\nfor (; true; i++) {\nif (p + i == l) {\nchar c = buffer[p + i];\nswitch (c) {\nif (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\nlast = NUMBER_CHAR_EXP_E;\ncontinue;\nif (last == NUMBER_CHAR_DIGIT) {\nlast = NUMBER_CHAR_DECIMAL;\ncontinue;\nif (c < '0' || c > '9') {\nif (!isLiteral(c)) {\nreturn PEEKED_NONE;\nif (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\nvalue = -(c - '0');\nlast = NUMBER_CHAR_DIGIT;\n} else if (last == NUMBER_CHAR_DIGIT) {\nif (value == 0) {\nlong newValue = value * 10 - (c - '0');\nfitsInLong &= value > MIN_INCOMPLETE_INTEGER\nvalue = newValue;\n} else if (last == NUMBER_CHAR_DECIMAL) {\nlast = NUMBER_CHAR_FRACTION_DIGIT;\n} else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\nlast = NUMBER_CHAR_EXP_DIGIT;\n}",
            "method_id": 14
        }
    ]
}