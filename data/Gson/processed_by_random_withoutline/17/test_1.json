{
    "bug_id": 17,
    "test_id": 1,
    "test_name": "com.google.gson.DefaultDateTypeAdapterTest.testUnexpectedToken",
    "test_body": "public void testUnexpectedToken() throws Exception {\ntry {\nDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\nadapter.fromJson(\"{}\");\nfail(\"Unexpected token should fail.\");",
    "stack_trace": "com.google.gson.JsonParseException: The date should be a string value\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:100)\nat com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:40)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:260)\nat com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:273)\nat com.google.gson.DefaultDateTypeAdapterTest.testUnexpectedToken(DefaultDateTypeAdapterTest.java:173)",
    "covered_methods": [
        {
            "method_signature": "com.google.gson.stream.JsonReader:<init>(Ljava/io/Reader;)V",
            "method_body": "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\nprivate boolean lenient = false;\nprivate final char[] buffer = new char[1024];\nprivate int pos = 0;\nprivate int limit = 0;\nprivate int lineNumber = 0;\nprivate int lineStart = 0;\nint peeked = PEEKED_NONE;\nprivate int[] stack = new int[32];\nprivate int stackSize = 0;\nstack[stackSize++] = JsonScope.EMPTY_DOCUMENT;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:peek()Lcom/google/gson/stream/JsonToken;",
            "method_body": "public JsonToken peek() throws IOException {\nint p = peeked;\nif (p == PEEKED_NONE) {\np = doPeek();\nswitch (p) {\nreturn JsonToken.BEGIN_OBJECT;\nreturn JsonToken.NULL;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:fillBuffer(I)Z",
            "method_body": "private boolean fillBuffer(int minimum) throws IOException {\nchar[] buffer = this.buffer;\nlineStart -= pos;\nif (limit != pos) {\nlimit -= pos;\nSystem.arraycopy(buffer, pos, buffer, 0, limit);\nlimit = 0;\npos = 0;\nwhile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {\nlimit += total;\nif (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff') {\nif (limit >= minimum) {\nreturn true;\nreturn false;\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.google.gson.stream.JsonReader:nextNonWhitespace(Z)I",
            "method_body": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\nchar[] buffer = this.buffer;\nint p = pos;\nint l = limit;\nif (p == l) {\npos = p;\nif (!fillBuffer(1)) {\np = pos;\nl = limit;\nint c = buffer[p++];\nif (c == '\\n') {\n} else if (c == ' ' || c == '\\r' || c == '\\t') {\nif (c == '/') {\n} else if (c == '#') {\npos = p;\nreturn c;\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.google.gson.TypeAdapter:fromJson(Ljava/io/Reader;)Ljava/lang/Object;",
            "method_body": "public final T fromJson(Reader in) throws IOException {\nJsonReader reader = new JsonReader(in);\nreturn read(reader);\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.google.gson.TypeAdapter:fromJson(Ljava/lang/String;)Ljava/lang/Object;",
            "method_body": "public final T fromJson(String json) throws IOException {\nreturn fromJson(new StringReader(json));\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.google.gson.JsonParseException:<init>(Ljava/lang/String;)V",
            "method_body": "public JsonParseException(String msg) {\nsuper(msg);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:<init>(Ljava/lang/Class;)V",
            "method_body": "DefaultDateTypeAdapter(Class<? extends Date> dateType) {\nthis(dateType,\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:<init>(Ljava/lang/Class;Ljava/text/DateFormat;Ljava/text/DateFormat;)V",
            "method_body": "DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {\nif ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {\nthis.dateType = dateType;\nthis.enUsFormat = enUsFormat;\nthis.localFormat = localFormat;\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.google.gson.DefaultDateTypeAdapter:read(Lcom/google/gson/stream/JsonReader;)Ljava/util/Date;",
            "method_body": "public Date read(JsonReader in) throws IOException {\nif (in.peek() != JsonToken.STRING) {\nthrow new JsonParseException(\"The date should be a string value\");\n}",
            "method_id": 9
        }
    ]
}