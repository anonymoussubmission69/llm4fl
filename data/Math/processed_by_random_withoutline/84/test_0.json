{
    "bug_id": 84,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283",
    "test_body": "public void testMath283()\nthrows FunctionEvaluationException, OptimizationException {\n// fails because MultiDirectional.iterateSimplex is looping forever\n// the while(true) should be replaced with a convergence check\nMultiDirectional multiDirectional = new MultiDirectional();\nmultiDirectional.setMaxIterations(100);\nmultiDirectional.setMaxEvaluations(1000);\n201: final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);\n203: RealPointValuePair estimate = multiDirectional.optimize(function,\nGoalType.MAXIMIZE, function.getMaximumPosition());",
    "stack_trace": "org.apache.commons.math.optimization.OptimizationException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.incrementIterationsCounter(DirectSearchOptimizer.java:320)\nat org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(MultiDirectional.java:66)\nat org.apache.commons.math.optimization.direct.DirectSearchOptimizer.optimize(DirectSearchOptimizer.java:307)\nat org.apache.commons.math.optimization.direct.MultiDirectionalTest.testMath283(MultiDirectionalTest.java:203)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
            "method_body": "public double getValue() {\nreturn value;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:<init>()V",
            "method_body": "public MultiDirectional() {\nthis.khi   = 2.0;\nthis.gamma = 0.5;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.MathException:translate(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "private static String translate(String s, Locale locale) {\nResourceBundle bundle =\nif (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n} catch (MissingResourceException mre) {\nreturn s;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public MathException(Throwable rootCause) {\nsuper(rootCause);\nthis.pattern   = getMessage();\nthis.arguments = new Object[0];\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.SimpleScalarValueChecker:<init>()V",
            "method_body": "public SimpleScalarValueChecker() {\nthis.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\nthis.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\nfinal double[] xSmallest = original[0].getPointRef();\nfinal int n = xSmallest.length;\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = original[0];\nfor (int i = 1; i <= n; ++i) {\nfinal double[] xOriginal    = original[i].getPointRef();\nfinal double[] xTransformed = new double[n];\nfor (int j = 0; j < n; ++j) {\nxTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);\nsimplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);\nevaluateSimplex(comparator);\nreturn simplex[0];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ConvergenceException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluate([D)D",
            "method_body": "protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nif (++evaluations > maxEvaluations) {\nreturn f.value(x);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setConvergenceChecker(Lorg/apache/commons/math/optimization/RealConvergenceChecker;)V",
            "method_body": "public void setConvergenceChecker(RealConvergenceChecker checker) {\nthis.checker = checker;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.MathException:buildMessage(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String buildMessage(Locale locale, String pattern, Object ... arguments) {\nreturn (pattern == null) ? \"\" : new MessageFormat(translate(pattern, locale), locale).format(arguments);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getLocalizedMessage()Ljava/lang/String;",
            "method_body": "public String getLocalizedMessage() {\nreturn getMessage(Locale.getDefault());\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:incrementIterationsCounter()V",
            "method_body": "protected void incrementIterationsCounter()\nif (++iterations > maxIterations) {\nthrow new OptimizationException(new MaxIterationsExceededException(maxIterations));\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluateSimplex(Ljava/util/Comparator;)V",
            "method_body": "protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)\nfor (int i = 0; i < simplex.length; ++i) {\nfinal RealPointValuePair vertex = simplex[i];\nfinal double[] point = vertex.getPointRef();\nif (Double.isNaN(vertex.getValue())) {\nsimplex[i] = new RealPointValuePair(point, evaluate(point), false);\nArrays.sort(simplex, comparator);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DDZ)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value,\nfinal boolean copyArray) {\nthis.point = copyArray ? point.clone() : point;\nthis.value  = value;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.MathException:getMessage(Ljava/util/Locale;)Ljava/lang/String;",
            "method_body": "public String getMessage(Locale locale) {\nreturn buildMessage(locale, pattern, arguments);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:<init>()V",
            "method_body": "protected DirectSearchOptimizer() {\nsetConvergenceChecker(new SimpleScalarValueChecker());\nsetMaxIterations(Integer.MAX_VALUE);\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer$1:compare(Lorg/apache/commons/math/optimization/RealPointValuePair;Lorg/apache/commons/math/optimization/RealPointValuePair;)I",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double[] unit = new double[startPoint.length];\nArrays.fill(unit, 1.0);\nsetStartConfiguration(unit);\nthis.f = f;\nfinal Comparator<RealPointValuePair> comparator =\nnew Comparator<RealPointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goalType == GoalType.MINIMIZE) ?\niterations  = 0;\nevaluations = 0;\nbuildSimplex(startPoint);\nevaluateSimplex(comparator);\nRealPointValuePair[] previous = new RealPointValuePair[simplex.length];\nif (iterations > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.length; ++i) {\nconverged &= checker.converged(iterations, previous[i], simplex[i]);\nif (converged) {\nreturn simplex[0];\nSystem.arraycopy(simplex, 0, previous, 0, simplex.length);\niterateSimplex(comparator);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:getPointRef()[D",
            "method_body": "public double[] getPointRef() {\nreturn point;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.RealPointValuePair:<init>([DD)V",
            "method_body": "public RealPointValuePair(final double[] point, final double value) {\nthis.point = point.clone();\nthis.value  = value;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(String pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.optimization.OptimizationException:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public OptimizationException(Throwable cause) {\nsuper(cause);\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.MaxIterationsExceededException:<init>(I)V",
            "method_body": "public MaxIterationsExceededException(final int maxIterations) {\nsuper(\"Maximal number of iterations ({0}) exceeded\", maxIterations);\nthis.maxIterations = maxIterations;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Ljava/lang/String;[Ljava/lang/Object;)V",
            "method_body": "public MathException(String pattern, Object ... arguments) {\nsuper(buildMessage(Locale.US, pattern, arguments));\nthis.pattern   = pattern;\nthis.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setStartConfiguration([D)V",
            "method_body": "public void setStartConfiguration(final double[] steps)\nfinal int n = steps.length;\nstartConfiguration = new double[n][n];\nfor (int i = 0; i < n; ++i) {\nfinal double[] vertexI = startConfiguration[i];\nfor (int j = 0; j < i + 1; ++j) {\nif (steps[j] == 0.0) {\nSystem.arraycopy(steps, 0, vertexI, 0, j + 1);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:buildSimplex([D)V",
            "method_body": "private void buildSimplex(final double[] startPoint)\nfinal int n = startPoint.length;\nif (n != startConfiguration.length) {\nsimplex = new RealPointValuePair[n + 1];\nsimplex[0] = new RealPointValuePair(startPoint, Double.NaN);\nfor (int i = 0; i < n; ++i) {\nfinal double[] confI   = startConfiguration[i];\nfinal double[] vertexI = new double[n];\nfor (int k = 0; k < n; ++k) {\nvertexI[k] = startPoint[k] + confI[k];\nsimplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxIterations(I)V",
            "method_body": "public void setMaxIterations(int maxIterations) {\nthis.maxIterations = maxIterations;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
            "method_body": "public RealPointValuePair optimize(final MultivariateRealFunction f,\nif (startConfiguration == null) {\nfinal double[] unit = new double[startPoint.length];\nArrays.fill(unit, 1.0);\nsetStartConfiguration(unit);\nthis.f = f;\nfinal Comparator<RealPointValuePair> comparator =\nnew Comparator<RealPointValuePair>() {\nfinal double v1 = o1.getValue();\nfinal double v2 = o2.getValue();\nreturn (goalType == GoalType.MINIMIZE) ?\niterations  = 0;\nevaluations = 0;\nbuildSimplex(startPoint);\nevaluateSimplex(comparator);\nRealPointValuePair[] previous = new RealPointValuePair[simplex.length];\nif (iterations > 0) {\nboolean converged = true;\nfor (int i = 0; i < simplex.length; ++i) {\nconverged &= checker.converged(iterations, previous[i], simplex[i]);\nif (converged) {\nreturn simplex[0];\nSystem.arraycopy(simplex, 0, previous, 0, simplex.length);\niterateSimplex(comparator);\n}",
            "method_id": 27
        }
    ]
}