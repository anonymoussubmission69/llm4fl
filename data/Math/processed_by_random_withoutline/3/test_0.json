{
    "bug_id": 3,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.util.MathArraysTest.testLinearCombinationWithSingleElementArray",
    "test_body": "public void testLinearCombinationWithSingleElementArray() {\nfinal double[] a = { 1.23456789 };\nfinal double[] b = { 98765432.1 };\n591: Assert.assertEquals(a[0] * b[0], MathArrays.linearCombination(a, b), 0d);\n}\n",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 1\nat org.apache.commons.math3.util.MathArrays.linearCombination(MathArrays.java:846)\nat org.apache.commons.math3.util.MathArraysTest.testLinearCombinationWithSingleElementArray(MathArraysTest.java:591)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.MathArrays:linearCombination([D[D)D",
            "method_body": "public static double linearCombination(final double[] a, final double[] b)\nfinal int len = a.length;\nif (len != b.length) {\nfinal double[] prodHigh = new double[len];\ndouble prodLowSum = 0;\nfor (int i = 0; i < len; i++) {\nfinal double ai = a[i];\nfinal double ca = SPLIT_FACTOR * ai;\nfinal double aHigh = ca - (ca - ai);\nfinal double aLow = ai - aHigh;\nfinal double bi = b[i];\nfinal double cb = SPLIT_FACTOR * bi;\nfinal double bHigh = cb - (cb - bi);\nfinal double bLow = bi - bHigh;\nprodHigh[i] = ai * bi;\nfinal double prodLow = aLow * bLow - (((prodHigh[i] -\nprodLowSum += prodLow;\nfinal double prodHighCur = prodHigh[0];\ndouble prodHighNext = prodHigh[1];\ndouble sHighPrev = prodHighCur + prodHighNext;\ndouble sPrime = sHighPrev - prodHighNext;\ndouble sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);\nfinal int lenMinusOne = len - 1;\nfor (int i = 1; i < lenMinusOne; i++) {\n}",
            "method_id": 0
        }
    ]
}