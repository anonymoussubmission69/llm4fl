{
    "bug_id": 26,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fraction.FractionTest.testIntegerOverflow",
    "test_body": "public void testIntegerOverflow() {\ncheckIntegerOverflow(0.75000000001455192);\ncheckIntegerOverflow(1.0e10);\ncheckIntegerOverflow(-1.0e10);\ncheckIntegerOverflow(-43979.60679604749);",
    "stack_trace": "junit.framework.AssertionFailedError: an exception should have been thrown\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.math3.fraction.FractionTest.checkIntegerOverflow(FractionTest.java:145)\nat org.apache.commons.math3.fraction.FractionTest.testIntegerOverflow(FractionTest.java:138)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:floor(D)D",
            "method_body": "public static double floor(double x) {\nif (x != x) { // NaN\nif (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\ny = (long) x;\nif (x < 0 && y != x) {\nif (y == 0) {\nreturn x*y;\nreturn y;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
            "method_body": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n{\nlong overflow = Integer.MAX_VALUE;\ndouble r0 = value;\nlong a0 = (long)FastMath.floor(r0);\nif (a0 > overflow) {\nthrow new FractionConversionException(value, a0, 1l);\nif (FastMath.abs(a0 - value) < epsilon) {\nthis.numerator = (int) a0;\nthis.denominator = 1;\nreturn;\nlong p0 = 1;\nlong q0 = 0;\nlong p1 = a0;\nlong q1 = 1;\nlong p2 = 0;\nlong q2 = 1;\nint n = 0;\nboolean stop = false;\n++n;\ndouble r1 = 1.0 / (r0 - a0);\nlong a1 = (long)FastMath.floor(r1);\np2 = (a1 * p1) + p0;\nq2 = (a1 * q1) + q0;\nif ((p2 > overflow) || (q2 > overflow)) {\nthrow new FractionConversionException(value, p2, q2);\ndouble convergent = (double)p2 / (double)q2;\nif (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\na0 = a1;\nr0 = r1;\n} while (!stop);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:getContext()Lorg/apache/commons/math3/exception/util/ExceptionContext;",
            "method_body": "public ExceptionContext getContext() {\nreturn context;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathIllegalStateException(Localizable pattern,\nObject ... args) {\ncontext = new ExceptionContext(this);\ncontext.addMessage(pattern, args);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.Fraction:<init>(DDI)V",
            "method_body": "public Fraction(double value, double epsilon, int maxIterations)\nthis(value, epsilon, Integer.MAX_VALUE, maxIterations);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:addMessage(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public void addMessage(Localizable pattern,\nmsgPatterns.add(pattern);\nmsgArguments.add(ArgUtils.flatten(arguments));\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ArgUtils:flatten([Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\nif (array != null) {\nfor (Object o : array) {\nif (o instanceof Object[]) {\nlist.add(o);\nreturn list.toArray();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.exception.ConvergenceException:<init>(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern,\nObject ... args) {\ngetContext().addMessage(pattern, args);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.exception.util.ExceptionContext:<init>(Ljava/lang/Throwable;)V",
            "method_body": "public ExceptionContext(final Throwable throwable) {\nthis.throwable = throwable;\nmsgPatterns    = new ArrayList<Localizable>();\nmsgArguments   = new ArrayList<Object[]>();\ncontext        = new HashMap<String, Object>();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
            "method_body": "public FractionConversionException(double value, long p, long q) {\nsuper(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.exception.MathIllegalStateException:<init>()V",
            "method_body": "public MathIllegalStateException() {\nthis(LocalizedFormats.ILLEGAL_STATE);\n}",
            "method_id": 11
        }
    ]
}