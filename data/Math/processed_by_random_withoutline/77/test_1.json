{
    "bug_id": 77,
    "test_id": 1,
    "test_name": "org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions",
    "test_body": "public void testBasicFunctions() {\nArrayRealVector v1 = new ArrayRealVector(vec1);\nArrayRealVector v2 = new ArrayRealVector(vec2);\nArrayRealVector v5 = new ArrayRealVector(vec5);\nArrayRealVector v_null = new ArrayRealVector(vec_null);\n1086: RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n1088: // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\ndouble d_getNorm = v5.getNorm();\nassertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n1092: // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\ndouble d_getL1Norm = v5.getL1Norm();\nassertEquals(\"compare values  \", 17.0, d_getL1Norm);\n1096: // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\ndouble d_getLInfNorm = v5.getLInfNorm();\nassertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n1100: 1101: //octave =  sqrt(sumsq(v1-v2))\ndouble dist = v1.getDistance(v2);\nassertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n1105: //octave =  sqrt(sumsq(v1-v2))\ndouble dist_2 = v1.getDistance(v2_t);\nassertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n1109: //octave =  sqrt(sumsq(v1-v2))\ndouble dist_3 = v1.getDistance((RealVector) v2);\nassertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n1113: //octave =  ???\ndouble d_getL1Distance = v1. getL1Distance(v2);\nassertEquals(\"compare values  \",9d, d_getL1Distance );\n1117: double d_getL1Distance_2 = v1. getL1Distance(v2_t);\nassertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n1120: double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\nassertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n1123: //octave =  ???\ndouble d_getLInfDistance = v1. getLInfDistance(v2);\nassertEquals(\"compare values  \",3d, d_getLInfDistance );\n1127: double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\nassertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n1130: double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\nassertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n1133: //octave =  v1 + v2\nArrayRealVector v_add = v1.add(v2);\ndouble[] result_add = {5d, 7d, 9d};\nassertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n1138: RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\nRealVector v_add_i = v1.add(vt2);\ndouble[] result_add_i = {5d, 7d, 9d};\nassertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n1143: //octave =  v1 - v2\nArrayRealVector v_subtract = v1.subtract(v2);\ndouble[] result_subtract = {-3d, -3d, -3d};\nassertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n1148: RealVector v_subtract_i = v1.subtract(vt2);\ndouble[] result_subtract_i = {-3d, -3d, -3d};\nassertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n1152: // octave v1 .* v2\nArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\ndouble[] result_ebeMultiply = {4d, 10d, 18d};\nassertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n1157: RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\ndouble[] result_ebeMultiply_2 = {4d, 10d, 18d};\nassertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n1161: RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\ndouble[] result_ebeMultiply_3 = {4d, 10d, 18d};\nassertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n1165: // octave v1 ./ v2\nArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\ndouble[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\nassertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n1170: RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\ndouble[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\nassertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n1174: RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\ndouble[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\nassertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n1178: // octave  dot(v1,v2)\ndouble dot =  v1.dotProduct(v2);\nassertEquals(\"compare val \",32d, dot);\n1182: // octave  dot(v1,v2_t)\ndouble dot_2 =  v1.dotProduct(v2_t);\nassertEquals(\"compare val \",32d, dot_2);\n1186: RealMatrix m_outerProduct = v1.outerProduct(v2);\nassertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n1189: RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\nassertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n1192: RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\nassertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n1195: RealVector v_unitVector = v1.unitVector();\nRealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\nassertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n1199: try {\nv_null.unitVector();\nfail(\"Expecting ArithmeticException\");\n} catch (ArithmeticException ex) {\n// expected behavior\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n1208: ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\nv_unitize.unitize();\nassertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\ntry {\nv_null.unitize();\nfail(\"Expecting ArithmeticException\");\n} catch (ArithmeticException ex) {\n// expected behavior\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\n1220: ArrayRealVector v_projection = v1.projection(v2);\ndouble[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\nassertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n1224: RealVector v_projection_2 = v1.projection(v2_t);\ndouble[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\nassertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n1228: RealVector v_projection_3 = v1.projection(v2.getData());\ndouble[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\nassertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n1232: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<128.0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.TestCase.assertEquals(TestCase.java:244)\nat org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions(ArrayRealVectorTest.java:1098)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V",
            "method_body": "public ArrayRealVector(double[] d) {\ndata = d.clone();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
            "method_body": "public double getLInfNorm() {\ndouble max = 0;\nfor (double a : data) {\nmax += Math.max(max, Math.abs(a));\nreturn max;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:getNorm()D",
            "method_body": "public double getNorm() {\ndouble sum = 0;\nfor (double a : data) {\nsum += a * a;\nreturn Math.sqrt(sum);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.linear.ArrayRealVector:getL1Norm()D",
            "method_body": "public double getL1Norm() {\ndouble sum = 0;\nfor (double a : data) {\nsum += Math.abs(a);\nreturn sum;\n}",
            "method_id": 3
        }
    ]
}