{
    "bug_id": 34,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.genetics.ListPopulationTest.testIterator",
    "test_body": "public void testIterator() {\nfinal ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();\nchromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\nchromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\nchromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n174: final ListPopulation population = new ListPopulation(10) {\npublic Population nextGeneration() {\n// not important\nreturn null;\n}\n};\n181: population.addChromosomes(chromosomes);\n183: final Iterator<Chromosome> iter = population.iterator();\nwhile (iter.hasNext()) {\niter.next();\niter.remove();\n}\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: Expected exception: java.lang.UnsupportedOperationException\nat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\nat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\nat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\nat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\nat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\nat org.apache.tools.ant.Task.perform(Task.java:348)\nat org.apache.tools.ant.Target.execute(Target.java:392)\nat org.apache.tools.ant.Target.performTasks(Target.java:413)\nat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\nat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\nat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\nat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\nat org.apache.tools.ant.Main.runBuild(Main.java:811)\nat org.apache.tools.ant.Main.startAnt(Main.java:217)\nat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\nat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Chromosome> iterator() {\nreturn chromosomes.iterator();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V",
            "method_body": "public void addChromosomes(final Collection<Chromosome> chromosomeColl) {\nif (chromosomes.size() + chromosomeColl.size() > populationLimit) {\nthis.chromosomes.addAll(chromosomeColl);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:randomBinaryRepresentation(I)Ljava/util/List;",
            "method_body": "public static List<Integer> randomBinaryRepresentation(int length) {\nList<Integer> rList= new ArrayList<Integer> (length);\nfor (int j=0; j<length; j++) {\nrList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));\nreturn rList;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:<init>(Ljava/util/List;)V",
            "method_body": "public BinaryChromosome(List<Integer> representation) {\nsuper(representation);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.BinaryChromosome:checkValidity(Ljava/util/List;)V",
            "method_body": "protected void checkValidity(List<Integer> chromosomeRepresentation)\nfor (int i : chromosomeRepresentation) {\nif (i < 0 || i >1) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.GeneticAlgorithm:getRandomGenerator()Lorg/apache/commons/math3/random/RandomGenerator;",
            "method_body": "public static synchronized RandomGenerator getRandomGenerator() {\nreturn randomGenerator;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V",
            "method_body": "public ListPopulation(final int populationLimit) {\nthis(Collections.<Chromosome> emptyList(), populationLimit);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V",
            "method_body": "public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {\nif (chromosomes == null) {\nif (populationLimit <= 0) {\nif (chromosomes.size() > populationLimit) {\nthis.populationLimit = populationLimit;\nthis.chromosomes = new ArrayList<Chromosome>(populationLimit);\nthis.chromosomes.addAll(chromosomes);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.genetics.AbstractListChromosome:<init>(Ljava/util/List;)V",
            "method_body": "public AbstractListChromosome(final List<T> representation) {\ncheckValidity(representation);\nthis.representation = Collections.unmodifiableList(new ArrayList<T> (representation));\n}",
            "method_id": 8
        }
    ]
}