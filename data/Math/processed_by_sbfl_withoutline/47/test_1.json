{
    "bug_id": 47,
    "test_id": 1,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAtanI",
    "test_body": "public void testAtanI() {\nfor (int i = -10; i < 10; i++) {\nSystem.out.println(new Complex(0, 1 - 0.1 * i).atan());\n}\nAssert.assertTrue(Complex.I.atan().isInfinite());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn \"(\" + real + \", \" + imaginary + \")\";\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex atan() {\nif (isNaN) {\nreturn this.add(I).divide(I.subtract(this)).log()\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex divide(Complex divisor)\nMathUtils.checkNotNull(divisor);\nif (isNaN || divisor.isNaN) {\nif (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {\nreturn NaN;\nif (divisor.isInfinite() && !isInfinite()) {\nfinal double c = divisor.getReal();\nfinal double d = divisor.getImaginary();\nif (FastMath.abs(c) < FastMath.abs(d)) {\ndouble q = c / d;\ndouble denominator = c * q + d;\nreturn createComplex((real * q + imaginary) / denominator,\ndouble q = d / c;\ndouble denominator = d * q + c;\nreturn createComplex((imaginary * q + real) / denominator,\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex log() {\nif (isNaN) {\nreturn NaN;\nreturn createComplex(FastMath.log(abs()),\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex add(Complex addend) throws NullArgumentException {\nMathUtils.checkNotNull(addend);\nif (isNaN || addend.isNaN) {\nreturn createComplex(real + addend.getReal(),\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:subtract(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex subtract(Complex subtrahend)\nMathUtils.checkNotNull(subtrahend);\nif (isNaN || subtrahend.isNaN) {\nreturn createComplex(real - subtrahend.getReal(),\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:abs()D",
            "method_body": "public double abs() {\nif (isNaN) {\nif (isInfinite()) {\nif (FastMath.abs(real) < FastMath.abs(imaginary)) {\nif (real == 0.0) {\ndouble q = imaginary / real;\nreturn FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex factor)\nMathUtils.checkNotNull(factor);\nif (isNaN || factor.isNaN) {\nreturn NaN;\nif (Double.isInfinite(real) ||\nreturn createComplex(real * factor.real - imaginary * factor.imaginary,\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isInfinite()Z",
            "method_body": "public boolean isInfinite() {\nreturn isInfinite;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:atan2(DD)D",
            "method_body": "public static double atan2(double y, double x) {\nif (x !=x || y != y) {\nif (y == 0.0) {\ndouble result = x*y;\ndouble invx = 1.0/x;\ndouble invy = 1.0/y;\nif (invx == 0.0) { // X is infinite\nif (x < 0.0 || invx < 0.0) {\nif (y < 0.0 || invy < 0.0) {\nreturn Math.PI;\nreturn result;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\nlong bits = Double.doubleToLongBits(x);\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x == Double.POSITIVE_INFINITY) {\nint exp = (int)(bits >> 52)-1023;\nif ((bits & 0x7ff0000000000000L) == 0) {\nif (exp == -1 || exp == 0) {\nif (x < 1.01 && x > 0.99 && hiPrec == null) {\ndouble lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\ndouble epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));\ndouble lnza = 0.0;\ndouble lnzb = 0.0;\nif (hiPrec != null) {\nlnza = -0.16624882440418567;\nlnza = lnza * epsilon + 0.19999954120254515;\nlnza = lnza * epsilon + -0.2499999997677497;\nlnza = lnza * epsilon + 0.3333333333332802;\nlnza = lnza * epsilon + -0.5;\nlnza = lnza * epsilon + 1.0;\nlnza = lnza * epsilon;\ndouble a = LN_2_A*exp;\ndouble b = 0.0;\ndouble c = a+lnm[0];\ndouble d = -(c-a-lnm[0]);\na = c;\nb = b + d;\nc = a + lnza;\nd = -(c - a - lnza);\na = c;\nb = b + d;\nc = a + LN_2_B*exp;\nd = -(c - a - LN_2_B*exp);\na = c;\nb = b + d;\nc = a + lnm[1];\nd = -(c - a - lnm[1]);\na = c;\nb = b + d;\nc = a + lnzb;\nd = -(c - a - lnzb);\na = c;\nb = b + d;\nif (hiPrec != null) {\nreturn a + b;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 18
        }
    ]
}