{
    "bug_id": 60,
    "test_id": 0,
    "test_name": "org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues",
    "test_body": "public void testExtremeValues() throws Exception {\nNormalDistribution distribution = new NormalDistributionImpl(0, 1);\nfor (int i = 0; i < 100; i++) { // make sure no convergence exception\ndouble lowerTail = distribution.cumulativeProbability(-i);\ndouble upperTail = distribution.cumulativeProbability(i);\nif (i < 9) { // make sure not top-coded \n// For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n// TODO: once MATH-364 is resolved, replace 9 with 30\nassertTrue(lowerTail > 0.0d);\nassertTrue(upperTail < 1.0d);\n}\nelse { // make sure top coding not reversed\nassertTrue(lowerTail < 0.00001);\nassertTrue(upperTail > 0.99999);\n}\n}\n174: assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\nassertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);",
    "stack_trace": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e\nat org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)\nat org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)\nat org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)\nat org.apache.commons.math.special.Erf.erf(Erf.java:51)\nat org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)\nat org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
            "method_body": "public double cumulativeProbability(double x) throws MathException {\nfinal double dev = x - mean;\nreturn 0.5 * (1.0 + Erf.erf((dev) /\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.ConvergenceException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public ConvergenceException(Localizable pattern, Object ... arguments) {\nsuper(pattern, arguments);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.special.Erf:erf(D)D",
            "method_body": "public static double erf(double x) throws MathException {\ndouble ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);\nif (x < 0) {\nret = -ret;\nreturn ret;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd){\nthis(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DDD)V",
            "method_body": "public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {\nif (sd <= 0) {\nthis.mean = mean;\nstandardDeviation = sd;\nsolverAbsoluteAccuracy = inverseCumAccuracy;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getA(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a + 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:getB(ID)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a + 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaQ(DDDI)D",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a + 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.MathException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "public MathException(Localizable pattern, Object ... arguments) {\nthis.pattern   = pattern;\nthis.arguments = (arguments == null) ? new Object[0] : arguments.clone();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
            "method_body": "public static double regularizedGammaP(double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\nret = 0.0;\n} else if (x >= a + 1) {\nret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\ndouble n = 0.0; // current element index\ndouble an = 1.0 / a; // n-th element in the series\ndouble sum = an; // partial sum\nwhile (FastMath.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\nn = n + 1.0;\nan = an * (x / (a + n));\nsum = sum + an;\nif (n >= maxIterations) {\n} else if (Double.isInfinite(sum)) {\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;\nreturn ret;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:<init>()V",
            "method_body": "protected ContinuedFraction() {\nsuper();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
            "method_body": "public double evaluate(double x, double epsilon, int maxIterations)\ndouble p0 = 1.0;\ndouble p1 = getA(0, x);\ndouble q0 = 0.0;\ndouble q1 = 1.0;\ndouble c = p1 / q1;\nint n = 0;\ndouble relativeError = Double.MAX_VALUE;\nwhile (n < maxIterations && relativeError > epsilon) {\n++n;\ndouble a = getA(n, x);\ndouble b = getB(n, x);\ndouble p2 = a * p1 + b * p0;\ndouble q2 = a * q1 + b * q0;\nboolean infinite = false;\nif (Double.isInfinite(p2) || Double.isInfinite(q2)) {\ndouble scaleFactor = 1d;\ndouble lastScaleFactor = 1d;\nfinal int maxPower = 5;\nfinal double scale = FastMath.max(a,b);\nif (scale <= 0) {  // Can't scale\ninfinite = true;\nfor (int i = 0; i < maxPower; i++) {\nlastScaleFactor = scaleFactor;\nscaleFactor *= scale;\nif (a != 0.0 && a > b) {\np2 = p1 / lastScaleFactor + (b / scaleFactor * p0);\nq2 = q1 / lastScaleFactor + (b / scaleFactor * q0);\ninfinite = Double.isInfinite(p2) || Double.isInfinite(q2);\nif (!infinite) {\nbreak;\nif (infinite) {\ndouble r = p2 / q2;\nif (Double.isNaN(r)) {\nthrow new ConvergenceException(\nrelativeError = FastMath.abs(r / c - 1.0);\nc = p2 / q2;\np0 = p1;\np1 = p2;\nq0 = q1;\nq1 = q2;\n}\nif (n >= maxIterations) {\nreturn c;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma:logGamma(D)D",
            "method_body": "public static double logGamma(double x) {\nif (Double.isNaN(x) || (x <= 0.0)) {\ndouble g = 607.0 / 128.0;\ndouble sum = 0.0;\nfor (int i = LANCZOS.length - 1; i > 0; --i) {\nsum = sum + (LANCZOS[i] / (x + i));\nsum = sum + LANCZOS[0];\ndouble tmp = x + g + .5;\nret = ((x + .5) * FastMath.log(tmp)) - tmp +\nreturn ret;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.distribution.AbstractDistribution:<init>()V",
            "method_body": "protected AbstractDistribution() {\nsuper();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(D)D",
            "method_body": "public static double exp(double x) {\nreturn exp(x, 0.0, null);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:exp(DD[D)D",
            "method_body": "private static double exp(double x, double extra, double[] hiPrec) {\nif (x < 0.0) {\nintVal = (int) -x;\nif (intVal > 746) {\nif (hiPrec != null) {\nreturn 0.0;\nif (intVal > 709) {\nfinal double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\nif (hiPrec != null) {\nreturn result;\nif (intVal == 709) {\nintVal++;\nintPartA = EXP_INT_TABLE_A[750-intVal];\nintPartB = EXP_INT_TABLE_B[750-intVal];\nintVal = -intVal;\nfinal int intFrac = (int) ((x - intVal) * 1024.0);\nfinal double fracPartA = EXP_FRAC_TABLE_A[intFrac];\nfinal double fracPartB = EXP_FRAC_TABLE_B[intFrac];\nfinal double epsilon = x - (intVal + intFrac / 1024.0);\ndouble z = 0.04168701738764507;\nz = z * epsilon + 0.1666666505023083;\nz = z * epsilon + 0.5000000000042687;\nz = z * epsilon + 1.0;\nz = z * epsilon + -3.940510424527919E-20;\ndouble tempA = intPartA * fracPartA;\ndouble tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\nfinal double tempC = tempB + tempA;\nif (extra != 0.0) {\nresult = tempC*z + tempB + tempA;\nif (hiPrec != null) {\nreturn result;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:max(DD)D",
            "method_body": "public static double max(final double a, final double b) {\nreturn (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nlong bits = Double.doubleToLongBits(x);\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x == Double.POSITIVE_INFINITY) {\nint exp = (int)(bits >> 52)-1023;\nif ((bits & 0x7ff0000000000000L) == 0) {\nif (exp == -1 || exp == 0) {\nif (x < 1.01 && x > 0.99 && hiPrec == null) {\ndouble lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];\ndouble epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));\ndouble lnza = 0.0;\ndouble lnzb = 0.0;\nif (hiPrec != null) {\nlnza = -0.16624882440418567;\nlnza = lnza * epsilon + 0.19999954120254515;\nlnza = lnza * epsilon + -0.2499999997677497;\nlnza = lnza * epsilon + 0.3333333333332802;\nlnza = lnza * epsilon + -0.5;\nlnza = lnza * epsilon + 1.0;\nlnza = lnza * epsilon;\ndouble a = LN_2_A*exp;\ndouble b = 0.0;\ndouble c = a+lnm[0];\ndouble d = -(c-a-lnm[0]);\na = c;\nb = b + d;\nc = a + lnza;\nd = -(c - a - lnza);\na = c;\nb = b + d;\nc = a + LN_2_B*exp;\nd = -(c - a - LN_2_B*exp);\na = c;\nb = b + d;\nc = a + lnm[1];\nd = -(c - a - lnm[1]);\na = c;\nb = b + d;\nc = a + lnzb;\nd = -(c - a - lnzb);\na = c;\nb = b + d;\nif (hiPrec != null) {\nreturn a + b;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:sqrt(D)D",
            "method_body": "public static double sqrt(final double a) {\nreturn Math.sqrt(a);\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : x;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.special.Gamma$1:<init>(D)V",
            "method_body": "public static double regularizedGammaQ(final double a,\nif (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n} else if (x == 0.0) {\n} else if (x < a + 1.0) {\nContinuedFraction cf = new ContinuedFraction() {\nreturn ((2.0 * n) + 1.0) - a + x;\nreturn n * (a - n);\nret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\nret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;\nreturn ret;\n}",
            "method_id": 21
        }
    ]
}