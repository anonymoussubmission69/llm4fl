{
    "bug_id": 46,
    "test_id": 1,
    "test_name": "org.apache.commons.math.complex.ComplexTest.testAtanI",
    "test_body": "public void testAtanI() {\nAssert.assertTrue(Complex.I.atan().isNaN());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError\nat org.junit.Assert.fail(Assert.java:86)\nat org.junit.Assert.assertTrue(Assert.java:41)\nat org.junit.Assert.assertTrue(Assert.java:52)\nat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex atan() {\nif (isNaN) {\nreturn this.add(I).divide(I.subtract(this)).log()\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex divide(Complex divisor)\nMathUtils.checkNotNull(divisor);\nif (isNaN || divisor.isNaN) {\nif (divisor.isZero) {\nreturn isZero ? NaN : INF;\nif (divisor.isInfinite() && !isInfinite()) {\nfinal double c = divisor.getReal();\nfinal double d = divisor.getImaginary();\nif (FastMath.abs(c) < FastMath.abs(d)) {\ndouble q = d / c;\ndouble denominator = d * q + c;\nreturn createComplex((imaginary * q + real) / denominator,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isNaN()Z",
            "method_body": "public boolean isNaN() {\nreturn isNaN;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex log() {\nif (isNaN) {\nreturn createComplex(FastMath.log(abs()),\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex add(Complex addend) throws NullArgumentException {\nMathUtils.checkNotNull(addend);\nif (isNaN || addend.isNaN) {\nreturn createComplex(real + addend.getReal(),\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:subtract(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex subtract(Complex subtrahend)\nMathUtils.checkNotNull(subtrahend);\nif (isNaN || subtrahend.isNaN) {\nreturn createComplex(real - subtrahend.getReal(),\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:abs()D",
            "method_body": "public double abs() {\nif (isNaN) {\nif (isInfinite()) {\nreturn Double.POSITIVE_INFINITY;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "public Complex multiply(Complex factor)\nMathUtils.checkNotNull(factor);\nif (isNaN || factor.isNaN) {\nif (Double.isInfinite(real) ||\nreturn INF;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:isInfinite()Z",
            "method_body": "public boolean isInfinite() {\nreturn isInfinite;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:<init>(DD)V",
            "method_body": "public Complex(double real, double imaginary) {\nthis.real = real;\nthis.imaginary = imaginary;\nisNaN = Double.isNaN(real) || Double.isNaN(imaginary);\nisInfinite = !isNaN &&\nisZero = real == 0 && imaginary == 0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:atan2(DD)D",
            "method_body": "public static double atan2(double y, double x) {\nif (x !=x || y != y) {\nif (y == 0.0) {\nif (y == Double.POSITIVE_INFINITY) {\nif (x == Double.POSITIVE_INFINITY) {\nreturn Math.PI/4.0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
            "method_body": "protected Complex createComplex(double realPart,\nreturn new Complex(realPart, imaginaryPart);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getReal()D",
            "method_body": "public double getReal() {\nreturn real;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.complex.Complex:getImaginary()D",
            "method_body": "public double getImaginary() {\nreturn imaginary;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D)D",
            "method_body": "public static double log(final double x) {\nreturn log(x, null);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:log(D[D)D",
            "method_body": "private static double log(final double x, final double[] hiPrec) {\nif (x==0) { // Handle special case of +0/-0\nlong bits = Double.doubleToLongBits(x);\nif ((bits & 0x8000000000000000L) != 0 || x != x) {\nif (x == Double.POSITIVE_INFINITY) {\nif (hiPrec != null) {\nreturn Double.POSITIVE_INFINITY;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:abs(D)D",
            "method_body": "public static double abs(double x) {\nreturn (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n}",
            "method_id": 17
        }
    ]
}