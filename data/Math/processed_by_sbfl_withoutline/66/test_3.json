{
    "bug_id": 66,
    "test_id": 3,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testSinMin",
    "test_body": "public void testSinMin() throws MathException {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setMaxEvaluations(200);\nassertEquals(200, minimizer.getMaxEvaluations());\ntry {\nminimizer.getResult();\nfail(\"an exception should have been thrown\");\n} catch (NoDataException ise) {\n// expected\n} catch (Exception e) {\nfail(\"wrong exception caught\");\n}\nassertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());\nassertTrue(minimizer.getIterationCount() <= 50);",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<4.71238898038469> but was:<4.71238897901431>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testSinMin(BrentOptimizerTest.java:54)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\nthis.functionValue  = fx;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\nsetMaxEvaluations(Integer.MAX_VALUE);\nsetMaximalIterationCount(100);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\nreturn localMin(getGoalType() == GoalType.MINIMIZE,\nf, goalType, min, startValue, max,\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
            "method_body": "public double getResult() {\nif (!resultComputed) {\nthrow new NoDataException();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getMaxEvaluations()I",
            "method_body": "public int getMaxEvaluations() {\nreturn maxEvaluations;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.exception.NoDataException:<init>()V",
            "method_body": "public NoDataException() {\nthis(null);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.exception.NoDataException:<init>(Lorg/apache/commons/math/util/Localizable;)V",
            "method_body": "public NoDataException(Localizable specific) {\nsuper(specific, LocalizedFormats.NO_DATA, null);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.exception.MathIllegalArgumentException:<init>(Lorg/apache/commons/math/util/Localizable;Lorg/apache/commons/math/util/Localizable;[Ljava/lang/Object;)V",
            "method_body": "protected MathIllegalArgumentException(Localizable specific,\nObject ... args) {\nthis.specific = specific;\nthis.general = general;\narguments = flatten(args).toArray();\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.exception.MathIllegalArgumentException:flatten([Ljava/lang/Object;)Ljava/util/List;",
            "method_body": "private List<Object> flatten(Object[] array) {\nfinal List<Object> list = new ArrayList<Object>();\nif (array != null) {\nreturn list;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:<init>(ID)V",
            "method_body": "protected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nresultComputed = false;\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
            "method_body": "private double localMin(boolean isMinim,\nif (t <= 0) {\ndouble a, b;\n} else {\na = hi;\nb = lo;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(f, x);\nif (goalType == GoalType.MAXIMIZE) {\nfx = -fx;\n}\n\nint count = 0;\ndouble m = 0.5 * (a + b);\nfinal double tol1 = eps * Math.abs(x) + t;\nfinal double tol2 = 2 * tol1;\n\n// Check stopping criterion.\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\n\nif (Math.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\n\nif (q > 0) {\np = -p;\nq = -q;\n}\nr = e;\nif (p > q * (a - x)\n&& p < q * (b - x)\n// Parabolic interpolation step.\n// f must not be evaluated too close to a or b.\nif (u - a < tol2\nd = tol1;\nd = -tol1;\n}\n} else {\ne = a - x;\n}\n}\n// Golden section step.\ne = a - x;\n}\n}\n// Update by at least \"tol1\".\n} else {\nu = x - tol1;\n}\nu = x + d;\ndouble fu = computeObjectiveValue(f, u);\n}\n\n} else {\na = x;\n}\nfv = fw;\nfw = fx;\nx = u;\nfx = fu;\n} else {\nif (u < x) {\na = u;\nb = u;\n}\n|| w == x) {\nfv = fw;\nfw = fu;\n} else if (fu <= fv\n|| v == x\n|| v == w) {\nv = u;\n}\n} else { // termination\n}\n++count;\n}\n}",
            "method_id": 16
        }
    ]
}