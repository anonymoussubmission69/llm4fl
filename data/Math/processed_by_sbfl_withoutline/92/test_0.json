{
    "bug_id": 92,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge",
    "test_body": "public void testBinomialCoefficientLarge() throws Exception {\n// This tests all legal and illegal values for n <= 200.\nfor (int n = 0; n <= 200; n++) {\nfor (int k = 0; k <= n; k++) {\nlong ourResult = -1;\nlong exactResult = -1;\nboolean shouldThrow = false;\nboolean didThrow = false;\ntry {\nourResult = MathUtils.binomialCoefficient(n, k);\n} catch (ArithmeticException ex) {\ndidThrow = true;\n}\ntry {\nexactResult = binomialCoefficient(n, k);\n} catch (ArithmeticException ex) {\nshouldThrow = true;\n}\nassertEquals(n+\",\"+k, shouldThrow, didThrow);\nassertEquals(n+\",\"+k, exactResult, ourResult);\nassertTrue(n+\",\"+k, (n > 66 || !didThrow));",
    "stack_trace": "junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:159)\nat junit.framework.TestCase.assertEquals(TestCase.java:316)\nat org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJ)J",
            "method_body": "public static long addAndCheck(long a, long b) {\nreturn addAndCheck(a, b, \"overflow: add\");\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:addAndCheck(JJLjava/lang/String;)J",
            "method_body": "private static long addAndCheck(long a, long b, String msg) {\nif (a > b) {\nret = addAndCheck(b, a, msg);\nif (a < 0) {\nif (a <= Long.MAX_VALUE - b) {\nret = a + b;\nreturn ret;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
            "method_body": "public static long binomialCoefficient(final int n, final int k) {\nif (n < k) {\nif (n < 0) {\nif ((n == k) || (k == 0)) {\nreturn 1;\nif ((k == 1) || (k == n - 1)) {\nreturn n;\nlong result = Math.round(binomialCoefficientDouble(n, k));\nif (result == Long.MAX_VALUE) {\nreturn result;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
            "method_body": "public static double binomialCoefficientDouble(final int n, final int k) {\nreturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D",
            "method_body": "public static double binomialCoefficientLog(final int n, final int k) {\nif (n < k) {\nif (n < 0) {\nif ((n == k) || (k == 0)) {\nif ((k == 1) || (k == n - 1)) {\ndouble logSum = 0;\nfor (int i = k + 1; i <= n; i++) {\nlogSum += Math.log((double)i);\nfor (int i = 2; i <= n - k; i++) {\nlogSum -= Math.log((double)i);\nreturn logSum;\n}",
            "method_id": 4
        }
    ]
}