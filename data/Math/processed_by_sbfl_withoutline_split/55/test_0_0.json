{
    "bug_id": 55,
    "test_id": 0,
    "test_name": "org.apache.commons.math.geometry.Vector3DTest.testCrossProductCancellation",
    "test_body": "public void testCrossProductCancellation() {\nVector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\nVector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\ncheckVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);\n161: double scale    = FastMath.scalb(1.0, 100);\nVector3D big1   = new Vector3D(scale, v1);\nVector3D small2 = new Vector3D(1 / scale, v2);\ncheckVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);\n166: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.geometry.Vector3DTest.checkVector(Vector3DTest.java:242)\nat org.apache.commons.math.geometry.Vector3DTest.testCrossProductCancellation(Vector3DTest.java:159)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.geometry.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector3D;Lorg/apache/commons/math/geometry/Vector3D;)Lorg/apache/commons/math/geometry/Vector3D;",
            "method_body": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\nreturn new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.geometry.Vector3D:getX()D",
            "method_body": "public double getX() {\nreturn x;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.geometry.Vector3D:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.geometry.Vector3D:getZ()D",
            "method_body": "public double getZ() {\nreturn z;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.geometry.Vector3D:<init>(DDD)V",
            "method_body": "public Vector3D(double x, double y, double z) {\nthis.x = x;\nthis.y = y;\nthis.z = z;\n}",
            "method_id": 4
        }
    ]
}