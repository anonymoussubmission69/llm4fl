{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample",
    "test_body": "public void testLargeSample() {\nRandom randomizer = new Random(0x5551480dca5b369bl);\ndouble maxError = 0;\nfor (int degree = 0; degree < 10; ++degree) {\nPolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n230: PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\nfor (int i = 0; i < 40000; ++i) {\ndouble x = -1.0 + i / 20000.0;\nfitter.addObservedPoint(1.0, x,\np.value(x) + 0.1 * randomizer.nextGaussian());\n}\n237: final double[] init = new double[degree + 1];\nPolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n240: for (double x = -1.0; x < 1.0; x += 0.01) {\ndouble error = FastMath.abs(p.value(x) - fitted.value(x)) /\n(1.0 + FastMath.abs(p.value(x)));\nmaxError = FastMath.max(maxError, error);\nAssert.assertTrue(FastMath.abs(error) < 0.01);\n}\n}\nAssert.assertTrue(maxError > 0.001);\n}\n",
    "stack_trace": "java.lang.OutOfMemoryError: Java heap space\nat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)\nat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)\nat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)\nat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)\nat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)\nat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)\nat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D",
            "method_body": "public double[] fit(double[] guess) {\nreturn fit(new PolynomialFunction.Parametric(), guess);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D",
            "method_body": "protected static double evaluate(double[] coefficients, double argument)\nMathUtils.checkNotNull(coefficients);\nint n = coefficients.length;\nif (n == 0) {\ndouble result = coefficients[n - 1];\nfor (int j = n - 2; j >= 0; j--) {\nreturn result;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D",
            "method_body": "public double value(double x) {\nreturn evaluate(coefficients, x);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:<init>([D)V",
            "method_body": "public PolynomialFunction(double c[])\nsuper();\nMathUtils.checkNotNull(c);\nint n = c.length;\nif (n == 0) {\nwhile ((n > 1) && (c[n - 1] == 0)) {\nthis.coefficients = new double[n];\nSystem.arraycopy(c, 0, this.coefficients, 0, n);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>(DDDDD)V",
            "method_body": "public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\nsuper(null); // No custom convergence criterion.\nthis.initialStepBoundFactor = initialStepBoundFactor;\nthis.costRelativeTolerance = costRelativeTolerance;\nthis.parRelativeTolerance = parRelativeTolerance;\nthis.orthoTolerance = orthoTolerance;\nthis.qrRankingThreshold = threshold;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V",
            "method_body": "public Weight(double[] weight) {\nfinal int dim = weight.length;\nweightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\nfor (int i = 0; i < dim; i++) {\nweightMatrix.setEntry(i, i, weight[i]);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math3.util.MathUtils:checkNotNull(Ljava/lang/Object;)V",
            "method_body": "public static void checkNotNull(Object o)\nif (o == null) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:<init>()V",
            "method_body": "public LevenbergMarquardtOptimizer() {\nthis(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.PolynomialFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V",
            "method_body": "public PolynomialFitter(MultivariateVectorOptimizer optimizer) {\nsuper(optimizer);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
            "method_body": "public double[] fit(T f, final double[] initialGuess) {\nreturn fit(Integer.MAX_VALUE, f, initialGuess);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter:fit(ILorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
            "method_body": "public double[] fit(int maxEval, T f,\ndouble[] target  = new double[observations.size()];\ndouble[] weights = new double[observations.size()];\nint i = 0;\nfor (WeightedObservedPoint point : observations) {\ntarget[i]  = point.getY();\nweights[i] = point.getWeight();\n++i;\nfinal TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);\nfinal PointVectorValuePair optimum\nreturn optimum.getPointRef();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.WeightedObservedPoint:getWeight()D",
            "method_body": "public double getWeight() {\nreturn weight;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:<init>(Lorg/apache/commons/math3/fitting/CurveFitter;Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;)V",
            "method_body": "public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {\nthis.f = f;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunction()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunction;",
            "method_body": "public ModelFunction getModelFunction() {\nreturn new ModelFunction(new MultivariateVectorFunction() {\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction:getModelFunctionJacobian()Lorg/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian;",
            "method_body": "public ModelFunctionJacobian getModelFunctionJacobian() {\nreturn new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V",
            "method_body": "public void addObservedPoint(double weight, double x, double y) {\nobservations.add(new WeightedObservedPoint(weight, x, y));\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.WeightedObservedPoint:getY()D",
            "method_body": "public double getY() {\nreturn y;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.WeightedObservedPoint:<init>(DDD)V",
            "method_body": "public WeightedObservedPoint(final double weight, final double x, final double y) {\nthis.weight = weight;\nthis.x      = x;\nthis.y      = y;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter:<init>(Lorg/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer;)V",
            "method_body": "public CurveFitter(final MultivariateVectorOptimizer optimizer) {\nthis.optimizer = optimizer;\nobservations = new ArrayList<WeightedObservedPoint>();\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian:<init>(Lorg/apache/commons/math3/analysis/MultivariateMatrixFunction;)V",
            "method_body": "public ModelFunctionJacobian(MultivariateMatrixFunction j) {\njacobian = j;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateVectorFunction;)V",
            "method_body": "public ModelFunction(MultivariateVectorFunction m) {\nmodel = m;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Target:<init>([D)V",
            "method_body": "public Target(double[] observations) {\ntarget = observations.clone();\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\nsuper(checker);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V",
            "method_body": "public BlockRealMatrix(final int rows, final int columns)\nsuper(rows, columns);\nthis.rows = rows;\nthis.columns = columns;\nblockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nblocks = createBlocksLayout(rows, columns);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
            "method_body": "public static double[][] createBlocksLayout(final int rows, final int columns) {\nfinal int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\nfinal double[][] blocks = new double[blockRows * blockColumns][];\nint blockIndex = 0;\nfor (int iBlock = 0; iBlock < blockRows; ++iBlock) {\nfinal int pStart = iBlock * BLOCK_SIZE;\nfinal int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\nfinal int iHeight = pEnd - pStart;\nfor (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\nfinal int qStart = jBlock * BLOCK_SIZE;\nfinal int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);\nfinal int jWidth = qEnd - qStart;\nblocks[blockIndex] = new double[iHeight * jWidth];\n++blockIndex;\nreturn blocks;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math3.optim.MaxEval:<init>(I)V",
            "method_body": "public MaxEval(int max) {\nif (max <= 0) {\nmaxEval = max;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\nsuper(checker);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
            "method_body": "protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\nthis.checker = checker;\nevaluations = new Incrementor(0, new MaxEvalCallback());\niterations = new Incrementor(0, new MaxIterCallback());\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public static RealMatrix createRealMatrix(final int rows, final int columns) {\nreturn (rows * columns <= 4096) ?\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math3.linear.AbstractRealMatrix:<init>(II)V",
            "method_body": "protected AbstractRealMatrix(final int rowDimension,\nthrows NotStrictlyPositiveException {\nif (rowDimension < 1) {\nif (columnDimension < 1) {\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math3.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math3.util.Incrementor:<init>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V",
            "method_body": "public Incrementor(int max,\nMaxCountExceededCallback cb) {\nif (cb == null){\nmaximalCount = max;\nmaxCountCallback = cb;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:blockWidth(I)I",
            "method_body": "private int blockWidth(final int blockColumn) {\nreturn (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointVectorValuePair;",
            "method_body": "public PointVectorValuePair optimize(OptimizationData... optData)\nparseOptimizationData(optData);\nreturn super.optimize(optData);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V",
            "method_body": "public ModelFunctionJacobian getModelFunctionJacobian() {\nreturn new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getRowDimension()I",
            "method_body": "public int getRowDimension() {\nreturn rows;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:setEntry(IID)V",
            "method_body": "public void setEntry(final int row, final int column, final double value)\nMatrixUtils.checkMatrixIndex(this, row, column);\nfinal int iBlock = row / BLOCK_SIZE;\nfinal int jBlock = column / BLOCK_SIZE;\nfinal int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +\nblocks[iBlock * blockColumns + jBlock][k] = value;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
            "method_body": "public RealMatrix getWeight() {\nreturn weightMatrix.copy();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:copy()Lorg/apache/commons/math3/linear/BlockRealMatrix;",
            "method_body": "public BlockRealMatrix copy() {\nBlockRealMatrix copied = new BlockRealMatrix(rows, columns);\nfor (int i = 0; i < blocks.length; ++i) {\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1:<init>(Lorg/apache/commons/math3/fitting/CurveFitter$TheoreticalValuesFunction;)V",
            "method_body": "public ModelFunction getModelFunction() {\nreturn new ModelFunction(new MultivariateVectorFunction() {\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
            "method_body": "private void parseOptimizationData(OptimizationData... optData) {\nfor (OptimizationData data : optData) {\nif (data instanceof Weight) {\nweightMatrixSqrt = squareRoot(((Weight) data).getWeight());\nbreak;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math3.optim.InitialGuess:<init>([D)V",
            "method_body": "public InitialGuess(double[] startPoint) {\ninit = startPoint.clone();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkRowIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkRowIndex(final AnyMatrix m, final int row)\nif (row < 0 ||\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math3.linear.BlockRealMatrix:getColumnDimension()I",
            "method_body": "public int getColumnDimension() {\nreturn columns;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkColumnIndex(Lorg/apache/commons/math3/linear/AnyMatrix;I)V",
            "method_body": "public static void checkColumnIndex(final AnyMatrix m, final int column)\nif (column < 0 || column >= m.getColumnDimension()) {\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math3.linear.MatrixUtils:checkMatrixIndex(Lorg/apache/commons/math3/linear/AnyMatrix;II)V",
            "method_body": "public static void checkMatrixIndex(final AnyMatrix m,\ncheckRowIndex(m, row);\ncheckColumnIndex(m, column);\n}",
            "method_id": 47
        }
    ]
}