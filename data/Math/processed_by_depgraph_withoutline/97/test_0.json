{
    "bug_id": 97,
    "test_id": 0,
    "test_name": "org.apache.commons.math.analysis.BrentSolverTest.testRootEndpoints",
    "test_body": "public void testRootEndpoints() throws Exception {\nUnivariateRealFunction f = new SinFunction();\nUnivariateRealSolver solver = new BrentSolver(f);\n275: // endpoint is root\ndouble result = solver.solve(Math.PI, 4);\nassertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n279: result = solver.solve(3, Math.PI);\nassertEquals(result, Math.PI, solver.getAbsoluteAccuracy());",
    "stack_trace": "java.lang.IllegalArgumentException: Function values at endpoints do not have different signs.  Endpoints: [3.0,3.141592653589793]  Values: [0.1411200080598672,1.2246467991473532E-16]\nat org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:141)\nat org.apache.commons.math.analysis.BrentSolverTest.testRootEndpoints(BrentSolverTest.java:279)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.analysis.BrentSolver:solve(DD)D",
            "method_body": "public double solve(double min, double max) throws MaxIterationsExceededException,\nclearResult();\nverifyInterval(min, max);\ndouble ret = Double.NaN;\ndouble yMin = f.value(min);\ndouble yMax = f.value(max);\ndouble sign = yMin * yMax;\nif (sign >= 0) {\nthrow new IllegalArgumentException\nret = solve(min, yMin, max, yMax, min, yMin);\nreturn ret;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.analysis.BrentSolver:solve(DDDDDD)D",
            "method_body": "private double solve(double x0, double y0,\ndouble delta = x1 - x0;\ndouble oldDelta = delta;\nint i = 0;\nwhile (i < maximalIterationCount) {\nif (Math.abs(y2) < Math.abs(y1)) {\nx0 = x1;\nx1 = x2;\nx2 = x0;\ny0 = y1;\ny1 = y2;\ny2 = y0;\nif (Math.abs(y1) <= functionValueAccuracy) {\nsetResult(x1, i);\nreturn result;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.analysis.BrentSolver:<init>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;)V",
            "method_body": "public BrentSolver(UnivariateRealFunction f) {\nsuper(f, 100, 1E-6);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl:setResult(DI)V",
            "method_body": "protected final void setResult(double result, int iterationCount) {\nthis.result = result;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl:verifyInterval(DD)V",
            "method_body": "protected void verifyInterval(double lower, double upper) {\nif (lower >= upper) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl:<init>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;ID)V",
            "method_body": "protected UnivariateRealSolverImpl(\nsuper();\nif (f == null) {\nthis.f = f;\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1E-14;\nthis.defaultFunctionValueAccuracy = 1E-15;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.functionValueAccuracy = defaultFunctionValueAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\n}",
            "method_id": 7
        }
    ]
}