{
    "bug_id": 56,
    "test_id": 0,
    "test_name": "org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency",
    "test_body": "public void testIterationConsistency() {\nfinal MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);\nfinal int[][] expected = new int[][] {\n{ 0, 0, 0 },\n{ 0, 0, 1 },\n{ 0, 0, 2 },\n{ 0, 0, 3 },\n{ 0, 1, 0 },\n{ 0, 1, 1 },\n{ 0, 1, 2 },\n{ 0, 1, 3 },\n{ 0, 2, 0 },\n{ 0, 2, 1 },\n{ 0, 2, 2 },\n{ 0, 2, 3 },\n{ 1, 0, 0 },\n{ 1, 0, 1 },\n{ 1, 0, 2 },\n{ 1, 0, 3 },\n{ 1, 1, 0 },\n{ 1, 1, 1 },\n{ 1, 1, 2 },\n{ 1, 1, 3 },\n{ 1, 2, 0 },\n{ 1, 2, 1 },\n{ 1, 2, 2 },\n{ 1, 2, 3 }\n};\n152: final int totalSize = c.getSize();\nfinal int nDim = c.getDimension();\nfinal MultidimensionalCounter.Iterator iter = c.iterator();\nfor (int i = 0; i < totalSize; i++) {\nif (!iter.hasNext()) {\nAssert.fail(\"Too short\");\n}\nfinal int uniDimIndex = iter.next();\nAssert.assertEquals(\"Wrong iteration at \" + i, i, uniDimIndex);\n162: for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\nAssert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\nexpected[i][dimIndex], iter.getCount(dimIndex));\n}\n167: Assert.assertEquals(\"Wrong unidimensional index for [\" + i + \"]\",\nc.getCount(expected[i]), uniDimIndex);\n170: final int[] indices = c.getCounts(uniDimIndex);\nfor (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\nAssert.assertEquals(\"Wrong multidimensional index for [\" + i + \"][\" + dimIndex + \"]\",\nexpected[i][dimIndex], indices[dimIndex]);",
    "stack_trace": "junit.framework.AssertionFailedError: Wrong multidimensional index for [3][2] expected:<3> but was:<2>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(MultidimensionalCounterTest.java:172)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:getCounts(I)[I",
            "method_body": "public int[] getCounts(int index) {\nif (index < 0 ||\nfinal int[] indices = new int[dimension];\nint count = 0;\nfor (int i = 0; i < last; i++) {\nint idx = 0;\nfinal int offset = uniCounterOffset[i];\nwhile (count <= index) {\ncount += offset;\n++idx;\n--idx;\ncount -= offset;\nindices[i] = idx;\nint idx = 1;\nwhile (count < index) {\ncount += idx;\n++idx;\n--idx;\nindices[last] = idx;\nreturn indices;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:getCount([I)I",
            "method_body": "public int getCount(int ... c) throws OutOfRangeException {\nif (c.length != dimension) {\nint count = 0;\nfor (int i = 0; i < dimension; i++) {\nfinal int index = c[i];\nif (index < 0 ||\ncount += uniCounterOffset[i] * c[i];\nreturn count + c[last];\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter$Iterator:next()Ljava/lang/Integer;",
            "method_body": "public Integer next() {\nfor (int i = last; i >= 0; i--) {\nif (counter[i] == size[i] - 1) {\n++counter[i];\nbreak;\nreturn ++count;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter$Iterator:hasNext()Z",
            "method_body": "public boolean hasNext() {\nfor (int i = 0; i < dimension; i++) {\nif (counter[i] != size[i] - 1) {\nreturn true;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:<init>([I)V",
            "method_body": "public MultidimensionalCounter(int ... size) {\ndimension = size.length;\nthis.size = MathUtils.copyOf(size);\nuniCounterOffset = new int[dimension];\nlast = dimension - 1;\nint tS = size[last];\nfor (int i = 0; i < last; i++) {\nint count = 1;\nfor (int j = i + 1; j < dimension; j++) {\ncount *= size[j];\nuniCounterOffset[i] = count;\ntS *= size[i];\nuniCounterOffset[last] = 0;\nif (tS <= 0) {\ntotalSize = tS;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:getSize()I",
            "method_body": "public int getSize() {\nreturn totalSize;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:iterator()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;",
            "method_body": "public Iterator iterator() {\nreturn new Iterator();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter:getDimension()I",
            "method_body": "public int getDimension() {\nreturn dimension;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter$Iterator:getCount(I)I",
            "method_body": "public int getCount(int dim) {\nreturn counter[dim];\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.MultidimensionalCounter$Iterator:<init>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V",
            "method_body": "Iterator() {\ncounter[last] = -1;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:copyOf([I)[I",
            "method_body": "public static int[] copyOf(int[] source) {\nreturn copyOf(source, source.length);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:copyOf([II)[I",
            "method_body": "public static int[] copyOf(int[] source, int len) {\nfinal int[] output = new int[len];\nSystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));\nreturn output;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.util.FastMath:min(II)I",
            "method_body": "public static int min(final int a, final int b) {\nreturn (a <= b) ? a : b;\n}",
            "method_id": 12
        }
    ]
}