{
    "bug_id": 91,
    "test_id": 0,
    "test_name": "org.apache.commons.math.fraction.FractionTest.testCompareTo",
    "test_body": "public void testCompareTo() {\nFraction first = new Fraction(1, 2);\nFraction second = new Fraction(1, 3);\nFraction third = new Fraction(1, 2);\n168: assertEquals(0, first.compareTo(first));\nassertEquals(0, first.compareTo(third));\nassertEquals(1, first.compareTo(second));\nassertEquals(-1, second.compareTo(first));\n173: // these two values are different approximations of PI\n// the first  one is approximately PI - 3.07e-18\n// the second one is approximately PI + 1.936e-17\nFraction pi1 = new Fraction(1068966896, 340262731);\nFraction pi2 = new Fraction( 411557987, 131002976);\nassertEquals(-1, pi1.compareTo(pi2));\nassertEquals( 1, pi2.compareTo(pi1));",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<-1> but was:<0>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.apache.commons.math.fraction.FractionTest.testCompareTo(FractionTest.java:178)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I",
            "method_body": "public int compareTo(Fraction object) {\ndouble nOd = doubleValue();\ndouble dOn = object.doubleValue();\nreturn (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:<init>(II)V",
            "method_body": "public Fraction(int num, int den) {\nsuper();\nif (den == 0) {\nif (den < 0) {\nint d = MathUtils.gcd(num, den);\nif (d > 1) {\nif (den < 0) {\nthis.numerator = num;\nthis.denominator = den;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.fraction.Fraction:doubleValue()D",
            "method_body": "public double doubleValue() {\nreturn (double)numerator / (double)denominator;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\nint v = q;\nif ((u == 0) || (v == 0)) {\nif (u > 0) {\nu = -u;\nif (v > 0) {\nv = -v;\nint k = 0;\nwhile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\nif (k == 31) {\nint t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\nwhile ((t & 1) == 0) { // while t is even..\nt /= 2; // cast out twos\nif (t > 0) {\nu = -t;\nv = t;\nt = (v - u) / 2;\n} while (t != 0);\nreturn -u * (1 << k); // gcd is u*2^k\n}",
            "method_id": 3
        }
    ]
}