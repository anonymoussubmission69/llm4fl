{
    "bug_id": 66,
    "test_id": 0,
    "test_name": "org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",
    "test_body": "public void testQuinticMinStatistics() throws MathException {\n// The function has local minima at -0.27195613 and 0.82221643.\nUnivariateRealFunction f = new QuinticFunction();\nUnivariateRealOptimizer minimizer = new BrentOptimizer();\nminimizer.setRelativeAccuracy(1e-10);\nminimizer.setAbsoluteAccuracy(1e-11);\n93: final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\nfor (int i = 0; i < stat.length; i++) {\nstat[i] = new DescriptiveStatistics();\n}\n98: final double min = -0.75;\nfinal double max = 0.25;\nfinal int nSamples = 200;\nfinal double delta = (max - min) / nSamples;\nfor (int i = 0; i < nSamples; i++) {\nfinal double start = min + i * delta;\nstat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\nstat[1].addValue(minimizer.getIterationCount());\nstat[2].addValue(minimizer.getEvaluations());\n}\n109: final double meanOptValue = stat[0].getMean();\nfinal double medianIter = stat[1].getPercentile(50);\nfinal double medianEval = stat[2].getPercentile(50);\nassertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);\nassertEquals(medianIter, 17, Math.ulp(1d));\nassertEquals(medianEval, 18, Math.ulp(1d));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:494)\nat org.junit.Assert.assertEquals(Assert.java:592)\nat org.apache.commons.math.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics(BrentOptimizerTest.java:114)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getPercentile(D)D",
            "method_body": "public double getPercentile(double p) {\nif (percentileImpl instanceof Percentile) {\n((Percentile) percentileImpl).setQuantile(p);\nreturn apply(percentileImpl);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
            "method_body": "public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\nreturn localMin(getGoalType() == GoalType.MINIMIZE,\nf, goalType, min, startValue, max,\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:apply(Lorg/apache/commons/math/stat/descriptive/UnivariateStatistic;)D",
            "method_body": "public double apply(UnivariateStatistic stat) {\nreturn stat.evaluate(eDA.getInternalValues(), eDA.start(), eDA.getNumElements());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:start()I",
            "method_body": "public synchronized int start() {\nreturn startIndex;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getMean()D",
            "method_body": "public double getMean() {\nreturn apply(meanImpl);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:expand()V",
            "method_body": "protected synchronized void expand() {\nint newSize = 0;\nif (expansionMode == MULTIPLICATIVE_MODE) {\nnewSize = (int) Math.ceil(internalArray.length * expansionFactor);\ndouble[] tempArray = new double[newSize];\nSystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);\ninternalArray = tempArray;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:shouldContract()Z",
            "method_body": "private synchronized boolean shouldContract() {\nif (expansionMode == MULTIPLICATIVE_MODE) {\nreturn (internalArray.length / ((float) numElements)) > contractionCriteria;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getInternalValues()[D",
            "method_body": "public synchronized double[] getInternalValues() {\nreturn internalArray;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:addElement(D)V",
            "method_body": "public synchronized void addElement(double value) {\nnumElements++;\nif ((startIndex + numElements) > internalArray.length) {\nexpand();\ninternalArray[startIndex + (numElements - 1)] = value;\nif (shouldContract()) {\ncontract();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:getNumElements()I",
            "method_body": "public synchronized int getNumElements() {\nreturn numElements;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:contract()V",
            "method_body": "public synchronized void contract() {\ndouble[] tempArray = new double[numElements + 1];\nSystem.arraycopy(internalArray, startIndex, tempArray, 0, numElements);\ninternalArray = tempArray;\nstartIndex = 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:setQuantile(D)V",
            "method_body": "public void setQuantile(final double p) {\nif (p <= 0 || p > 100) {\nquantile = p;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:addValue(D)V",
            "method_body": "public void addValue(double v) {\nif (windowSize != INFINITE_WINDOW) {\neDA.addElement(v);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
            "method_body": "public BrentOptimizer() {\nsetMaxEvaluations(Integer.MAX_VALUE);\nsetMaximalIterationCount(100);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
            "method_body": "public int getEvaluations() {\nreturn evaluations;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V",
            "method_body": "protected final void setResult(final double x, final double fx,\nthis.result         = x;\nthis.functionValue  = fx;\nthis.iterationCount = iterationCount;\nthis.resultComputed = true;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:clearResult()V",
            "method_body": "protected final void clearResult() {\nthis.resultComputed = false;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setMaxEvaluations(I)V",
            "method_body": "public void setMaxEvaluations(int maxEvaluations) {\nthis.maxEvaluations = maxEvaluations;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
            "method_body": "protected double computeObjectiveValue(final UnivariateRealFunction f,\nif (++evaluations > maxEvaluations) {\nreturn f.value(point);\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
            "method_body": "public int getIterationCount() {\nreturn iterationCount;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setRelativeAccuracy(D)V",
            "method_body": "public void setRelativeAccuracy(double accuracy) {\nrelativeAccuracy = accuracy;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getRelativeAccuracy()D",
            "method_body": "public double getRelativeAccuracy() {\nreturn relativeAccuracy;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:getAbsoluteAccuracy()D",
            "method_body": "public double getAbsoluteAccuracy() {\nreturn absoluteAccuracy;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:setAbsoluteAccuracy(D)V",
            "method_body": "public void setAbsoluteAccuracy(double accuracy) {\nabsoluteAccuracy = accuracy;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DII)D",
            "method_body": "public double evaluate( final double[] values, final int start, final int length) {\nreturn evaluate(values, start, length, quantile);\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DIID)D",
            "method_body": "public double evaluate(final double[] values, final int begin,\ntest(values, begin, length);\nif ((p > 100) || (p <= 0)) {\nif (length == 0) {\nif (length == 1) {\ndouble n = length;\ndouble pos = p * (n + 1) / 100;\ndouble fpos = Math.floor(pos);\nint intPos = (int) fpos;\ndouble dif = pos - fpos;\ndouble[] sorted = new double[length];\nSystem.arraycopy(values, begin, sorted, 0, length);\nArrays.sort(sorted);\nif (pos < 1) {\nif (pos >= n) {\ndouble lower = sorted[intPos - 1];\ndouble upper = sorted[intPos];\nreturn lower + dif * (upper - lower);\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Kurtosis:<init>()V",
            "method_body": "public Kurtosis() {\nincMoment = true;\nmoment = new FourthMoment();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Skewness:<init>()V",
            "method_body": "public Skewness() {\nincMoment = true;\nmoment = new ThirdMoment();\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.math.util.ResizableDoubleArray:<init>()V",
            "method_body": "public ResizableDoubleArray() {\ninternalArray = new double[initialCapacity];\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FourthMoment:<init>()V",
            "method_body": "public FourthMoment() {\nsuper();\nm4 = Double.NaN;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:<init>()V",
            "method_body": "public Percentile() {\nthis(50.0);\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.ThirdMoment:<init>()V",
            "method_body": "public ThirdMoment() {\nsuper();\nm3 = Double.NaN;\nnDevSq = Double.NaN;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values,final int begin, final int length) {\nif (test(values, begin, length)) {\nSum sum = new Sum();\ndouble sampleSize = length;\ndouble xbar = sum.evaluate(values, begin, length) / sampleSize;\ndouble correction = 0;\nfor (int i = begin; i < begin + length; i++) {\ncorrection += values[i] - xbar;\nreturn xbar + (correction/sampleSize);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
            "method_body": "public double evaluate(final double[] values, final int begin, final int length) {\ndouble sum = Double.NaN;\nif (test(values, begin, length)) {\nsum = 0.0;\nfor (int i = begin; i < begin + length; i++) {\nsum += values[i];\nreturn sum;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Percentile:<init>(D)V",
            "method_body": "public Percentile(final double p) {\nsetQuantile(p);\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean:<init>()V",
            "method_body": "public GeometricMean() {\nsumOfLogs = new SumOfLogs();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Variance:<init>()V",
            "method_body": "public Variance() {\nmoment = new SecondMoment();\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Max:<init>()V",
            "method_body": "public Max() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.rank.Min:<init>()V",
            "method_body": "public Min() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares:<init>()V",
            "method_body": "public SumOfSquares() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:<init>()V",
            "method_body": "public SumOfLogs() {\nvalue = 0d;\nn = 0;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DII)Z",
            "method_body": "public abstract UnivariateStatistic copy();\nif (values == null) {\nif (begin < 0) {\nif (length < 0) {\nif (begin + length > values.length) {\nif (length == 0) {\nreturn true;\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.summary.Sum:<init>()V",
            "method_body": "public Sum() {\nn = 0;\nvalue = Double.NaN;\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.Mean:<init>()V",
            "method_body": "public Mean() {\nincMoment = true;\nmoment = new FirstMoment();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment:<init>()V",
            "method_body": "public SecondMoment() {\nsuper();\nm2 = Double.NaN;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment:<init>()V",
            "method_body": "public FirstMoment() {\nn = 0;\nm1 = Double.NaN;\ndev = Double.NaN;\nnDev = Double.NaN;\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:<init>(ID)V",
            "method_body": "protected AbstractUnivariateRealOptimizer(final int defaultMaximalIterationCount,\nsuper(defaultMaximalIterationCount, defaultAbsoluteAccuracy);\nresultComputed = false;\nsetMaxEvaluations(Integer.MAX_VALUE);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.math.ConvergingAlgorithmImpl:<init>(ID)V",
            "method_body": "protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,\nfinal double defaultAbsoluteAccuracy) {\nthis.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\nthis.defaultRelativeAccuracy = 1.0e-14;\nthis.absoluteAccuracy = defaultAbsoluteAccuracy;\nthis.relativeAccuracy = defaultRelativeAccuracy;\nthis.defaultMaximalIterationCount = defaultMaximalIterationCount;\nthis.maximalIterationCount = defaultMaximalIterationCount;\nthis.iterationCount = 0;\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
            "method_body": "private double localMin(boolean isMinim,\nif (t <= 0) {\ndouble a, b;\n} else {\na = hi;\nb = lo;\ndouble d = 0;\ndouble e = 0;\ndouble fx = computeObjectiveValue(f, x);\nif (goalType == GoalType.MAXIMIZE) {\nfx = -fx;\n}\n\nint count = 0;\ndouble m = 0.5 * (a + b);\nfinal double tol1 = eps * Math.abs(x) + t;\nfinal double tol2 = 2 * tol1;\n\n// Check stopping criterion.\ndouble q = 0;\ndouble r = 0;\ndouble u = 0;\n\nif (Math.abs(e) > tol1) { // Fit parabola.\nr = (x - w) * (fx - fv);\np = (x - v) * q - (x - w) * r;\nq = 2 * (q - r);\n\nif (q > 0) {\np = -p;\nq = -q;\n}\nr = e;\nif (p > q * (a - x)\n&& p < q * (b - x)\n// Parabolic interpolation step.\n// f must not be evaluated too close to a or b.\nif (u - a < tol2\nd = tol1;\nd = -tol1;\n}\n} else {\ne = a - x;\n}\n}\n// Golden section step.\ne = a - x;\n}\n}\n// Update by at least \"tol1\".\n} else {\nu = x - tol1;\n}\nu = x + d;\ndouble fu = computeObjectiveValue(f, u);\n}\n\n} else {\na = x;\n}\nfv = fw;\nfw = fx;\nx = u;\nfx = fu;\n} else {\nif (u < x) {\na = u;\nb = u;\n}\n|| w == x) {\nfv = fw;\nfw = fu;\n} else if (fu <= fv\n|| v == x\n|| v == w) {\nv = u;\n}\n} else { // termination\n}\n++count;\n}\n}",
            "method_id": 48
        }
    ]
}