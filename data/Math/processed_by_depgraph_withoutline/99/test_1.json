{
    "bug_id": 99,
    "test_id": 1,
    "test_name": "org.apache.commons.math.util.MathUtilsTest.testGcd",
    "test_body": "public void testGcd() {\nint a = 30;\nint b = 50;\nint c = 77;\n412: assertEquals(0, MathUtils.gcd(0, 0));\n414: assertEquals(b, MathUtils.gcd(0, b));\nassertEquals(a, MathUtils.gcd(a, 0));\nassertEquals(b, MathUtils.gcd(0, -b));\nassertEquals(a, MathUtils.gcd(-a, 0));\n419: assertEquals(10, MathUtils.gcd(a, b));\nassertEquals(10, MathUtils.gcd(-a, b));\nassertEquals(10, MathUtils.gcd(a, -b));\nassertEquals(10, MathUtils.gcd(-a, -b));\n424: assertEquals(1, MathUtils.gcd(a, c));\nassertEquals(1, MathUtils.gcd(-a, c));\nassertEquals(1, MathUtils.gcd(a, -c));\nassertEquals(1, MathUtils.gcd(-a, -c));\n429: assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n431: assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\nassertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\nassertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\ntry {\n// gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\nMathUtils.gcd(Integer.MIN_VALUE, 0);\nfail(\"expecting ArithmeticException\");\n} catch (ArithmeticException expected) {",
    "stack_trace": "junit.framework.AssertionFailedError: expecting ArithmeticException\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.math.util.MathUtilsTest.testGcd(MathUtilsTest.java:437)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:gcd(II)I",
            "method_body": "public static int gcd(final int p, final int q) {\nint u = p;\nint v = q;\nif ((u == 0) || (v == 0)) {\nreturn (Math.abs(u) + Math.abs(v));\nif (u > 0) {\nu = -u;\nif (v > 0) {\nv = -v;\nint k = 0;\nwhile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\nu /= 2;\nv /= 2;\nk++; // cast out twos.\nif (k == 31) {\nint t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\nwhile ((t & 1) == 0) { // while t is even..\nt /= 2; // cast out twos\nif (t > 0) {\nu = -t;\nv = t;\nt = (v - u) / 2;\n} while (t != 0);\nreturn -u * (1 << k); // gcd is u*2^k\n}",
            "method_id": 0
        }
    ]
}