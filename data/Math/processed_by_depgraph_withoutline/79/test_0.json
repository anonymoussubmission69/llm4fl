{
    "bug_id": 79,
    "test_id": 0,
    "test_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate",
    "test_body": "public void testPerformClusterAnalysisDegenerate() {\nKMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(\nnew Random(1746432956321l));\nEuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {\nnew EuclideanIntegerPoint(new int[] { 1959, 325100 }),\nnew EuclideanIntegerPoint(new int[] { 1960, 373200 }), };\nList<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);\nassertEquals(1, clusters.size());",
    "stack_trace": "java.lang.NullPointerException\nat org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(KMeansPlusPlusClusterer.java:91)\nat org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.cluster(KMeansPlusPlusClusterer.java:57)\nat org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate(KMeansPlusPlusClustererTest.java:109)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
            "method_body": "private static <T extends Clusterable<T>> List<Cluster<T>>\nfinal List<T> pointSet = new ArrayList<T>(points);\nfinal List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\nfinal T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\nresultSet.add(new Cluster<T>(firstPoint));\nfinal double[] dx2 = new double[pointSet.size()];\nwhile (resultSet.size() < k) {\nreturn resultSet;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:getNearestCluster(Ljava/util/Collection;Lorg/apache/commons/math/stat/clustering/Clusterable;)Lorg/apache/commons/math/stat/clustering/Cluster;",
            "method_body": "private static <T extends Clusterable<T>> Cluster<T>\ndouble minDistance = Double.MAX_VALUE;\nCluster<T> minCluster = null;\nfor (final Cluster<T> c : clusters) {\nfinal double distance = point.distanceFrom(c.getCenter());\nif (distance < minDistance) {\n}\nreturn minCluster;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
            "method_body": "private static <T extends Clusterable<T>> void\nfor (final T p : points) {\nCluster<T> cluster = getNearestCluster(clusters, p);\ncluster.addPoint(p);\n}\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
            "method_body": "public List<Cluster<T>> cluster(final Collection<T> points,\nList<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\nassignPointsToClusters(clusters, points);\nfinal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:getCenter()Lorg/apache/commons/math/stat/clustering/Clusterable;",
            "method_body": "public T getCenter() {\nreturn center;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.math.util.MathUtils:distance([I[I)D",
            "method_body": "public static double distance(int[] p1, int[] p2) {\nint sum = 0;\nfor (int i = 0; i < p1.length; i++) {\nfinal int dp = p1[i] - p2[i];\nsum += dp * dp;\nreturn Math.sqrt(sum);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.Cluster:<init>(Lorg/apache/commons/math/stat/clustering/Clusterable;)V",
            "method_body": "public Cluster(final T center) {\nthis.center = center;\npoints = new ArrayList<T>();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:<init>(Ljava/util/Random;)V",
            "method_body": "public KMeansPlusPlusClusterer(final Random random) {\nthis.random = random;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:<init>([I)V",
            "method_body": "public EuclideanIntegerPoint(final int[] point) {\nthis.point = point;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
            "method_body": "public double distanceFrom(final EuclideanIntegerPoint p) {\nreturn MathUtils.distance(point, p.getPoint());\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:getPoint()[I",
            "method_body": "public int[] getPoint() {\nreturn point;\n}",
            "method_id": 10
        }
    ]
}