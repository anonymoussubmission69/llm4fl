{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base32Test.testCodec200",
    "test_body": "public void testCodec200() {\nfinal Base32 codec = new Base32(true, (byte)'W'); // should be allowed\nassertNotNull(codec);",
    "stack_trace": "java.lang.IllegalArgumentException: pad must not be in alphabet or whitespace\nat org.apache.commons.codec.binary.Base32.<init>(Base32.java:309)\nat org.apache.commons.codec.binary.Base32.<init>(Base32.java:193)\nat org.apache.commons.codec.binary.Base32Test.testCodec200(Base32Test.java:158)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base32:<init>(ZB)V",
            "method_body": "public Base32(final boolean useHex, final byte pad) {\nthis(0, null, useHex, pad);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base32:<init>(I[BZB)V",
            "method_body": "public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) {\nsuper(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,\nif (useHex) {\nthis.encodeTable = HEX_ENCODE_TABLE;\nthis.decodeTable = HEX_DECODE_TABLE;\nif (lineLength > 0) {\nthis.encodeSize = BYTES_PER_ENCODED_BLOCK;\nthis.lineSeparator = null;\nthis.decodeSize = this.encodeSize - 1;\nif (isInAlphabet(pad) || isWhiteSpace(pad)) {\nthrow new IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base32:<clinit>()V",
            "method_body": "private static final byte[] ENCODE_TABLE = {\n};",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base32:isInAlphabet(B)Z",
            "method_body": "public boolean isInAlphabet(final byte octet) {\nreturn octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.BaseNCodec:<init>(IIIIB)V",
            "method_body": "protected BaseNCodec(final int unencodedBlockSize, final int encodedBlockSize,\nfinal int lineLength, final int chunkSeparatorLength, final byte pad) {\nthis.unencodedBlockSize = unencodedBlockSize;\nthis.encodedBlockSize = encodedBlockSize;\nfinal boolean useChunking = lineLength > 0 && chunkSeparatorLength > 0;\nthis.lineLength = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0;\nthis.chunkSeparatorLength = chunkSeparatorLength;\nthis.pad = pad;\n}",
            "method_id": 4
        }
    ]
}