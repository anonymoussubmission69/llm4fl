{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64Test.testCodec112",
    "test_body": "public void testCodec112() { // size calculation assumes always chunked\nbyte[] in = new byte[] {0};\nbyte[] out=Base64.encodeBase64(in);\nBase64.encodeBase64(in, false, false, out.length);\n}\n",
    "stack_trace": "java.lang.IllegalArgumentException: Input array too big, the output array would be bigger (6) than the specified maxium size of 4\nat org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:829)\nat org.apache.commons.codec.binary.Base64Test.testCodec112(Base64Test.java:343)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([B)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData) {\nreturn encodeBase64(binaryData, false);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\nreturn encodeBase64(binaryData, isChunked, false);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:getEncodeLength([BI[B)J",
            "method_body": "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\nchunkSize = (chunkSize / 4) * 4;\nlong len = (pArray.length * 4) / 3;\nlong mod = len % 4;\nif (mod != 0) {\nlen += 4 - mod;\nif (chunkSize > 0) {\nboolean lenChunksPerfectly = len % chunkSize == 0;\nlen += (len / chunkSize) * chunkSeparator.length;\nif (!lenChunksPerfectly) {\nlen += chunkSeparator.length;\nreturn len;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\nreturn encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B",
            "method_body": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\nif (binaryData == null || binaryData.length == 0) {\nlong len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\nif (len > maxResultSize) {\nthrow new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\nBase64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\nreturn b64.encode(binaryData);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([B)[B",
            "method_body": "public byte[] encode(byte[] pArray) {\nreset();\nif (pArray == null || pArray.length == 0) {\nencode(pArray, 0, pArray.length);\nencode(pArray, 0, -1); // Notify encoder of EOF.\nbyte[] buf = new byte[pos - readPos];\nreadResults(buf, 0, buf.length);\nreturn buf;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([BII)V",
            "method_body": "void encode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\neof = true;\nif (buffer == null || buffer.length - pos < encodeSize) {\nswitch (modulus) {\nbuffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\nbuffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\nif (encodeTable == STANDARD_ENCODE_TABLE) {\nbuffer[pos++] = PAD;\nbuffer[pos++] = PAD;\nbyte b = lineSeparator[lineSeparator.length - 1];\nif (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {\n} else {\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < encodeSize) {\nresizeBuffer();\nmodulus = (++modulus) % 3;\nint b = in[inPos++];\nif (b < 0) {\nx = (x << 8) + b;\nif (0 == modulus) {\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:reset()V",
            "method_body": "private void reset() {\nbuffer = null;\npos = 0;\nreadPos = 0;\ncurrentLinePos = 0;\nmodulus = 0;\neof = false;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:readResults([BII)I",
            "method_body": "int readResults(byte[] b, int bPos, int bAvail) {\nif (buffer != null) {\nint len = Math.min(avail(), bAvail);\nSystem.arraycopy(buffer, readPos, b, bPos, len);\nreadPos += len;\nif (readPos >= pos) {\nbuffer = null;\nreturn len;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:avail()I",
            "method_body": "int avail() {\nreturn buffer != null ? pos - readPos : 0;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:resizeBuffer()V",
            "method_body": "private void resizeBuffer() {\nif (buffer == null) {\nbuffer = new byte[DEFAULT_BUFFER_SIZE];\npos = 0;\nreadPos = 0;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I[BZ)V",
            "method_body": "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\nif (lineSeparator == null) {\nthis.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\nthis.lineSeparator = new byte[lineSeparator.length];\nSystem.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\nif (lineLength > 0) {\nthis.encodeSize = 4;\nthis.decodeSize = this.encodeSize - 1;\nif (containsBase64Byte(lineSeparator)) {\nthis.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isBase64(B)Z",
            "method_body": "public static boolean isBase64(byte octet) {\nreturn octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<clinit>()V",
            "method_body": "private static final byte[] STANDARD_ENCODE_TABLE = {\n};",
            "method_id": 14
        }
    ]
}