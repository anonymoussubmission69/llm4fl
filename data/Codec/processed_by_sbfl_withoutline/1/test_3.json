{
    "bug_id": 1,
    "test_id": 3,
    "test_name": "org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence",
    "test_body": "public void testLocaleIndependence() throws Exception {StringEncoder encoder = makeEncoder();String[] data = { \"I\", \"i\", };Locale orig = Locale.getDefault();Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };try {for (int i = 0; i < data.length; i++) {String ref = null;for (int j = 0; j < locales.length; j++) {Locale.setDefault(locales[j]);if (j <= 0) {ref = encoder.encode(data[i]);} else {String cur = null;try {cur = encoder.encode(data[i]);} catch (Exception e) {fail(Locale.getDefault().toString() + \": \" + e.getMessage());}assertEquals(Locale.getDefault().toString() + \": \", ref, cur);}}}} finally {Locale.setDefault(orig);}}",
    "stack_trace": "junit.framework.AssertionFailedError: tr: 239\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence(StringEncoderAbstractTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:encode(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String encode(String pString) {\nreturn soundex(pString);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:getMappingCode(C)C",
            "method_body": "char getMappingCode(char c) {\nif (!Character.isLetter(c)) {\nreturn this.soundexMapping[Character.toUpperCase(c) - 'A'];\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:soundex(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String soundex(String str) {\nif (str == null) {\nstr = SoundexUtils.clean(str);\nif (str.length() == 0) {\nStringBuffer sBuf = new StringBuffer();\nsBuf.append(str.charAt(0));\nlast = '*';\nfor (int i = 0; i < str.length(); i++) {\ncurrent = getMappingCode(str.charAt(i));\nif (current == last) {\n} else if (current != 0) {\nsBuf.append(current);\nlast = current;\nreturn sBuf.toString();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:<init>()V",
            "method_body": "public RefinedSoundex() {\nthis(US_ENGLISH_MAPPING);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:<init>([C)V",
            "method_body": "public RefinedSoundex(char[] mapping) {\nthis.soundexMapping = mapping;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.language.RefinedSoundex:<clinit>()V",
            "method_body": "public static final char[] US_ENGLISH_MAPPING = \"01360240043788015936020505\".toCharArray();\npublic static final RefinedSoundex US_ENGLISH = new RefinedSoundex();\nthis(US_ENGLISH_MAPPING);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.language.SoundexUtils:clean(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String clean(String str) {\nif (str == null || str.length() == 0) {\nint len = str.length();\nchar[] chars = new char[len];\nint count = 0;\nfor (int i = 0; i < len; i++) {\nif (Character.isLetter(str.charAt(i))) {\nchars[count++] = str.charAt(i);\nif (count == len) {\nreturn str.toUpperCase();\n}",
            "method_id": 6
        }
    ]
}