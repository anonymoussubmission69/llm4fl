{
    "bug_id": 1,
    "test_id": 2,
    "test_name": "org.apache.commons.codec.language.SoundexTest.testLocaleIndependence",
    "test_body": "public void testLocaleIndependence() throws Exception {StringEncoder encoder = makeEncoder();String[] data = { \"I\", \"i\", };Locale orig = Locale.getDefault();Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };try {for (int i = 0; i < data.length; i++) {String ref = null;for (int j = 0; j < locales.length; j++) {Locale.setDefault(locales[j]);if (j <= 0) {ref = encoder.encode(data[i]);} else {String cur = null;try {cur = encoder.encode(data[i]);} catch (Exception e) {fail(Locale.getDefault().toString() + \": \" + e.getMessage());}assertEquals(Locale.getDefault().toString() + \": \", ref, cur);}}}} finally {Locale.setDefault(orig);}}",
    "stack_trace": "junit.framework.AssertionFailedError: tr: The character is not mapped: \u0130\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence(StringEncoderAbstractTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.language.SoundexUtils:clean(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String clean(String str) {\nif (str == null || str.length() == 0) {\nint len = str.length();\nchar[] chars = new char[len];\nint count = 0;\nfor (int i = 0; i < len; i++) {\nif (Character.isLetter(str.charAt(i))) {\nchars[count++] = str.charAt(i);\nif (count == len) {\nreturn str.toUpperCase();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:encode(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String encode(String pString) {\nreturn soundex(pString);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:getMappingCode(Ljava/lang/String;I)C",
            "method_body": "private char getMappingCode(String str, int index) {\nchar mappedChar = this.map(str.charAt(index));\nif (index > 1 && mappedChar != '0') {\nreturn mappedChar;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:getSoundexMapping()[C",
            "method_body": "private char[] getSoundexMapping() {\nreturn this.soundexMapping;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:map(C)C",
            "method_body": "private char map(char ch) {\nint index = ch - 'A';\nif (index < 0 || index >= this.getSoundexMapping().length) {\nthrow new IllegalArgumentException(\"The character is not mapped: \" + ch);\nreturn this.getSoundexMapping()[index];\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:soundex(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String soundex(String str) {\nif (str == null) {\nstr = SoundexUtils.clean(str);\nif (str.length() == 0) {\nchar out[] = {'0', '0', '0', '0'};\nint incount = 1, count = 1;\nout[0] = str.charAt(0);\nlast = getMappingCode(str, 0);\nwhile ((incount < str.length()) && (count < out.length)) {\nreturn new String(out);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:<init>()V",
            "method_body": "public Soundex() {\nthis(US_ENGLISH_MAPPING);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:<init>([C)V",
            "method_body": "private int maxLength = 4;\nthis(US_ENGLISH_MAPPING);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:<clinit>()V",
            "method_body": "public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\npublic static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\npublic static final Soundex US_ENGLISH = new Soundex();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.language.Soundex:setSoundexMapping([C)V",
            "method_body": "private void setSoundexMapping(char[] soundexMapping) {\nthis.soundexMapping = soundexMapping;\n}",
            "method_id": 9
        }
    ]
}