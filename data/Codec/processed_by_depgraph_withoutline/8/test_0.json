{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105",
    "test_body": "public void testCodec105() throws IOException {\nBase64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);\nfor (int i = 0; i < 5; i++) {\nin.read();\n}",
    "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\nat org.apache.commons.codec.binary.Base64.encode(Base64.java:497)\nat org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:173)\nat org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:109)\nat org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105(Base64InputStreamTest.java:58)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:read([BII)I",
            "method_body": "public int read(byte b[], int offset, int len) throws IOException {\nif (b == null) {\n} else if (offset < 0 || len < 0) {\n} else if (offset > b.length || offset + len > b.length) {\n} else if (len == 0) {\nint readLen = 0;\nwhile (readLen == 0) {\nif (!base64.hasData()) {\nbyte[] buf = new byte[doEncode ? 4096 : 8192];\nint c = in.read(buf);\nif (c > 0 && b.length == len) {\nbase64.setInitialBuffer(b, offset, len);\nif (doEncode) {\nbase64.encode(buf, 0, c);\nreadLen = base64.readResults(b, offset, len);\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:setInitialBuffer([BII)V",
            "method_body": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\nif (out != null && out.length == outAvail) {\nbuffer = out;\npos = outPos;\nreadPos = outPos;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:resizeBuffer()V",
            "method_body": "private void resizeBuffer() {\nif (buffer == null) {\nbyte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\nSystem.arraycopy(buffer, 0, b, 0, buffer.length);\nbuffer = b;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:<init>(Ljava/io/InputStream;ZI[B)V",
            "method_body": "public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\nsuper(in);\nthis.doEncode = doEncode;\nthis.base64 = new Base64(lineLength, lineSeparator);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I[BZ)V",
            "method_body": "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\nif (lineSeparator == null) {\nlineLength = 0;  // disable chunk-separating\nlineSeparator = CHUNK_SEPARATOR;  // this just gets ignored\nthis.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;\nthis.lineSeparator = new byte[lineSeparator.length];\nSystem.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\nif (lineLength > 0) {\nthis.encodeSize = 4;\nthis.decodeSize = this.encodeSize - 1;\nif (containsBase64Byte(lineSeparator)) {\nthis.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:encode([BII)V",
            "method_body": "void encode(byte[] in, int inPos, int inAvail) {\nif (eof) {\nif (inAvail < 0) {\nfor (int i = 0; i < inAvail; i++) {\nif (buffer == null || buffer.length - pos < encodeSize) {\nresizeBuffer();\nmodulus = (++modulus) % 3;\nint b = in[inPos++];\nif (b < 0) {\nx = (x << 8) + b;\nif (0 == modulus) {\nbuffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\nbuffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\nbuffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64InputStream:read()I",
            "method_body": "public int read() throws IOException {\nint r = read(singleByte, 0, 1);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:readResults([BII)I",
            "method_body": "int readResults(byte[] b, int bPos, int bAvail) {\nif (buffer != null) {\nint len = Math.min(avail(), bAvail);\nSystem.arraycopy(buffer, readPos, b, bPos, len);\nreadPos += len;\nif (readPos >= pos) {\nbuffer = null;\nreturn len;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:hasData()Z",
            "method_body": "boolean hasData() {\nreturn this.buffer != null;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:containsBase64Byte([B)Z",
            "method_body": "private static boolean containsBase64Byte(byte[] arrayOctet) {\nfor (int i = 0; i < arrayOctet.length; i++) {\nif (isBase64(arrayOctet[i])) {\nreturn false;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<clinit>()V",
            "method_body": "private static final byte[] URL_SAFE_ENCODE_TABLE = {\n};",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:<init>(I[B)V",
            "method_body": "public Base64(int lineLength, byte[] lineSeparator) {\nthis(lineLength, lineSeparator, false);\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:avail()I",
            "method_body": "int avail() {\nreturn buffer != null ? pos - readPos : 0;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.codec.binary.Base64:isBase64(B)Z",
            "method_body": "public static boolean isBase64(byte octet) {\nreturn octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n}",
            "method_id": 13
        }
    ]
}