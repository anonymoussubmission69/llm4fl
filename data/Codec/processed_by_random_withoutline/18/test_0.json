{
    "bug_id": 18,
    "test_id": 0,
    "test_name": "org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1",
    "test_body": "public void testEqualsCS1() {\nAssert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), null));\nAssert.assertFalse(StringUtils.equals(null, new StringBuilder(\"abc\")));\nAssert.assertTrue(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"abc\")));\nAssert.assertFalse(StringUtils.equals(new StringBuilder(\"abc\"), new StringBuilder(\"abcd\")));\nAssert.assertFalse(StringUtils.equals(new StringBuilder(\"abcd\"), new StringBuilder(\"abc\")));",
    "stack_trace": "java.lang.StringIndexOutOfBoundsException: String index out of range: 3\nat java.lang.AbstractStringBuilder.charAt(AbstractStringBuilder.java:237)\nat java.lang.StringBuilder.charAt(StringBuilder.java:76)\nat org.apache.commons.codec.binary.CharSequenceUtils.regionMatches(CharSequenceUtils.java:59)\nat org.apache.commons.codec.binary.StringUtils.equals(StringUtils.java:81)\nat org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1(StringUtilsTest.java:228)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.codec.binary.StringUtils:equals(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z",
            "method_body": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\nif (cs1 == cs2) {\nif (cs1 == null || cs2 == null) {\nreturn false;\nif (cs1 instanceof String && cs2 instanceof String) {\nreturn CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.codec.binary.CharSequenceUtils:regionMatches(Ljava/lang/CharSequence;ZILjava/lang/CharSequence;II)Z",
            "method_body": "static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,\nif (cs instanceof String && substring instanceof String) {\nint index1 = thisStart;\nint index2 = start;\nint tmpLen = length;\nwhile (tmpLen-- > 0) {\nfinal char c1 = cs.charAt(index1++);\nfinal char c2 = substring.charAt(index2++);\nif (c1 == c2) {\ncontinue;\nreturn true;\n}",
            "method_id": 1
        }
    ]
}