{
    "bug_id": 9,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.EntitiesTest.unescape",
    "test_body": "25: @Test public void unescape() {\n26: String text = \"Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34;\";\n27: assertEquals(\"Hello &<> \u00c3\u0085 \u00cf\u0080 \u00cf\u0080 \u00e6\u0096\u00b0 there &! \u00c2\u00be\", Entities.unescape(text));\n28: 29: assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n30: }\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<...<> \u00c5 \u03c0 \u03c0 \u65b0 there &! [\u00be]> but was:<...<> \u00c5 \u03c0 \u03c0 \u65b0 there &! [&frac34;]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.nodes.EntitiesTest.unescape(EntitiesTest.java:27)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Entities:unescape(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "static String unescape(String string) {\nif (!string.contains(\"&\"))\nMatcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]\\\\d*);?\nStringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs\nwhile (m.find()) {\nint charval = -1;\nString num = m.group(3);\nif (num != null) {\nint base = m.group(2) != null ? 16 : 10; // 2 is hex indicator\ncharval = Integer.valueOf(num, base);\n} // skip\nString name = m.group(1);\nif (full.containsKey(name))\ncharval = full.get(name);\nif (charval != -1 || charval > 0xFFFF) { // out of range\nString c = Character.toString((char) charval);\nm.appendReplacement(accum, Matcher.quoteReplacement(c));\n} else {\nm.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string\n}\nm.appendTail(accum);\nreturn accum.toString();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.nodes.Entities:<clinit>()V",
            "method_body": "private static final Object[][] baseArray = {\n};",
            "method_id": 1
        }
    ]
}