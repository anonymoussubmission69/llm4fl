{
    "bug_id": 75,
    "test_id": 0,
    "test_name": "org.jsoup.nodes.ElementTest.booleanAttributeOutput",
    "test_body": "public void booleanAttributeOutput() {\nDocument doc = Jsoup.parse(\"<img src=foo noshade='' nohref async=async autofocus=false>\");\nElement img = doc.selectFirst(\"img\");\n1318: assertEquals(\"<img src=\\\"foo\\\" noshade nohref async autofocus=\\\"false\\\">\", img.outerHtml());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<...mg src=\"foo\" noshade[] nohref async autofo...> but was:<...mg src=\"foo\" noshade[=\"\"] nohref async autofo...>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.nodes.ElementTest.booleanAttributeOutput(ElementTest.java:1318)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.select.NodeTraversor:filter(Lorg/jsoup/select/NodeFilter;Lorg/jsoup/nodes/Node;)Lorg/jsoup/select/NodeFilter$FilterResult;",
            "method_body": "public static FilterResult filter(NodeFilter filter, Node root) {\nNode node = root;\nint depth = 0;\nwhile (node != null) {\nFilterResult result = filter.head(node, depth);\nif (result == FilterResult.STOP)\nreturn result;\nif (result == FilterResult.CONTINUE && node.childNodeSize() > 0) {\nnode = node.childNode(0);\n++depth;\ncontinue;\nwhile (node.nextSibling() == null && depth > 0) {\nif (result == FilterResult.CONTINUE || result == FilterResult.SKIP_CHILDREN) {\nresult = filter.tail(node, depth);\nif (result == FilterResult.STOP)\nif (node == root)\nNode prev = node; // In case we need to remove it below.\nnode = node.nextSibling();\nif (result == FilterResult.REMOVE)\n}\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:<init>(Ljava/lang/String;)V",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equalsIgnoreCase(tagName));\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.jsoup.select.Evaluator$Tag:matches(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Element;)Z",
            "method_body": "public abstract boolean matches(Element root, Element element);\npublic Tag(String tagName) {\nthis.tagName = tagName;\n}\nreturn (element.tagName().equalsIgnoreCase(tagName));\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:<init>(Ljava/lang/Appendable;Lorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "OuterHtmlVisitor(Appendable accum, Document.OutputSettings out) {\nthis.accum = accum;\nthis.out = out;\nout.prepareEncoder();\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:head(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void head(Node node, int depth) {\nnode.outerHtmlHead(accum, depth, out);\n}\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.jsoup.nodes.Node$OuterHtmlVisitor:tail(Lorg/jsoup/nodes/Node;I)V",
            "method_body": "public void tail(Node node, int depth) {\nif (!node.nodeName().equals(\"#text\")) { // saves a void hit.\nnode.outerHtmlTail(accum, depth, out);\n}\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$CoreCharset:byName(Ljava/lang/String;)Lorg/jsoup/nodes/Entities$CoreCharset;",
            "method_body": "static CoreCharset byName(final String name) {\nif (name.equals(\"US-ASCII\"))\nif (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al\nreturn utf;\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<clinit>()V",
            "method_body": "private static final String[] booleanAttributes = {\n};",
            "method_id": 207
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:isBooleanAttribute(Ljava/lang/String;)Z",
            "method_body": "protected static boolean isBooleanAttribute(final String key) {\nreturn Arrays.binarySearch(booleanAttributes, key) >= 0;\n}",
            "method_id": 208
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:<init>(Lorg/jsoup/nodes/Element;Lorg/jsoup/select/Evaluator;)V",
            "method_body": "FirstFinder(Element root, Evaluator eval) {\nthis.root = root;\nthis.eval = eval;\n}",
            "method_id": 209
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:head(Lorg/jsoup/nodes/Node;I)Lorg/jsoup/select/NodeFilter$FilterResult;",
            "method_body": "public FilterResult head(Node node, int depth) {\nif (node instanceof Element) {\nElement el = (Element) node;\nif (eval.matches(root, el)) {\nmatch = el;\nreturn STOP;\nreturn CONTINUE;\n}",
            "method_id": 210
        },
        {
            "method_signature": "org.jsoup.select.Collector$FirstFinder:tail(Lorg/jsoup/nodes/Node;I)Lorg/jsoup/select/NodeFilter$FilterResult;",
            "method_body": "public FilterResult tail(Node node, int depth) {\nreturn CONTINUE;\n}",
            "method_id": 211
        },
        {
            "method_signature": "org.jsoup.nodes.Entities$1:<clinit>()V",
            "method_body": "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\nswitch (charset) {\nreturn true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n}",
            "method_id": 212
        }
    ]
}