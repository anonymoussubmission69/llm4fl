{
    "bug_id": 48,
    "test_id": 0,
    "test_name": "org.jsoup.helper.HttpConnectionTest.sameHeadersCombineWithComma",
    "test_body": "@Test public void sameHeadersCombineWithComma() {\nMap<String, List<String>> headers = new HashMap<String, List<String>>();\nList<String> values = new ArrayList<String>();\nvalues.add(\"no-cache\");\nvalues.add(\"no-store\");\nheaders.put(\"Cache-Control\", values);\nHttpConnection.Response res = new HttpConnection.Response();\nres.processResponseHeaders(headers);\nassertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<no-cache[, no-store]> but was:<no-cache[]>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.helper.HttpConnectionTest.sameHeadersCombineWithComma(HttpConnectionTest.java:63)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;Ljava/lang/String;)V",
            "method_body": "public static void notNull(Object obj, String msg) {\nif (obj == null)\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:<init>()V",
            "method_body": "private Base() {\nheaders = new LinkedHashMap<String, String>();\ncookies = new LinkedHashMap<String, String>();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:header(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String header(String name) {\nValidate.notNull(name, \"Header name must not be null\");\nreturn getHeaderCaseInsensitive(name);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:header(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/Connection$Base;",
            "method_body": "public T header(String name, String value) {\nValidate.notEmpty(name, \"Header name must not be empty\");\nValidate.notNull(value, \"Header value must not be null\");\nremoveHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\"\nheaders.put(name, value);\nreturn (T) this;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:removeHeader(Ljava/lang/String;)Lorg/jsoup/Connection$Base;",
            "method_body": "public T removeHeader(String name) {\nValidate.notEmpty(name, \"Header name must not be empty\");\nMap.Entry<String, String> entry = scanHeaders(name); // remove is case insensitive too\nif (entry != null)\nreturn (T) this;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:getHeaderCaseInsensitive(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private String getHeaderCaseInsensitive(String name) {\nValidate.notNull(name, \"Header name must not be null\");\nString value = headers.get(name);\nif (value == null)\nif (value == null) {\nreturn value;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Base:scanHeaders(Ljava/lang/String;)Ljava/util/Map$Entry;",
            "method_body": "private Map.Entry<String, String> scanHeaders(String name) {\nString lc = name.toLowerCase();\nfor (Map.Entry<String, String> entry : headers.entrySet()) {\nreturn null;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>()V",
            "method_body": "Response() {\nsuper();\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<init>(Lorg/jsoup/helper/HttpConnection$Response;)V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:<clinit>()V",
            "method_body": "private static final int MAX_REDIRECTS = 20;\nprivate boolean executed = false;\nprivate int numRedirects = 0;\nprivate static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\");\nsuper();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.jsoup.helper.HttpConnection$Response:processResponseHeaders(Ljava/util/Map;)V",
            "method_body": "void processResponseHeaders(Map<String, List<String>> resHeaders) {\nfor (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\nString name = entry.getKey();\nif (name == null)\nList<String> values = entry.getValue();\nif (name.equalsIgnoreCase(\"Set-Cookie\")) {\nif (!values.isEmpty())\nheader(name, values.get(0));\n}\n}",
            "method_id": 11
        }
    ]
}