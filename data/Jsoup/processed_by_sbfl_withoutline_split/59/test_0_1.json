{
    "bug_id": 59,
    "test_id": 0,
    "test_name": "org.jsoup.safety.CleanerTest.handlesControlCharactersAfterTagName",
    "test_body": "@Test public void handlesControlCharactersAfterTagName() {\nString html = \"<a/\\06>\";\nString clean = Jsoup.clean(html, Whitelist.basic());\nassertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);",
    "stack_trace": "java.lang.IllegalArgumentException: String must not be empty\nat org.jsoup.helper.Validate.notEmpty(Validate.java:92)\nat org.jsoup.nodes.Attribute.<init>(Attribute.java:35)\nat org.jsoup.nodes.BooleanAttribute.<init>(BooleanAttribute.java:12)\nat org.jsoup.parser.Token$Tag.newAttribute(Token.java:114)\nat org.jsoup.parser.Token$Tag.finaliseTag(Token.java:128)\nat org.jsoup.parser.Tokeniser.emitTagPending(Tokeniser.java:206)\nat org.jsoup.parser.TokeniserState$35.read(TokeniserState.java:614)\nat org.jsoup.parser.Tokeniser.read(Tokeniser.java:50)\nat org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:49)\nat org.jsoup.parser.HtmlTreeBuilder.parseFragment(HtmlTreeBuilder.java:103)\nat org.jsoup.parser.Parser.parseFragment(Parser.java:115)\nat org.jsoup.parser.Parser.parseBodyFragment(Parser.java:157)\nat org.jsoup.Jsoup.parseBodyFragment(Jsoup.java:148)\nat org.jsoup.Jsoup.clean(Jsoup.java:198)\nat org.jsoup.Jsoup.clean(Jsoup.java:215)\nat org.jsoup.safety.CleanerTest.handlesControlCharactersAfterTagName(CleanerTest.java:283)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.parser.Token$Comment:<init>()V",
            "method_body": "Comment() {\ntype = TokenType.Comment;\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:<clinit>()V",
            "method_body": "private static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\nprivate static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.helper.StringUtil:in(Ljava/lang/String;[Ljava/lang/String;)Z",
            "method_body": "public static boolean in(String needle, String... haystack) {\nfor (String hay : haystack) {\nif (hay.equals(needle))\nreturn true;\nreturn false;\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Attribute(String key, String value) {\nValidate.notNull(key);\nValidate.notNull(value);\nthis.key = key.trim();\nValidate.notEmpty(key); // trimming could potentially make empty, so validate here\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<clinit>()V",
            "method_body": "private static final String[] booleanAttributes = {\n};",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.select.Elements:<init>()V",
            "method_body": "public Elements() {\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.nodes.BooleanAttribute:<init>(Ljava/lang/String;)V",
            "method_body": "public BooleanAttribute(String key) {\nsuper(key, \"\");\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:<init>()V",
            "method_body": "public Whitelist() {\ntagNames = new HashSet<TagName>();\nattributes = new HashMap<TagName, Set<AttributeKey>>();\nenforcedAttributes = new HashMap<TagName, Map<AttributeKey, AttributeValue>>();\nprotocols = new HashMap<TagName, Map<AttributeKey, Set<Protocol>>>();\npreserveRelativeLinks = false;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:basic()Lorg/jsoup/safety/Whitelist;",
            "method_body": "public static Whitelist basic() {\nreturn new Whitelist()\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addTags([Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addTags(String... tags) {\nValidate.notNull(tags);\nfor (String tagName : tags) {\nValidate.notEmpty(tagName);\ntagNames.add(TagName.valueOf(tagName));\nreturn this;\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addAttributes(Ljava/lang/String;[Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addAttributes(String tag, String... attributes) {\nValidate.notEmpty(tag);\nValidate.notNull(attributes);\nValidate.isTrue(attributes.length > 0, \"No attribute names supplied.\");\nTagName tagName = TagName.valueOf(tag);\nif (!tagNames.contains(tagName))\nSet<AttributeKey> attributeSet = new HashSet<AttributeKey>();\nfor (String key : attributes) {\nValidate.notEmpty(key);\nattributeSet.add(AttributeKey.valueOf(key));\nif (this.attributes.containsKey(tagName)) {\nthis.attributes.put(tagName, attributeSet);\nreturn this;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addEnforcedAttribute(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addEnforcedAttribute(String tag, String attribute, String value) {\nValidate.notEmpty(tag);\nValidate.notEmpty(attribute);\nValidate.notEmpty(value);\nTagName tagName = TagName.valueOf(tag);\nif (!tagNames.contains(tagName))\nAttributeKey attrKey = AttributeKey.valueOf(attribute);\nAttributeValue attrVal = AttributeValue.valueOf(value);\nif (enforcedAttributes.containsKey(tagName)) {\nMap<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\nattrMap.put(attrKey, attrVal);\nenforcedAttributes.put(tagName, attrMap);\nreturn this;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist:addProtocols(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/jsoup/safety/Whitelist;",
            "method_body": "public Whitelist addProtocols(String tag, String attribute, String... protocols) {\nValidate.notEmpty(tag);\nValidate.notEmpty(attribute);\nValidate.notNull(protocols);\nTagName tagName = TagName.valueOf(tag);\nAttributeKey attrKey = AttributeKey.valueOf(attribute);\nif (this.protocols.containsKey(tagName)) {\nattrMap = new HashMap<AttributeKey, Set<Protocol>>();\nthis.protocols.put(tagName, attrMap);\nif (attrMap.containsKey(attrKey)) {\nprotSet = new HashSet<Protocol>();\nattrMap.put(attrKey, protSet);\nfor (String protocol : protocols) {\nValidate.notEmpty(protocol);\nProtocol prot = Protocol.valueOf(protocol);\nprotSet.add(prot);\nreturn this;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TypedValue:<init>(Ljava/lang/String;)V",
            "method_body": "TypedValue(String value) {\nValidate.notNull(value);\nthis.value = value;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TypedValue:hashCode()I",
            "method_body": "public int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((value == null) ? 0 : value.hashCode());\nreturn result;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TypedValue:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) return true;\nif (obj == null) return false;\nif (getClass() != obj.getClass()) return false;\nTypedValue other = (TypedValue) obj;\nif (value == null) {\n} else if (!value.equals(other.value)) return false;\nreturn true;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TagName:<init>(Ljava/lang/String;)V",
            "method_body": "TagName(String value) {\nsuper(value);\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$TagName:valueOf(Ljava/lang/String;)Lorg/jsoup/safety/Whitelist$TagName;",
            "method_body": "static TagName valueOf(String value) {\nreturn new TagName(value);\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$AttributeKey:<init>(Ljava/lang/String;)V",
            "method_body": "AttributeKey(String value) {\nsuper(value);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$AttributeKey:valueOf(Ljava/lang/String;)Lorg/jsoup/safety/Whitelist$AttributeKey;",
            "method_body": "static AttributeKey valueOf(String value) {\nreturn new AttributeKey(value);\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$Protocol:<init>(Ljava/lang/String;)V",
            "method_body": "Protocol(String value) {\nsuper(value);\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$Protocol:valueOf(Ljava/lang/String;)Lorg/jsoup/safety/Whitelist$Protocol;",
            "method_body": "static Protocol valueOf(String value) {\nreturn new Protocol(value);\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$AttributeValue:<init>(Ljava/lang/String;)V",
            "method_body": "AttributeValue(String value) {\nsuper(value);\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.safety.Whitelist$AttributeValue:valueOf(Ljava/lang/String;)Lorg/jsoup/safety/Whitelist$AttributeValue;",
            "method_body": "static AttributeValue valueOf(String value) {\nreturn new AttributeValue(value);\n}",
            "method_id": 123
        }
    ]
}