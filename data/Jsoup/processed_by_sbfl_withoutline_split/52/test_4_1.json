{
    "bug_id": 52,
    "test_id": 4,
    "test_name": "org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlIso8859",
    "test_body": "public void testMetaCharsetUpdateXmlIso8859() {\nfinal Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\ndoc.updateMetaCharsetElement(true);\ndoc.charset(Charset.forName(charsetIso8859));\n333: final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n\"<root>\\n\" +\n\" node\\n\" +\n\"</root>\";\nassertEquals(xmlCharsetISO, doc.toString());\n339: XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\nassertEquals(charsetIso8859, doc.charset().name());\nassertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\nassertEquals(doc.charset(), doc.outputSettings().charset());\n}\n",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<...ncoding=\"ISO-8859-1\"[?]>\n<root>\nnode\n</roo...> but was:<...ncoding=\"ISO-8859-1\"[]>\n<root>\nnode\n</roo...>\nat org.junit.Assert.assertEquals(Assert.java:115)\nat org.junit.Assert.assertEquals(Assert.java:144)\nat org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlIso8859(DocumentTest.java:337)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\naccum\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V",
            "method_body": "void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}\nvoid outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:hasKey(Ljava/lang/String;)Z",
            "method_body": "public boolean hasKey(String key) {\nreturn attributes != null && attributes.containsKey(key.toLowerCase());\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.nodes.Node:attr(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "public String attr(String attributeKey) {\nValidate.notNull(attributeKey);\nif (attributes.hasKey(attributeKey))\nreturn attributes.get(attributeKey);\nelse if (attributeKey.toLowerCase().startsWith(\"abs:\"))\nelse return \"\";\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.nodes.XmlDeclaration:name()Ljava/lang/String;",
            "method_body": "public String name() {\nreturn name;\n}",
            "method_id": 104
        }
    ]
}