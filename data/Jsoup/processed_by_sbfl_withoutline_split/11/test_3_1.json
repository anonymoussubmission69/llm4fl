{
    "bug_id": 11,
    "test_id": 3,
    "test_name": "org.jsoup.select.SelectorTest.notParas",
    "test_body": "@Test public void notParas() {\nDocument doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n545: Elements el1 = doc.select(\"p:not([id=1])\");\nassertEquals(2, el1.size());",
    "stack_trace": "org.jsoup.select.Selector$SelectorParseException: Could not parse query 'p:not([id=1])': unexpected token at ':not([id=1])'\nat org.jsoup.select.Selector.findElements(Selector.java:182)\nat org.jsoup.select.Selector.select(Selector.java:128)\nat org.jsoup.select.Selector.select(Selector.java:84)\nat org.jsoup.nodes.Element.select(Element.java:199)\nat org.jsoup.select.SelectorTest.notParas(SelectorTest.java:545)",
    "covered_methods": [
        {
            "method_signature": "org.jsoup.nodes.Attribute:createFromEncoded(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Attribute;",
            "method_body": "public static Attribute createFromEncoded(String unencodedKey, String encodedValue) {\nString value = Entities.unescape(encodedValue);\nreturn new Attribute(unencodedKey, value);\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.jsoup.select.Elements:iterator()Ljava/util/Iterator;",
            "method_body": "public Iterator<Element> iterator() {return contents.iterator();}\npublic Iterator<Element> iterator() {return contents.iterator();}",
            "method_id": 101
        },
        {
            "method_signature": "org.jsoup.select.Selector:addElements(Ljava/util/Collection;)V",
            "method_body": "private void addElements(Collection<Element> add) {\nelements.addAll(add);\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string, String msg) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.jsoup.parser.Parser:parseAttribute()Lorg/jsoup/nodes/Attribute;",
            "method_body": "private Attribute parseAttribute() {\ntq.consumeWhitespace();\nString key = tq.consumeAttributeKey();\nString value = \"\";\ntq.consumeWhitespace();\nif (tq.matchChomp(\"=\")) {\ntq.consumeWhitespace();\nif (tq.matchChomp(SQ)) {\n} else if (tq.matchChomp(DQ)) {\nStringBuilder valueAccum = new StringBuilder();\nwhile (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\nvalueAccum.append(tq.consume());\nvalue = valueAccum.toString();\ntq.consumeWhitespace();\nif (key.length() != 0)\nreturn Attribute.createFromEncoded(key, value);\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.jsoup.parser.TokenQueue:consumeAttributeKey()Ljava/lang/String;",
            "method_body": "public String consumeAttributeKey() {\nint start = pos;\nwhile (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':')))\npos++;\nreturn queue.substring(start, pos);\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.jsoup.parser.Tag:<init>(Ljava/lang/String;)V",
            "method_body": "private String tagName;\nprivate boolean knownTag = false; // if pre-defined or auto-created\nprivate boolean isBlock = true; // block or inline\nprivate boolean formatAsBlock = true;\nprivate boolean canContainBlock = true; // Can this tag hold block level tags?\nprivate boolean canContainInline = true; // only pcdata if not\nprivate boolean optionalClosing = false; // If tag is open, and another seen, close previous tag\nprivate boolean empty = false; // can hold nothing; e.g. img\nprivate boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty.\nprivate boolean preserveWhitespace = false; // for pre, textarea, script etc\nprivate List<Tag> excludes = Collections.emptyList(); // cannot contain these tags\nprivate List<Tag> ignoreEndTags = Collections.emptyList(); // ignore these end tags\nprivate Tag(String tagName) {\nthis.tagName = tagName.toLowerCase();\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.jsoup.parser.Tag:valueOf(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "public static Tag valueOf(String tagName) {\nValidate.notNull(tagName);\ntagName = tagName.trim().toLowerCase();\nValidate.notEmpty(tagName);\nsynchronized (tags) {\nTag tag = tags.get(tagName);\nif (tag == null) {\ntag = new Tag(tagName);\ntag.setAncestor(defaultAncestor.tagName);\ntag.setExcludes();\ntag.isBlock = false;\ntag.canContainBlock = true;\nreturn tag;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createBlock(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createBlock(String tagName) {\nreturn register(new Tag(tagName));\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.jsoup.parser.Tag:createInline(Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag createInline(String tagName) {\nTag inline = new Tag(tagName);\ninline.isBlock = false;\ninline.canContainBlock = false;\ninline.formatAsBlock = false;\nreturn register(inline);\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.jsoup.parser.Tag:register(Lorg/jsoup/parser/Tag;)Lorg/jsoup/parser/Tag;",
            "method_body": "private static Tag register(Tag tag) {\ntag.setAncestor(defaultAncestor.tagName);\ntag.setKnownTag();\nsynchronized (tags) {\ntags.put(tag.tagName, tag);\n}\nreturn tag;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setCanContainBlock()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setCanContainBlock() {\ncanContainBlock = true;\nreturn this;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainInlineOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainInlineOnly() {\ncanContainBlock = false;\ncanContainInline = true;\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setFormatAsInline()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setFormatAsInline() {\nformatAsBlock = false;\nreturn this;\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setContainDataOnly()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setContainDataOnly() {\ncanContainBlock = false;\ncanContainInline = false;\npreserveWhitespace = true;\nreturn this;\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setEmpty()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setEmpty() {\ncanContainBlock = false;\ncanContainInline = false;\nempty = true;\nreturn this;\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setOptionalClosing()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setOptionalClosing() {\noptionalClosing = true;\nreturn this;\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setPreserveWhitespace()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setPreserveWhitespace() {\npreserveWhitespace = true;\nreturn this;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setAncestor([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setAncestor(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nancestors = Collections.emptyList();\nancestors = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nancestors.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setExcludes([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setExcludes(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nexcludes = Collections.emptyList();\nexcludes = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nexcludes.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setIgnoreEnd([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setIgnoreEnd(String... tagNames) {\nif (tagNames == null || tagNames.length == 0) {\nignoreEndTags = new ArrayList<Tag>(tagNames.length);\nfor (String name : tagNames) {\nignoreEndTags.add(Tag.valueOf(name));\nreturn this;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setParent([Ljava/lang/String;)Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setParent(String... tagNames) {\ndirectDescendant = true;\nsetAncestor(tagNames);\nreturn this;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setLimitChildren()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setLimitChildren() {\nlimitChildren = true;\nreturn this;\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.jsoup.parser.Tag:setKnownTag()Lorg/jsoup/parser/Tag;",
            "method_body": "private Tag setKnownTag() {\nknownTag = true;\nreturn this;\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notEmpty(Ljava/lang/String;)V",
            "method_body": "public static void notEmpty(String string) {\nif (string == null || string.length() == 0)\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.jsoup.helper.Validate:notNull(Ljava/lang/Object;)V",
            "method_body": "public static void notNull(Object obj) {\nif (obj == null)\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.jsoup.nodes.Attributes:put(Lorg/jsoup/nodes/Attribute;)V",
            "method_body": "public void put(Attribute attribute) {\nValidate.notNull(attribute);\nattributes.put(attribute.getKey(), attribute);\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:getKey()Ljava/lang/String;",
            "method_body": "public String getKey() {\nreturn key;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.jsoup.nodes.Attribute:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Attribute(String key, String value) {\nValidate.notEmpty(key);\nValidate.notNull(value);\nthis.key = key.trim().toLowerCase();\nthis.value = value;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.jsoup.nodes.Node:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object o) {\nif (this == o) return true;\nreturn false;\n}",
            "method_id": 129
        }
    ]
}