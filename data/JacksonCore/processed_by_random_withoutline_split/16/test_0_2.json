{
    "bug_id": 16,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized",
    "test_body": "public void testInitialized() throws Exception\n{\nJsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\nJsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n// consume '1', move to '2'\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\nassertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());\n58: JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());\nassertEquals(2, seq.getIntValue());\nassertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat com.fasterxml.jackson.core.json.ParserSequenceTest.testInitialized(ParserSequenceTest.java:60)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 100
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:parseInt([CII)I",
            "method_body": "public static int parseInt(char[] ch, int off, int len)\nint num = ch[off] - '0';\nif (len > 4) {\nif (len > 1) {\nreturn num;\n}",
            "method_id": 101
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserDelegate:<init>(Lcom/fasterxml/jackson/core/JsonParser;)V",
            "method_body": "public JsonParserDelegate(JsonParser d) {\ndelegate = d;\n}",
            "method_id": 102
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserDelegate:getIntValue()I",
            "method_body": "public int getIntValue() throws IOException { return delegate.getIntValue(); }\npublic int getIntValue() throws IOException { return delegate.getIntValue(); }",
            "method_id": 103
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserSequence:<init>([Lcom/fasterxml/jackson/core/JsonParser;)V",
            "method_body": "protected JsonParserSequence(JsonParser[] parsers)\nsuper(parsers[0]);\n_parsers = parsers;\n_nextParser = 1;\n}",
            "method_id": 104
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserSequence:createFlattened(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/core/JsonParser;)Lcom/fasterxml/jackson/core/util/JsonParserSequence;",
            "method_body": "public static JsonParserSequence createFlattened(JsonParser first, JsonParser second)\nif (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {\nreturn new JsonParserSequence(new JsonParser[] { first, second });\n}",
            "method_id": 105
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserSequence:nextToken()Lcom/fasterxml/jackson/core/JsonToken;",
            "method_body": "public JsonToken nextToken() throws IOException, JsonParseException\nJsonToken t = delegate.nextToken();\nif (t != null) return t;\nwhile (switchToNext()) {\nt = delegate.nextToken();\nif (t != null) return t;\n}",
            "method_id": 106
        },
        {
            "method_signature": "com.fasterxml.jackson.core.util.JsonParserSequence:switchToNext()Z",
            "method_body": "protected boolean switchToNext()\nif (_nextParser >= _parsers.length) {\ndelegate = _parsers[_nextParser++];\nreturn true;\n}",
            "method_id": 107
        }
    ]
}