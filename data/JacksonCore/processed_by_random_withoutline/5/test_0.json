{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.core.TestJsonPointer.testWonkyNumber173",
    "test_body": "public void testWonkyNumber173() throws Exception\n{\nJsonPointer ptr = JsonPointer.compile(\"/1e0\");\nassertFalse(ptr.matches());",
    "stack_trace": "java.lang.NumberFormatException: For input string: \"1e0\"\nat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\nat java.lang.Integer.parseInt(Integer.java:580)\nat java.lang.Integer.parseInt(Integer.java:615)\nat com.fasterxml.jackson.core.io.NumberInput.parseInt(NumberInput.java:91)\nat com.fasterxml.jackson.core.JsonPointer._parseIndex(JsonPointer.java:204)\nat com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer.java:70)\nat com.fasterxml.jackson.core.JsonPointer._parseTail(JsonPointer.java:225)\nat com.fasterxml.jackson.core.JsonPointer.compile(JsonPointer.java:98)\nat com.fasterxml.jackson.core.TestJsonPointer.testWonkyNumber173(TestJsonPointer.java:41)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:<clinit>()V",
            "method_body": "public final static String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\nfinal static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\nfinal static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.core.io.NumberInput:parseInt(Ljava/lang/String;)I",
            "method_body": "public static int parseInt(String s)\nchar c = s.charAt(0);\nint len = s.length();\nboolean neg = (c == '-');\nint offset = 1;\nif (neg) {\nif (len > 9) {\nif (c > '9' || c < '0') {\nint num = c - '0';\nif (offset < len) {\nc = s.charAt(offset++);\nif (c > '9' || c < '0') {\nreturn Integer.parseInt(s);\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:<init>()V",
            "method_body": "protected JsonPointer() {\n_nextSegment = null;\n_matchingPropertyName = \"\";\n_matchingElementIndex = -1;\n_asString = \"\";\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:<init>(Ljava/lang/String;Ljava/lang/String;Lcom/fasterxml/jackson/core/JsonPointer;)V",
            "method_body": "protected JsonPointer(String fullString, String segment, JsonPointer next) {\n_asString = fullString;\n_nextSegment = next;\n_matchingPropertyName = segment;\n_matchingElementIndex = _parseIndex(segment);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:<clinit>()V",
            "method_body": "protected final static JsonPointer EMPTY = new JsonPointer();\n* so that {@link #toString} should be as efficient as possible.",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:compile(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonPointer;",
            "method_body": "public static JsonPointer compile(String input) throws IllegalArgumentException\nif ((input == null) || input.length() == 0) {\nif (input.charAt(0) != '/') {\nreturn _parseTail(input);\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:_parseIndex(Ljava/lang/String;)I",
            "method_body": "private final static int _parseIndex(String str) {\nfinal int len = str.length();\nif (len == 0 || len > 10) {\nfor (int i = 0; i < len; ++i) {\nchar c = str.charAt(i++);\nif (c > '9' || c < '0') {\nif (len == 10) {\nreturn NumberInput.parseInt(str);\n}",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.core.JsonPointer:_parseTail(Ljava/lang/String;)Lcom/fasterxml/jackson/core/JsonPointer;",
            "method_body": "protected static JsonPointer _parseTail(String input) {\nfinal int end = input.length();\nfor (int i = 1; i < end; ) {\nchar c = input.charAt(i);\nif (c == '/') { // common case, got a segment\n++i;\nif (c == '~' && i < end) { // possibly, quote\n}\nreturn new JsonPointer(input, input.substring(1), EMPTY);\n}",
            "method_id": 7
        }
    ]
}