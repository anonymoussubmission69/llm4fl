{
    "bug_id": 14,
    "test_id": 0,
    "test_name": "org.apache.commons.cli2.bug.BugCLI144Test.testFileValidator",
    "test_body": "public void testFileValidator() {\nfinal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\nfinal ArgumentBuilder abuilder = new ArgumentBuilder();\nfinal GroupBuilder gbuilder = new GroupBuilder();\nDefaultOption fileNameOption = obuilder.withShortName(\"f\")\n.withLongName(\"file-name\").withRequired(true).withDescription(\n\"name of an existing file\").withArgument(\nabuilder.withName(\"file-name\").withValidator(\nFileValidator.getExistingFileInstance())\n.create()).create();\nGroup options = gbuilder.withName(\"options\").withOption(fileNameOption)\n.create();\nParser parser = new Parser();\nparser.setHelpTrigger(\"--help\");\nparser.setGroup(options);\n60: final String fileName = \"src/test/org/apache/commons/cli2/bug/BugCLI144Test.java\";\nCommandLine cl = parser\n.parseAndHelp(new String[] { \"--file-name\", fileName });",
    "stack_trace": "java.lang.ClassCastException: java.io.File cannot be cast to java.lang.String\nat org.apache.commons.cli2.validation.FileValidator.validate(FileValidator.java:123)\nat org.apache.commons.cli2.option.ArgumentImpl.validate(ArgumentImpl.java:251)\nat org.apache.commons.cli2.option.ParentImpl.validate(ParentImpl.java:124)\nat org.apache.commons.cli2.option.DefaultOption.validate(DefaultOption.java:176)\nat org.apache.commons.cli2.option.GroupImpl.validate(GroupImpl.java:262)\nat org.apache.commons.cli2.commandline.Parser.parse(Parser.java:104)\nat org.apache.commons.cli2.commandline.Parser.parseAndHelp(Parser.java:124)\nat org.apache.commons.cli2.bug.BugCLI144Test.testFileValidator(BugCLI144Test.java:61)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:getExistingFileInstance()Lorg/apache/commons/cli2/validation/FileValidator;",
            "method_body": "public static FileValidator getExistingFileInstance() {\nfinal FileValidator validator = new FileValidator();\nvalidator.setExisting(true);\nvalidator.setFile(true);\nreturn validator;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:parse([Ljava/lang/String;)Lorg/apache/commons/cli2/CommandLine;",
            "method_body": "public CommandLine parse(final String[] arguments)\nfinal List argumentList = new LinkedList();\nfor (int i = 0; i < arguments.length; i++) {\nfinal String argument = arguments[i];\nargumentList.add(new String(argument));\nfinal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);\ngroup.defaults(commandLine);\nfinal ListIterator iterator = argumentList.listIterator();\nObject previous = null;\nwhile (group.canProcess(commandLine, iterator)) {\nfinal Object next = iterator.next();\niterator.previous();\nif (next == previous) {\nprevious = next;\ngroup.process(commandLine, iterator);\n}\nif (iterator.hasNext()) {\nif (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {\ngroup.validate(commandLine);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:withValidator(Lorg/apache/commons/cli2/validation/Validator;)Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder withValidator(final Validator newValidator) {\nif (newValidator == null) {\nthis.validator = newValidator;\nreturn this;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:validate(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void validate(final WriteableCommandLine commandLine)\nint present = 0;\nOption unexpected = null;\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\nboolean validate = option.isRequired() || option instanceof Group;\nif (validate) {\noption.validate(commandLine);\nif (commandLine.hasOption(option)) {\nif (++present > maximum) {\noption.validate(commandLine);\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli2.option.DefaultOption:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;ZLorg/apache/commons/cli2/Argument;Lorg/apache/commons/cli2/Group;I)V",
            "method_body": "public DefaultOption(final String shortPrefix,\nsuper(argument, children, description, id, required);\nthis.shortPrefix = shortPrefix;\nthis.burstEnabled = burstEnabled;\nthis.burstLength = shortPrefix.length() + 1;\nthis.preferredName = preferredName;\nthis.aliases =\nthis.burstAliases =\nfinal Set newTriggers = new HashSet();\nnewTriggers.add(preferredName);\nnewTriggers.addAll(this.aliases);\nnewTriggers.addAll(this.burstAliases);\nthis.triggers = Collections.unmodifiableSet(newTriggers);\nfinal Set newPrefixes = new HashSet(super.getPrefixes());\nnewPrefixes.add(shortPrefix);\nnewPrefixes.add(longPrefix);\nthis.prefixes = Collections.unmodifiableSet(newPrefixes);\ncheckPrefixes(newPrefixes);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:reset()Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder reset() {\nname = \"arg\";\ndescription = null;\nminimum = 0;\nmaximum = Integer.MAX_VALUE;\ninitialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;\nsubsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;\nvalidator = null;\nconsumeRemaining = \"--\";\ndefaultValues = null;\nid = 0;\nreturn this;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:parseAndHelp([Ljava/lang/String;)Lorg/apache/commons/cli2/CommandLine;",
            "method_body": "public CommandLine parseAndHelp(final String[] arguments) {\nhelpFormatter.setGroup(group);\nfinal CommandLine commandLine = parse(arguments);\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:reset()Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder reset() {\npreferredName = null;\ndescription = null;\naliases = new HashSet();\nburstAliases = new HashSet();\nrequired = false;\nargument = null;\nchildren = null;\nid = 0;\nreturn this;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:process(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/util/ListIterator;)V",
            "method_body": "public void process(final WriteableCommandLine commandLine,\nString previous = null;\nwhile (arguments.hasNext()) {\nfinal String arg = (String) arguments.next();\nif (arg == previous) {\nprevious = arg;\nfinal Option opt = (Option) optionMap.get(arg);\nif (opt != null) {\narguments.previous();\nopt.process(commandLine, arguments);\n} // [END process each command line token\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:<init>(Ljava/lang/String;Ljava/lang/String;Z)V",
            "method_body": "public DefaultOptionBuilder(final String shortPrefix,\nthrows IllegalArgumentException {\nif ((shortPrefix == null) || (shortPrefix.length() == 0)) {\nif ((longPrefix == null) || (longPrefix.length() == 0)) {\nthis.shortPrefix = shortPrefix;\nthis.longPrefix = longPrefix;\nthis.burstEnabled = burstEnabled;\nreset();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:setFile(Z)V",
            "method_body": "public void setFile(boolean file) {\nthis.file = file;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli2.option.ArgumentImpl:<init>(Ljava/lang/String;Ljava/lang/String;IICCLorg/apache/commons/cli2/validation/Validator;Ljava/lang/String;Ljava/util/List;I)V",
            "method_body": "public ArgumentImpl(final String name,\nsuper(id, false);\nthis.name = (name == null) ? \"arg\" : name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.initialSeparator = initialSeparator;\nthis.subsequentSeparator = subsequentSeparator;\nthis.subsequentSplit = subsequentSeparator != NUL;\nthis.validator = validator;\nthis.consumeRemaining = consumeRemaining;\nthis.defaultValues = valueDefaults;\nif (minimum > maximum) {\nif ((valueDefaults != null) && (valueDefaults.size() > 0)) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withShortName(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withShortName(final String shortName) {\nfinal String name = shortPrefix + shortName;\nif (preferredName == null) {\npreferredName = name;\nif (burstEnabled && (name.length() == (shortPrefix.length() + 1))) {\nburstAliases.add(name);\nreturn this;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:setExisting(Z)V",
            "method_body": "public void setExisting(boolean existing) {\nthis.existing = existing;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withLongName(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withLongName(final String longName) {\nfinal String name = longPrefix + longName;\nif (preferredName == null) {\naliases.add(name);\nreturn this;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:reset()Lorg/apache/commons/cli2/builder/GroupBuilder;",
            "method_body": "public GroupBuilder reset() {\nname = null;\ndescription = null;\noptions = new ArrayList();\nminimum = 0;\nmaximum = Integer.MAX_VALUE;\nreturn this;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:<init>()V",
            "method_body": "private ResourceHelper() {\nString bundleName = System.getProperty(PROP_LOCALE);\nif (bundleName == null) {\nbundleName = DEFAULT_BUNDLE;\nthis.prop = bundleName;\nint firstUnderscore = bundleName.indexOf('_');\nint secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);\nif (firstUnderscore != -1) {\nString language = bundleName.substring(firstUnderscore + 1, secondUnderscore);\nString country = bundleName.substring(secondUnderscore + 1);\nlocale = new Locale(language, country);\n}\nbundle = ResourceBundle.getBundle(bundleName, locale);\n}\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:<init>(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public GroupImpl(final List options,\nsuper(0, false);\nthis.name = name;\nthis.description = description;\nthis.minimum = minimum;\nthis.maximum = maximum;\nthis.options = Collections.unmodifiableList(options);\nfinal List newAnonymous = new ArrayList();\nfinal SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());\nfinal Set newPrefixes = new HashSet();\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\nif (option instanceof Argument) {\nfinal Set triggers = option.getTriggers();\nfor (Iterator j = triggers.iterator(); j.hasNext();) {\nnewOptionMap.put(j.next(), option);\nnewPrefixes.addAll(option.getPrefixes());\n}\nthis.anonymous = Collections.unmodifiableList(newAnonymous);\nthis.optionMap = Collections.unmodifiableSortedMap(newOptionMap);\nthis.prefixes = Collections.unmodifiableSet(newPrefixes);\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:withName(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/ArgumentBuilder;",
            "method_body": "public final ArgumentBuilder withName(final String newName) {\nif (newName == null) {\nif (\"\".equals(newName)) {\nthis.name = newName;\nreturn this;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:create()Lorg/apache/commons/cli2/option/DefaultOption;",
            "method_body": "public DefaultOption create()\nif (preferredName == null) {\nfinal DefaultOption option =\nreset();\nreturn option;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:setHelpTrigger(Ljava/lang/String;)V",
            "method_body": "public void setHelpTrigger(final String helpTrigger) {\nthis.helpTrigger = helpTrigger;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getResourceHelper()Lorg/apache/commons/cli2/resource/ResourceHelper;",
            "method_body": "public static ResourceHelper getResourceHelper() {\nString bundleName = System.getProperty(PROP_LOCALE);\nif (helper == null || !helper.getBundleName().equals(bundleName)) {\nhelper = new ResourceHelper();\nreturn helper;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:create()Lorg/apache/commons/cli2/Group;",
            "method_body": "public Group create() {\nfinal GroupImpl group =\nreset();\nreturn group;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:defaults(Lorg/apache/commons/cli2/WriteableCommandLine;)V",
            "method_body": "public void defaults(final WriteableCommandLine commandLine) {\nsuper.defaults(commandLine);\nfor (final Iterator i = options.iterator(); i.hasNext();) {\nfinal Option option = (Option) i.next();\noption.defaults(commandLine);\n}\nfor (final Iterator i = anonymous.iterator(); i.hasNext();) {\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:create()Lorg/apache/commons/cli2/Argument;",
            "method_body": "public final Argument create() {\nfinal Argument argument =\nreset();\nreturn argument;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli2.util.HelpFormatter:setGroup(Lorg/apache/commons/cli2/Group;)V",
            "method_body": "public void setGroup(Group group) {\nthis.group = group;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:canProcess(Lorg/apache/commons/cli2/WriteableCommandLine;Ljava/lang/String;)Z",
            "method_body": "public boolean canProcess(final WriteableCommandLine commandLine,\nif (arg == null) {\nif (optionMap.containsKey(arg)) {\nreturn true;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:<init>()V",
            "method_body": "public DefaultOptionBuilder() {\nthis(DefaultOption.DEFAULT_SHORT_PREFIX, DefaultOption.DEFAULT_LONG_PREFIX,\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:setGroup(Lorg/apache/commons/cli2/Group;)V",
            "method_body": "public void setGroup(final Group group) {\nthis.group = group;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withRequired(Z)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withRequired(final boolean newRequired) {\nthis.required = newRequired;\nreturn this;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:withName(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/GroupBuilder;",
            "method_body": "public GroupBuilder withName(final String newName) {\nthis.name = newName;\nreturn this;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withDescription(Ljava/lang/String;)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withDescription(final String newDescription) {\nthis.description = newDescription;\nreturn this;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.DefaultOptionBuilder:withArgument(Lorg/apache/commons/cli2/Argument;)Lorg/apache/commons/cli2/builder/DefaultOptionBuilder;",
            "method_body": "public DefaultOptionBuilder withArgument(final Argument newArgument) {\nthis.argument = newArgument;\nreturn this;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:withOption(Lorg/apache/commons/cli2/Option;)Lorg/apache/commons/cli2/builder/GroupBuilder;",
            "method_body": "public GroupBuilder withOption(final Option option) {\nthis.options.add(option);\nreturn this;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.ArgumentBuilder:<init>()V",
            "method_body": "public ArgumentBuilder() {\nreset();\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.cli2.builder.GroupBuilder:<init>()V",
            "method_body": "public GroupBuilder() {\nreset();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.WriteableCommandLineImpl:<init>(Lorg/apache/commons/cli2/Option;Ljava/util/List;)V",
            "method_body": "private final Map optionToProperties = new HashMap();\nprivate final List options = new ArrayList();\nprivate final Map nameToOption = new HashMap();\nprivate final Map values = new HashMap();\nprivate final Map switches = new HashMap();\nprivate final Map defaultValues = new HashMap();\nprivate final Map defaultSwitches = new HashMap();\nfinal List arguments) {\nthis.prefixes = rootOption.getPrefixes();\nthis.normalised = arguments;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.cli2.validation.FileValidator:<init>()V",
            "method_body": "private boolean readable = false;\nprivate boolean writable = false;\nprivate boolean existing = false;\nprivate boolean directory = false;\nprivate boolean file = false;\nprivate boolean hidden = false;\n* {@link java.util.List} with the {@link java.io.File} instance.",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.cli2.option.GroupImpl:getPrefixes()Ljava/util/Set;",
            "method_body": "public Set getPrefixes() {\nreturn prefixes;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.cli2.resource.ResourceHelper:getBundleName()Ljava/lang/String;",
            "method_body": "public String getBundleName() {\nreturn this.prop;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.cli2.commandline.Parser:<init>()V",
            "method_body": "private HelpFormatter helpFormatter = new HelpFormatter();\nprivate Option helpOption = null;\nprivate String helpTrigger = null;\nprivate Group group = null;\nfinal List argumentList = new LinkedList();\nfor (int i = 0; i < arguments.length; i++) {\nfinal String argument = arguments[i];\nargumentList.add(new String(argument));\nfinal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);\ngroup.defaults(commandLine);\nfinal ListIterator iterator = argumentList.listIterator();\nObject previous = null;\nwhile (group.canProcess(commandLine, iterator)) {\nfinal Object next = iterator.next();\niterator.previous();\nif (next == previous) {\nprevious = next;\ngroup.process(commandLine, iterator);\n}\nif (iterator.hasNext()) {\nif (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {\ngroup.validate(commandLine);\n}",
            "method_id": 40
        }
    ]
}