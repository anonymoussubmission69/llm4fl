{
    "bug_id": 31,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testDefaultArgName",
    "test_body": "public void testDefaultArgName()\n{\nOption option = OptionBuilder.hasArg().isRequired().create(\"f\");\n312: Options options = new Options();\noptions.addOption(option);\n315: StringWriter out = new StringWriter();\n317: HelpFormatter formatter = new HelpFormatter();\nformatter.setArgName(\"argument\");\nformatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n321: assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<usage: app -f <arg[ument]>\n> but was:<usage: app -f <arg[]>\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testDefaultArgName(HelpFormatterTest.java:321)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V",
            "method_body": "private void appendOption(final StringBuffer buff, final Option option, final boolean required)\nif (!required)\nif (option.getOpt() != null)\nbuff.append(\"-\").append(option.getOpt());\nif (option.hasArg() && option.hasArgName())\nbuff.append(option.getOpt() == null ? longOptSeparator : \" \");\nbuff.append(\"<\").append(option.getArgName()).append(\">\");\nif (!required)\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V",
            "method_body": "public void printUsage(PrintWriter pw, int width, String app, Options options)\nStringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\nfinal Collection processedGroups = new ArrayList();\nList optList = new ArrayList(options.getOptions());\nCollections.sort(optList, getOptionComparator());\nfor (Iterator i = optList.iterator(); i.hasNext();)\noption = (Option) i.next();\nOptionGroup group = options.getOptionGroup(option);\nif (group != null)\nappendOption(buff, option, option.isRequired());\nif (i.hasNext())\n}\nprintWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String name)\nthis.defaultArgName = name;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nint pos = -1;\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nelse if (startPos + width >= text.length())\nreturn -1;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:rtrim(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "protected String rtrim(String s)\nif ((s == null) || (s.length() == 0))\nint pos = s.length();\nwhile ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\nreturn s.substring(0, pos);\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.Options:addOption(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/Options;",
            "method_body": "public Options addOption(Option opt)\nString key = opt.getKey();\nif (opt.hasLongOpt())\nif (opt.isRequired())\nif (requiredOpts.contains(key))\nrequiredOpts.add(key);\nshortOpts.put(key, opt);\nreturn this;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgName(Ljava/lang/String;)V",
            "method_body": "public void setArgName(String argName)\nthis.argName = argName;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\nprivate String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setOptionalArg(Z)V",
            "method_body": "public void setOptionalArg(boolean optionalArg)\nthis.optionalArg = optionalArg;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:hasArg()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder hasArg()\nOptionBuilder.numberOfArgs = 1;\nreturn instance;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:create(Ljava/lang/String;)Lorg/apache/commons/cli/Option;",
            "method_body": "public static Option create(String opt) throws IllegalArgumentException\nOption option = null;\noption = new Option(opt, description);\noption.setLongOpt(longopt);\noption.setRequired(required);\noption.setOptionalArg(optionalArg);\noption.setArgs(numberOfArgs);\noption.setType(type);\noption.setValueSeparator(valuesep);\noption.setArgName(argName);\nOptionBuilder.reset();\n}\nreturn option;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:reset()V",
            "method_body": "private static void reset()\ndescription = null;\nargName = \"arg\";\nlongopt = null;\ntype = null;\nrequired = false;\nnumberOfArgs = Option.UNINITIALIZED;\noptionalArg = false;\nvaluesep = (char) 0;\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V",
            "method_body": "private static final long serialVersionUID = 1L;\nprivate String argName = \"arg\";\nprivate int numberOfArgs = UNINITIALIZED;\nprivate List values = new ArrayList();\nthis(opt, null, false, description);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArg()Z",
            "method_body": "public boolean hasArg()\nreturn numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getOptionComparator()Ljava/util/Comparator;",
            "method_body": "public Comparator getOptionComparator()\nreturn optionComparator;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setType(Ljava/lang/Object;)V",
            "method_body": "public void setType(Object type)\nthis.type = type;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setLongOpt(Ljava/lang/String;)V",
            "method_body": "public void setLongOpt(String longOpt)\nthis.longOpt = longOpt;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setValueSeparator(C)V",
            "method_body": "public void setValueSeparator(char sep)\nthis.valuesep = sep;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setArgs(I)V",
            "method_body": "public void setArgs(int num)\nthis.numberOfArgs = num;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.cli.Option:setRequired(Z)V",
            "method_body": "public void setRequired(boolean required)\nthis.required = required;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.cli.Option:<init>(Ljava/lang/String;Ljava/lang/String;)V",
            "method_body": "public Option(String opt, String description) throws IllegalArgumentException\nthis(opt, null, false, description);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getArgName()Ljava/lang/String;",
            "method_body": "public String getArgName()\nreturn argName;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasArgName()Z",
            "method_body": "public boolean hasArgName()\nreturn argName != null && argName.length() > 0;\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getKey()Ljava/lang/String;",
            "method_body": "String getKey()\nif (opt == null)\nreturn opt;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:isRequired()Lorg/apache/commons/cli/OptionBuilder;",
            "method_body": "public static OptionBuilder isRequired()\nOptionBuilder.required = true;\nreturn instance;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<clinit>()V",
            "method_body": "private static String longopt;\nprivate static int numberOfArgs = Option.UNINITIALIZED;\nprivate static OptionBuilder instance = new OptionBuilder();\nreset();\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.cli.OptionBuilder:<init>()V",
            "method_body": "private OptionBuilder()\n{\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.cli.Option:getOpt()Ljava/lang/String;",
            "method_body": "public String getOpt()\nreturn opt;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.cli.Option:isRequired()Z",
            "method_body": "public boolean isRequired()\nreturn required;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.cli.Option:hasLongOpt()Z",
            "method_body": "public boolean hasLongOpt()\nreturn longOpt != null;\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptionGroup(Lorg/apache/commons/cli/Option;)Lorg/apache/commons/cli/OptionGroup;",
            "method_body": "public OptionGroup getOptionGroup(Option opt)\nreturn (OptionGroup) optionGroups.get(opt.getKey());\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.cli.Options:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn Collections.unmodifiableCollection(helpOptions());\n}",
            "method_id": 34
        }
    ]
}