{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testPrintWrapped",
    "test_body": "public void testPrintWrapped()\nthrows Exception\n{\nStringBuffer sb = new StringBuffer();\nHelpFormatter hf = new HelpFormatter();\n74: String text = \"This is a test.\";\nString expected;\n77: expected = \"This is a\" + hf.getNewLine() + \"test.\";\nhf.renderWrappedText(sb, 12, 0, text);\nassertEquals(\"single line text\", expected, sb.toString());\n81: sb.setLength(0);\nexpected = \"This is a\" + hf.getNewLine() + \"    test.\";\nhf.renderWrappedText(sb, 12, 4, text);\nassertEquals(\"single line padded text\", expected, sb.toString());\n86: text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n\"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n89: sb.setLength(0);\nexpected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\nhf.getNewLine() +\n\"                        form DATE[-DATE] where DATE\" +\nhf.getNewLine() +\n\"                        has form YYYY[MM[DD]]\";\nhf.renderWrappedText(sb, 53, 24, text);\nassertEquals(\"single line padded text 2\", expected, sb.toString());\n98: text =\n\"aaaa aaaa aaaa\" + hf.getNewLine() +\n\"aaaaaa\" + hf.getNewLine() +\n\"aaaaa\";\n103: expected = text;\nsb.setLength(0);\nhf.renderWrappedText(sb, 16, 0, text);\nassertEquals(\"multi line text\", expected, sb.toString());\n108: expected =\n\"aaaa aaaa aaaa\" + hf.getNewLine() +\n\"    aaaaaa\" + hf.getNewLine() +\n\"    aaaaa\";\nsb.setLength(0);\nhf.renderWrappedText(sb, 16, 4, text);\nassertEquals(\"multi-line padded text\", expected, sb.toString());\n}\n",
    "stack_trace": "junit.framework.ComparisonFailure: single line padded text 2 expected:<...TE[-DATE] where DATE[\n] has form YYYY[MM[DD...> but was:<...TE[-DATE] where DATE[] has form YYYY[MM[DD...>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.apache.commons.cli.HelpFormatterTest.testPrintWrapped(HelpFormatterTest.java:96)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\nfinal String padding = createPadding(nextLineTabStop);\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, nextLineTabStop);\nif (pos == -1)\nsb.append(text);\nreturn sb;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nint pos = -1;\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nelse if ((startPos + width) >= text.length())\nreturn -1;\npos = startPos + width;\n&& (c != '\\n') && (c != '\\r'))\n--pos;\nif (pos > startPos)\nreturn pos;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:rtrim(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "protected String rtrim(String s)\nif ((s == null) || (s.length() == 0))\nint pos = s.length();\nwhile ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\nreturn s.substring(0, pos);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:createPadding(I)Ljava/lang/String;",
            "method_body": "protected String createPadding(int len)\nStringBuffer sb = new StringBuffer(len);\nfor (int i = 0; i < len; ++i)\nsb.append(' ');\nreturn sb.toString();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getNewLine()Ljava/lang/String;",
            "method_body": "public String getNewLine()\nreturn this.defaultNewLine;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\npublic String defaultArgName = DEFAULT_ARG_NAME;\n}",
            "method_id": 5
        }
    ]
}