{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.cli.HelpFormatterTest.testIndentedHeaderAndFooter",
    "test_body": "public void testIndentedHeaderAndFooter()\n{\n// related to CLI-207\nOptions options = new Options();\nHelpFormatter formatter = new HelpFormatter();\nString header = \"  Header1\\n  Header2\";\nString footer = \"  Footer1\\n  Footer2\";\nStringWriter out = new StringWriter();\nformatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n441: assertEquals(\n\"usage: foobar\" + EOL +",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<...e: foobar\nHeader1\n[  Header2\n\nFooter1\n]Footer2\n> but was:<...e: foobar\nHeader1\n[Header2\n\nFooter1\n]Footer2\n>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.apache.commons.cli.HelpFormatterTest.testIndentedHeaderAndFooter(HelpFormatterTest.java:441)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.cli.Options:getOptions()Ljava/util/Collection;",
            "method_body": "public Collection getOptions()\nreturn Collections.unmodifiableCollection(helpOptions());\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.cli.Options:helpOptions()Ljava/util/List;",
            "method_body": "List helpOptions()\nreturn new ArrayList(shortOpts.values());\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:<init>()V",
            "method_body": "public static final int DEFAULT_WIDTH = 74;\npublic int defaultWidth = DEFAULT_WIDTH;\npublic int defaultLeftPad = DEFAULT_LEFT_PAD;\npublic int defaultDescPad = DEFAULT_DESC_PAD;\npublic String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;\npublic String defaultNewLine = System.getProperty(\"line.separator\");\npublic String defaultOptPrefix = DEFAULT_OPT_PREFIX;\npublic String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;\nprivate String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;\npublic String defaultArgName = DEFAULT_ARG_NAME;\nprotected Comparator optionComparator = new OptionComparator();\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:getOptionComparator()Ljava/util/Comparator;",
            "method_body": "public Comparator getOptionComparator()\nreturn optionComparator;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;Z)V",
            "method_body": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,\nif ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))\nif (autoUsage)\nprintUsage(pw, width, cmdLineSyntax, options);\nif ((header != null) && (header.trim().length() > 0))\nprintWrapped(pw, width, header);\nprintOptions(pw, width, options, leftPad, descPad);\nif ((footer != null) && (footer.trim().length() > 0))\nprintWrapped(pw, width, footer);\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V",
            "method_body": "public void printUsage(PrintWriter pw, int width, String app, Options options)\nStringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\nfinal Collection processedGroups = new ArrayList();\nList optList = new ArrayList(options.getOptions());\nCollections.sort(optList, getOptionComparator());\nfor (Iterator i = optList.iterator(); i.hasNext();)\nprintWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printOptions(Ljava/io/PrintWriter;ILorg/apache/commons/cli/Options;II)V",
            "method_body": "public void printOptions(PrintWriter pw, int width, Options options,\nStringBuffer sb = new StringBuffer();\nrenderOptions(sb, width, options, leftPad, descPad);\npw.println(sb.toString());\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;ILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, String text)\nprintWrapped(pw, width, 0, text);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:printWrapped(Ljava/io/PrintWriter;IILjava/lang/String;)V",
            "method_body": "public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)\nStringBuffer sb = new StringBuffer(text.length());\nrenderWrappedText(sb, width, nextLineTabStop, text);\npw.println(sb.toString());\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad)\nfinal String lpad = createPadding(leftPad);\nfinal String dpad = createPadding(descPad);\nint max = 0;\nList prefixList = new ArrayList();\nList optList = options.helpOptions();\nCollections.sort(optList, getOptionComparator());\nfor (Iterator i = optList.iterator(); i.hasNext();)\nint x = 0;\nfor (Iterator i = optList.iterator(); i.hasNext();)\nreturn sb;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;",
            "method_body": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\nint pos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(rtrim(text));\nreturn sb;\nsb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\nif (nextLineTabStop >= width)\nfinal String padding = createPadding(nextLineTabStop);\ntext = padding + text.substring(pos).trim();\npos = findWrapPos(text, width, 0);\nif (pos == -1)\nsb.append(text);\nreturn sb;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:findWrapPos(Ljava/lang/String;II)I",
            "method_body": "protected int findWrapPos(String text, int width, int startPos)\nif (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\nreturn pos + 1;\nelse if (startPos + width >= text.length())\nreturn -1;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:createPadding(I)Ljava/lang/String;",
            "method_body": "protected String createPadding(int len)\nchar[] padding = new char[len];\nArrays.fill(padding, ' ');\nreturn new String(padding);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.cli.HelpFormatter:rtrim(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "protected String rtrim(String s)\nif ((s == null) || (s.length() == 0))\nint pos = s.length();\nwhile ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))\n--pos;\nreturn s.substring(0, pos);\n}",
            "method_id": 13
        }
    ]
}