{
    "bug_id": 1,
    "test_id": 0,
    "test_name": "org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",
    "test_body": "public void testGetLineNumberWithCR() throws Exception {\nCSVParser parser = new CSVParser(\"a\\rb\\rc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\"));\n508: assertEquals(0, parser.getLineNumber());\nassertNotNull(parser.getRecord());\nassertEquals(1, parser.getLineNumber());\nassertNotNull(parser.getRecord());",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR(CSVParserTest.java:510)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.csv.CSVParser:getRecord()Lorg/apache/commons/csv/CSVRecord;",
            "method_body": "CSVRecord getRecord() throws IOException {\nCSVRecord result = new CSVRecord(null, headerMapping);\nrecord.clear();\nreusableToken.reset();\nlexer.nextToken(reusableToken);\nswitch (reusableToken.type) {\nrecord.add(reusableToken.content.toString());\nbreak;\n} while (reusableToken.type == TOKEN);\nif (!record.isEmpty()) {\nresult = new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\nreturn result;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:read()I",
            "method_body": "public int read() throws IOException {\nint current = super.read();\nif (current == '\\n') {\nlastChar = current;\nreturn lastChar;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:<init>(CCCCZZLjava/lang/String;[Ljava/lang/String;)V",
            "method_body": "CSVFormat(\nString[] header) {\nthis.delimiter = delimiter;\nthis.encapsulator = encapsulator;\nthis.commentStart = commentStart;\nthis.escape = escape;\nthis.surroundingSpacesIgnored = surroundingSpacesIgnored;\nthis.emptyLinesIgnored = emptyLinesIgnored;\nthis.lineSeparator = lineSeparator;\nthis.header = header;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(Reader input, CSVFormat format) throws IOException {\nformat.validate();\nthis.lexer = new CSVLexer(format, new ExtendedBufferedReader(input));\nthis.headerMapping = initializeHeader(format);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:getLineNumber()I",
            "method_body": "private final Lexer lexer;\npublic int getLineNumber() {\nreturn lexer.getLineNumber();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.csv.CSVRecord:<init>([Ljava/lang/String;Ljava/util/Map;)V",
            "method_body": "CSVRecord(String[] values, Map<String, Integer> mapping) {\nthis.values = values != null ? values : EMPTY_STRING_ARRAY;\nthis.mapping = mapping;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.csv.Token:reset()Lorg/apache/commons/csv/Token;",
            "method_body": "Token reset() {\ncontent.setLength(0);\ntype = INVALID;\nisReady = false;\nreturn this;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:lookAhead()I",
            "method_body": "/*** Returns the next character in the current reader without consuming it. So\n* the next call to {@link #read()} will still return this value.\n* @return the next character\n* @throws IOException if there is an error in reading\n*/\nint lookAhead() throws IOException {\nsuper.mark(1);\nint c = super.read();\nsuper.reset();\nreturn c;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.csv.CSVParser:<init>(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)V",
            "method_body": "public CSVParser(String input, CSVFormat format) throws IOException{\nthis(new StringReader(input), format);\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.csv.CSVFormat:withLineSeparator(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;",
            "method_body": "public CSVFormat withLineSeparator(String lineSeparator) {\nreturn new CSVFormat(delimiter, encapsulator, commentStart, escape, surroundingSpacesIgnored, emptyLinesIgnored, lineSeparator, header);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:<init>(Ljava/io/Reader;)V",
            "method_body": "static final int END_OF_STREAM = -1;\nprivate int lastChar = UNDEFINED;\nprivate int lineCounter = 0;\nsuper(r);\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.csv.Lexer:getLineNumber()I",
            "method_body": "final ExtendedBufferedReader in;\nint getLineNumber() {\nreturn in.getLineNumber();\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:getLineNumber()I",
            "method_body": "private int lineCounter = 0;\nint getLineNumber() {\nreturn lineCounter;\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.csv.ExtendedBufferedReader:readAgain()I",
            "method_body": "int readAgain() {\nreturn lastChar;\n}",
            "method_id": 13
        }
    ]
}