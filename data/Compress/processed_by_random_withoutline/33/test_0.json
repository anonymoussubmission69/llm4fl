{
    "bug_id": 33,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.compressors.DetectCompressorTestCase.testDetection",
    "test_body": "91: public void testDetection() throws Exception {\n92: CompressorInputStream bzip2 = getStreamFor(\"bla.txt.bz2\"); \n93: assertNotNull(bzip2);\n94: assertTrue(bzip2 instanceof BZip2CompressorInputStream);\n95: 96: CompressorInputStream gzip = getStreamFor(\"bla.tgz\");\n97: assertNotNull(gzip);\n98: assertTrue(gzip instanceof GzipCompressorInputStream);\n99: 100: CompressorInputStream pack200 = getStreamFor(\"bla.pack\");\n101: assertNotNull(pack200);\n102: assertTrue(pack200 instanceof Pack200CompressorInputStream);\n103: 104: CompressorInputStream xz = getStreamFor(\"bla.tar.xz\");\n105: assertNotNull(xz);\n106: assertTrue(xz instanceof XZCompressorInputStream);\n107: 108: CompressorInputStream zlib = getStreamFor(\"bla.tar.deflatez\");\n109: assertNotNull(zlib);\n110: assertTrue(zlib instanceof DeflateCompressorInputStream);\n111: 112: try {\n113: factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));\n114: fail(\"No exception thrown for an empty input stream\");\n115: } catch (CompressorException e) {\n116: // expected\n117: }\n118: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.utils.IOUtils:<clinit>()V",
            "method_body": "private static final int COPY_BUF_SIZE = 8024;\nprivate static final byte[] SKIP_BUF = new byte[SKIP_BUF_SIZE];\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.compress.utils.IOUtils:readFully(Ljava/io/InputStream;[B)I",
            "method_body": "public static int readFully(InputStream input, byte[] b) throws IOException {\nreturn readFully(input, b, 0, b.length);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.compress.utils.IOUtils:readFully(Ljava/io/InputStream;[BII)I",
            "method_body": "public static int readFully(InputStream input, byte[] b, int offset, int len)\nif (len < 0 || offset < 0 || len + offset > b.length) {\nint count = 0, x = 0;\nwhile (count != len) {\nx = input.read(b, offset + count, len - count);\nif (x == -1) {\ncount += x;\nreturn count;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.CRC:<init>()V",
            "method_body": "CRC() {\ninitialiseCRC();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.CRC:<clinit>()V",
            "method_body": "private static final int crc32Table[] = {\n};",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.CRC:initialiseCRC()V",
            "method_body": "void initialiseCRC() {\nglobalCrc = 0xffffffff;\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
            "method_body": "public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\nthis.in = in;\nthis.decompressConcatenated = decompressConcatenated;\ninit(true);\ninitBlock();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:makeMaps()V",
            "method_body": "private void makeMaps() {\nfinal boolean[] inUse = this.data.inUse;\nfinal byte[] seqToUnseq = this.data.seqToUnseq;\nint nInUseShadow = 0;\nfor (int i = 0; i < 256; i++) {\nif (inUse[i]) {\nseqToUnseq[nInUseShadow++] = (byte) i;\nthis.nInUse = nInUseShadow;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:init(Z)Z",
            "method_body": "private boolean init(boolean isFirstStream) throws IOException {\nif (null == in) {\nint magic0 = this.in.read();\nif (magic0 == -1 && !isFirstStream) {\nint magic1 = this.in.read();\nint magic2 = this.in.read();\nif (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {\nint blockSize = this.in.read();\nif ((blockSize < '1') || (blockSize > '9')) {\nthis.blockSize100k = blockSize - '0';\nthis.bsLive = 0;\nthis.computedCombinedCRC = 0;\nreturn true;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:initBlock()V",
            "method_body": "private void initBlock() throws IOException {\nmagic0 = bsGetUByte();\nmagic1 = bsGetUByte();\nmagic2 = bsGetUByte();\nmagic3 = bsGetUByte();\nmagic4 = bsGetUByte();\nmagic5 = bsGetUByte();\nif (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\nif (magic0 != 0x31 || // '1'\nthis.storedBlockCRC = bsGetInt();\nthis.blockRandomised = bsR(1) == 1;\nif (this.data == null) {\nthis.data = new Data(this.blockSize100k);\ngetAndMoveToFrontDecode();\nthis.crc.initialiseCRC();\nthis.currentState = START_BLOCK_STATE;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsR(I)I",
            "method_body": "private int bsR(final int n) throws IOException {\nint bsLiveShadow = this.bsLive;\nint bsBuffShadow = this.bsBuff;\nif (bsLiveShadow < n) {\nfinal InputStream inShadow = this.in;\nint thech = inShadow.read();\nif (thech < 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\n} while (bsLiveShadow < n);\nthis.bsBuff = bsBuffShadow;\nthis.bsLive = bsLiveShadow - n;\nreturn (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsGetBit()Z",
            "method_body": "private boolean bsGetBit() throws IOException {\nint bsLiveShadow = this.bsLive;\nint bsBuffShadow = this.bsBuff;\nif (bsLiveShadow < 1) {\nint thech = this.in.read();\nif (thech < 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\nthis.bsBuff = bsBuffShadow;\nthis.bsLive = bsLiveShadow - 1;\nreturn ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsGetUByte()C",
            "method_body": "private char bsGetUByte() throws IOException {\nreturn (char) bsR(8);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsGetInt()I",
            "method_body": "private int bsGetInt() throws IOException {\nreturn (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:hbCreateDecodeTables([I[I[I[CIII)V",
            "method_body": "private static void hbCreateDecodeTables(final int[] limit,\nfor (int i = minLen, pp = 0; i <= maxLen; i++) {\nfor (int j = 0; j < alphaSize; j++) {\nif (length[j] == i) {\nperm[pp++] = j;\nfor (int i = MAX_CODE_LEN; --i > 0;) {\nbase[i] = 0;\nlimit[i] = 0;\nfor (int i = 0; i < alphaSize; i++) {\nbase[length[i] + 1]++;\nfor (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++) {\nb += base[i];\nbase[i] = b;\nfor (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\nfinal int nb = base[i + 1];\nvec += nb - b;\nb = nb;\nlimit[i] = vec - 1;\nvec <<= 1;\nfor (int i = minLen + 1; i <= maxLen; i++) {\nbase[i] = ((limit[i - 1] + 1) << 1) - base[i];\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:recvDecodingTables()V",
            "method_body": "private void recvDecodingTables() throws IOException {\nfinal Data dataShadow = this.data;\nfinal boolean[] inUse = dataShadow.inUse;\nfinal byte[] pos = dataShadow.recvDecodingTables_pos;\nfinal byte[] selector = dataShadow.selector;\nfinal byte[] selectorMtf = dataShadow.selectorMtf;\nint inUse16 = 0;\nfor (int i = 0; i < 16; i++) {\nif (bsGetBit()) {\ninUse16 |= 1 << i;\nfor (int i = 256; --i >= 0;) {\ninUse[i] = false;\nfor (int i = 0; i < 16; i++) {\nif ((inUse16 & (1 << i)) != 0) {\nfinal int i16 = i << 4;\nfor (int j = 0; j < 16; j++) {\nif (bsGetBit()) {\ninUse[i16 + j] = true;\nmakeMaps();\nfinal int alphaSize = this.nInUse + 2;\nfinal int nGroups = bsR(3);\nfinal int nSelectors = bsR(15);\nfor (int i = 0; i < nSelectors; i++) {\nint j = 0;\nwhile (bsGetBit()) {\nselectorMtf[i] = (byte) j;\nfor (int v = nGroups; --v >= 0;) {\npos[v] = (byte) v;\nfor (int i = 0; i < nSelectors; i++) {\nint v = selectorMtf[i] & 0xff;\nfinal byte tmp = pos[v];\nwhile (v > 0) {\npos[0] = tmp;\nselector[i] = tmp;\nfinal char[][] len = dataShadow.temp_charArray2d;\nfor (int t = 0; t < nGroups; t++) {\nint curr = bsR(5);\nfinal char[] len_t = len[t];\nfor (int i = 0; i < alphaSize; i++) {\nwhile (bsGetBit()) {\ncurr += bsGetBit() ? -1 : 1;\nlen_t[i] = (char) curr;\ncreateHuffmanDecodingTables(alphaSize, nGroups);\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:createHuffmanDecodingTables(II)V",
            "method_body": "private void createHuffmanDecodingTables(final int alphaSize,\nfinal Data dataShadow = this.data;\nfinal char[][] len = dataShadow.temp_charArray2d;\nfinal int[] minLens = dataShadow.minLens;\nfinal int[][] limit = dataShadow.limit;\nfinal int[][] base = dataShadow.base;\nfinal int[][] perm = dataShadow.perm;\nfor (int t = 0; t < nGroups; t++) {\nint minLen = 32;\nint maxLen = 0;\nfinal char[] len_t = len[t];\nfor (int i = alphaSize; --i >= 0;) {\nfinal char lent = len_t[i];\nif (lent > maxLen) {\nmaxLen = lent;\nif (lent < minLen) {\nminLen = lent;\n}\nhbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,\nminLens[t] = minLen;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:getAndMoveToFrontDecode()V",
            "method_body": "private void getAndMoveToFrontDecode() throws IOException {\nthis.origPtr = bsR(24);\nrecvDecodingTables();\nfinal InputStream inShadow = this.in;\nfinal Data dataShadow = this.data;\nfinal byte[] ll8 = dataShadow.ll8;\nfinal int[] unzftab = dataShadow.unzftab;\nfinal byte[] selector = dataShadow.selector;\nfinal byte[] seqToUnseq = dataShadow.seqToUnseq;\nfinal char[] yy = dataShadow.getAndMoveToFrontDecode_yy;\nfinal int[] minLens = dataShadow.minLens;\nfinal int[][] limit = dataShadow.limit;\nfinal int[][] base = dataShadow.base;\nfinal int[][] perm = dataShadow.perm;\nfinal int limitLast = this.blockSize100k * 100000;\nfor (int i = 256; --i >= 0;) {\nyy[i] = (char) i;\nunzftab[i] = 0;\nint groupNo = 0;\nint groupPos = G_SIZE - 1;\nfinal int eob = this.nInUse + 1;\nint nextSym = getAndMoveToFrontDecode0(0);\nint bsBuffShadow = this.bsBuff;\nint bsLiveShadow = this.bsLive;\nint lastShadow = -1;\nint zt = selector[groupNo] & 0xff;\nint[] base_zt = base[zt];\nint[] limit_zt = limit[zt];\nint[] perm_zt = perm[zt];\nint minLens_zt = minLens[zt];\nwhile (nextSym != eob) {\nif ((nextSym == RUNA) || (nextSym == RUNB)) {\nint s = -1;\nfor (int n = 1; true; n <<= 1) {\nif (nextSym == RUNA) {\ns += n;\n} else if (nextSym == RUNB) {\nif (groupPos == 0) {\ngroupPos--;\nint zn = minLens_zt;\nwhile (bsLiveShadow < zn) {\nfinal int thech = inShadow.read();\nif (thech >= 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\ncontinue;\nint zvec = (bsBuffShadow >> (bsLiveShadow - zn))\nbsLiveShadow -= zn;\nwhile (zvec > limit_zt[zn]) {\nzn++;\nwhile (bsLiveShadow < 1) {\nbsLiveShadow--;\nzvec = (zvec << 1)\nnextSym = perm_zt[zvec - base_zt[zn]];\nfinal byte ch = seqToUnseq[yy[0]];\nunzftab[ch & 0xff] += s + 1;\nwhile (s-- >= 0) {\nll8[++lastShadow] = ch;\nif (lastShadow >= limitLast) {\n} else {\nif (++lastShadow >= limitLast) {\nfinal char tmp = yy[nextSym - 1];\nunzftab[seqToUnseq[tmp] & 0xff]++;\nll8[lastShadow] = seqToUnseq[tmp];\nif (nextSym <= 16) {\nfor (int j = nextSym - 1; j > 0;) {\nyy[j] = yy[--j];\nyy[0] = tmp;\nif (groupPos == 0) {\ngroupPos--;\nint zn = minLens_zt;\nwhile (bsLiveShadow < zn) {\nfinal int thech = inShadow.read();\nif (thech >= 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\ncontinue;\nint zvec = (bsBuffShadow >> (bsLiveShadow - zn))\nbsLiveShadow -= zn;\nwhile (zvec > limit_zt[zn]) {\nzn++;\nwhile (bsLiveShadow < 1) {\nfinal int thech = inShadow.read();\nif (thech >= 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\ncontinue;\nbsLiveShadow--;\nzvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);\nnextSym = perm_zt[zvec - base_zt[zn]];\n}\nthis.last = lastShadow;\nthis.bsLive = bsLiveShadow;\nthis.bsBuff = bsBuffShadow;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:getAndMoveToFrontDecode0(I)I",
            "method_body": "private int getAndMoveToFrontDecode0(final int groupNo) throws IOException {\nfinal InputStream inShadow = this.in;\nfinal Data dataShadow = this.data;\nfinal int zt = dataShadow.selector[groupNo] & 0xff;\nfinal int[] limit_zt = dataShadow.limit[zt];\nint zn = dataShadow.minLens[zt];\nint zvec = bsR(zn);\nint bsLiveShadow = this.bsLive;\nint bsBuffShadow = this.bsBuff;\nwhile (zvec > limit_zt[zn]) {\nzn++;\nwhile (bsLiveShadow < 1) {\nfinal int thech = inShadow.read();\nif (thech >= 0) {\nbsBuffShadow = (bsBuffShadow << 8) | thech;\nbsLiveShadow += 8;\ncontinue;\nbsLiveShadow--;\nzvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);\nthis.bsLive = bsLiveShadow;\nthis.bsBuff = bsBuffShadow;\nreturn dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < 3) {\nif (signature[0] != 'B') {\nreturn false;\nif (signature[1] != 'Z') {\nif (signature[2] != 'h') {\nreturn true;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data:<init>(I)V",
            "method_body": "final boolean[] inUse = new boolean[256]; // 256 byte\nfinal byte[] seqToUnseq = new byte[256]; // 256 byte\nfinal byte[] selector = new byte[MAX_SELECTORS]; // 18002 byte\nfinal byte[] selectorMtf = new byte[MAX_SELECTORS]; // 18002 byte\nfinal int[] unzftab = new int[256]; // 1024 byte\nfinal int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE]; // 6192 byte\nfinal int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE]; // 6192 byte\nfinal int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE]; // 6192 byte\nfinal int[] minLens = new int[N_GROUPS]; // 24 byte\nfinal int[] cftab = new int[257]; // 1028 byte\nfinal char[] getAndMoveToFrontDecode_yy = new char[256]; // 512 byte\nfinal char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE]; // 3096\nfinal byte[] recvDecodingTables_pos = new byte[N_GROUPS]; // 6 byte\nData(int blockSize100k) {\nthis.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
            "method_body": "private static final int FHCRC = 0x02;\nprivate final byte[] buf = new byte[8192];\nprivate int bufUsed = 0;\nprivate Inflater inf = new Inflater(true);\nprivate final CRC32 crc = new CRC32();\nprivate boolean endReached = false;\nprivate final byte[] oneByte = new byte[1];\nprivate final GzipParameters parameters = new GzipParameters();\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:init(Z)Z",
            "method_body": "private boolean init(boolean isFirstMember) throws IOException {\nassert isFirstMember || decompressConcatenated;\nint magic0 = in.read();\nint magic1 = in.read();\nif (magic0 == -1 && !isFirstMember) {\nif (magic0 != 31 || magic1 != 139) {\nDataInputStream inData = new DataInputStream(in);\nint method = inData.readUnsignedByte();\nif (method != Deflater.DEFLATED) {\nint flg = inData.readUnsignedByte();\nif ((flg & FRESERVED) != 0) {\nparameters.setModificationTime(readLittleEndianInt(inData) * 1000);\nswitch (inData.readUnsignedByte()) { // extra flags\nparameters.setOperatingSystem(inData.readUnsignedByte());\nif ((flg & FEXTRA) != 0) {\nif ((flg & FNAME) != 0) {\nif ((flg & FCOMMENT) != 0) {\nif ((flg & FHCRC) != 0) {\ninf.reset();\ncrc.reset();\nreturn true;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:readLittleEndianInt(Ljava/io/DataInputStream;)J",
            "method_body": "private long readLittleEndianInt(DataInputStream inData) throws IOException {\nreturn inData.readUnsignedByte()\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < 2) {\nif (signature[0] != 31) {\nreturn false;\nif (signature[1] != -117) {\nreturn true;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipParameters:<init>()V",
            "method_body": "private int compressionLevel = Deflater.DEFAULT_COMPRESSION;\nprivate int operatingSystem = 255; // Unknown OS by default\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipParameters:setModificationTime(J)V",
            "method_body": "public void setModificationTime(long modificationTime) {\nthis.modificationTime = modificationTime;\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.gzip.GzipParameters:setOperatingSystem(I)V",
            "method_body": "public void setOperatingSystem(int operatingSystem) {\nthis.operatingSystem = operatingSystem;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorStreamFactory:<init>()V",
            "method_body": "public CompressorStreamFactory() {\nthis.decompressUntilEOF = null;\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorStreamFactory:<init>(Z)V",
            "method_body": "public CompressorStreamFactory(boolean decompressUntilEOF) {\nthis.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);\nthis.decompressConcatenated = decompressUntilEOF;\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorStreamFactory:setDecompressConcatenated(Z)V",
            "method_body": "public void setDecompressConcatenated(boolean decompressConcatenated) {\nif (this.decompressUntilEOF != null) {\nthis.decompressConcatenated = decompressConcatenated;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;",
            "method_body": "public CompressorInputStream createCompressorInputStream(final InputStream in)\nif (in == null) {\nif (!in.markSupported()) {\nfinal byte[] signature = new byte[12];\nin.mark(signature.length);\nint signatureLength = IOUtils.readFully(in, signature);\nin.reset();\nif (BZip2CompressorInputStream.matches(signature, signatureLength)) {\nreturn new BZip2CompressorInputStream(in, decompressConcatenated);\nif (GzipCompressorInputStream.matches(signature, signatureLength)) {\nreturn new GzipCompressorInputStream(in, decompressConcatenated);\nif (Pack200CompressorInputStream.matches(signature, signatureLength)) {\nreturn new Pack200CompressorInputStream(in);\nif (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {\nif (ZCompressorInputStream.matches(signature, signatureLength)) {\nif (XZUtils.matches(signature, signatureLength) &&\nreturn new XZCompressorInputStream(in, decompressConcatenated);\nif (LZMAUtils.matches(signature, signatureLength) &&\n}\nthrow new CompressorException(\"No Compressor found for the stream signature.\");\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
            "method_body": "public XZCompressorInputStream(InputStream inputStream,\nthrows IOException {\nif (decompressConcatenated) {\nin = new SingleXZInputStream(inputStream);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < XZ.HEADER_MAGIC.length) {\nreturn false;\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:<clinit>()V",
            "method_body": "static final long MASK_OFFSET = 0xa282ead8L;\nprivate static final byte[] SZ_SIGNATURE = new byte[] {\n};",
            "method_id": 34
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < SZ_SIGNATURE.length) {\nbyte[] shortenedSig = signature;\nif (signature.length > SZ_SIGNATURE.length) {\nshortenedSig = new byte[SZ_SIGNATURE.length];\nSystem.arraycopy(signature, 0, shortenedSig, 0, SZ_SIGNATURE.length);\nreturn Arrays.equals(shortenedSig, SZ_SIGNATURE);\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.FileNameUtil:<init>(Ljava/util/Map;Ljava/lang/String;)V",
            "method_body": "public FileNameUtil(Map<String, String> uncompressSuffix,\nString defaultExtension) {\nthis.uncompressSuffix = Collections.unmodifiableMap(uncompressSuffix);\nint lc = Integer.MIN_VALUE, sc = Integer.MAX_VALUE;\nint lu = Integer.MIN_VALUE, su = Integer.MAX_VALUE;\nfor (Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {\nint cl = ent.getKey().length();\nif (cl > lc) {\nlc = cl;\nif (cl < sc) {\nsc = cl;\nString u = ent.getValue();\nint ul = u.length();\nif (ul > 0) {\nif (!compressSuffix.containsKey(u)) {\ncompressSuffix.put(u, ent.getKey());\nif (ul > lu) {\nlu = ul;\nif (ul < su) {\nsu = ul;\n}\nlongestCompressedSuffix = lc;\nlongestUncompressedSuffix = lu;\nshortestCompressedSuffix = sc;\nshortestUncompressedSuffix = su;\nthis.defaultExtension = defaultExtension;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZUtils:<clinit>()V",
            "method_body": "private static volatile CachedAvailability cachedXZAvailability;\nMap<String, String> uncompressSuffix = new HashMap<String, String>();\nuncompressSuffix.put(\".txz\", \".tar\");\nuncompressSuffix.put(\".xz\", \"\");\nuncompressSuffix.put(\"-xz\", \"\");\nfileNameUtil = new FileNameUtil(uncompressSuffix, \".xz\");\ncachedXZAvailability = CachedAvailability.DONT_CACHE;\nClass.forName(\"org.osgi.framework.BundleEvent\");\n} catch (Exception ex) {\nsetCacheXZAvailablity(true);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZUtils:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < HEADER_MAGIC.length) {\nfor (int i = 0; i < HEADER_MAGIC.length; ++i) {\nif (signature[i] != HEADER_MAGIC[i]) {\nreturn false;\nreturn true;\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZUtils:isXZCompressionAvailable()Z",
            "method_body": "public static boolean isXZCompressionAvailable() {\nfinal CachedAvailability cachedResult = cachedXZAvailability;\nif (cachedResult != CachedAvailability.DONT_CACHE) {\nreturn cachedResult == CachedAvailability.CACHED_AVAILABLE;\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZUtils:internalIsXZCompressionAvailable()Z",
            "method_body": "private static boolean internalIsXZCompressionAvailable() {\nXZCompressorInputStream.matches(null, 0);\nreturn true;\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.xz.XZUtils:setCacheXZAvailablity(Z)V",
            "method_body": "public static void setCacheXZAvailablity(boolean doCache) {\nif (!doCache) {\n} else if (cachedXZAvailability == CachedAvailability.DONT_CACHE) {\nfinal boolean hasXz = internalIsXZCompressionAvailable();\ncachedXZAvailability = hasXz ? CachedAvailability.CACHED_AVAILABLE\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.lzma.LZMAUtils:<clinit>()V",
            "method_body": "private static volatile CachedAvailability cachedLZMAAvailability;\nMap<String, String> uncompressSuffix = new HashMap<String, String>();\nuncompressSuffix.put(\".lzma\", \"\");\nuncompressSuffix.put(\"-lzma\", \"\");\nfileNameUtil = new FileNameUtil(uncompressSuffix, \".lzma\");\ncachedLZMAAvailability = CachedAvailability.DONT_CACHE;\nClass.forName(\"org.osgi.framework.BundleEvent\");\n} catch (Exception ex) {\nsetCacheLZMAAvailablity(true);\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.lzma.LZMAUtils:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < HEADER_MAGIC.length) {\nfor (int i = 0; i < HEADER_MAGIC.length; ++i) {\nif (signature[i] != HEADER_MAGIC[i]) {\nreturn false;\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.lzma.LZMAUtils:internalIsLZMACompressionAvailable()Z",
            "method_body": "private static boolean internalIsLZMACompressionAvailable() {\nLZMACompressorInputStream.matches(null, 0);\nreturn true;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.lzma.LZMAUtils:setCacheLZMAAvailablity(Z)V",
            "method_body": "public static void setCacheLZMAAvailablity(boolean doCache) {\nif (!doCache) {\n} else if (cachedLZMAAvailability == CachedAvailability.DONT_CACHE) {\nfinal boolean hasLzma = internalIsLZMACompressionAvailable();\ncachedLZMAAvailability = hasLzma ? CachedAvailability.CACHED_AVAILABLE\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (signature == null || length < 3) {\nreturn false;\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:<init>(Ljava/io/InputStream;)V",
            "method_body": "public Pack200CompressorInputStream(final InputStream in)\nthis(in, Pack200Strategy.IN_MEMORY);\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:<init>(Ljava/io/InputStream;Lorg/apache/commons/compress/compressors/pack200/Pack200Strategy;)V",
            "method_body": "public Pack200CompressorInputStream(final InputStream in,\nthis(in, null, mode, null);\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:<init>(Ljava/io/InputStream;Ljava/io/File;Lorg/apache/commons/compress/compressors/pack200/Pack200Strategy;Ljava/util/Map;)V",
            "method_body": "private Pack200CompressorInputStream(final InputStream in, final File f,\nthrows IOException {\noriginalInput = in;\nstreamBridge = mode.newStreamBridge();\nJarOutputStream jarOut = new JarOutputStream(streamBridge);\nPack200.Unpacker u = Pack200.newUnpacker();\nif (props != null) {\nif (f == null) {\nu.unpack(new FilterInputStream(in) {\n}\njarOut.close();\n}",
            "method_id": 49
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:<clinit>()V",
            "method_body": "private static final int SIG_LENGTH = CAFE_DOOD.length;\nif (length < SIG_LENGTH) {\nfor (int i = 0; i < SIG_LENGTH; i++) {\nif (signature[i] != CAFE_DOOD[i]) {\nreturn false;\nreturn true;\n}",
            "method_id": 50
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nif (length < SIG_LENGTH) {\nfor (int i = 0; i < SIG_LENGTH; i++) {\nif (signature[i] != CAFE_DOOD[i]) {\nreturn false;\nreturn true;\n}",
            "method_id": 51
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200Strategy$1:newStreamBridge()Lorg/apache/commons/compress/compressors/pack200/StreamBridge;",
            "method_body": "StreamBridge newStreamBridge() {\nreturn new InMemoryCachingStreamBridge();\n}",
            "method_id": 52
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.StreamBridge:<init>(Ljava/io/OutputStream;)V",
            "method_body": "protected StreamBridge(OutputStream out) {\nsuper(out);\n}",
            "method_id": 53
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge:<init>()V",
            "method_body": "InMemoryCachingStreamBridge() {\nsuper(new ByteArrayOutputStream());\n}",
            "method_id": 54
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream$1:close()V",
            "method_body": "public void close() {\n}",
            "method_id": 55
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.z.ZCompressorInputStream:matches([BI)Z",
            "method_body": "public static boolean matches(byte[] signature, int length) {\nreturn length > 3 && signature[0] == MAGIC_1 && signature[1] == (byte) MAGIC_2;\n}",
            "method_id": 56
        },
        {
            "method_signature": "org.apache.commons.compress.compressors.CompressorException:<init>(Ljava/lang/String;)V",
            "method_body": "public CompressorException(String message) {\nsuper(message);\n}",
            "method_id": 57
        }
    ]
}