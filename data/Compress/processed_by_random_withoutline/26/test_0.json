{
    "bug_id": 26,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.utils.IOUtilsTest.skipUsingSkipAndRead",
    "test_body": "57: public void skipUsingSkipAndRead() throws Exception {\n58: skip(new StreamWrapper() {\n59: public InputStream wrap(final InputStream toWrap) {\n60: return new FilterInputStream(toWrap) {\n61: boolean skipped;\n62: public long skip(long s) throws IOException {\n63: if (!skipped) {\n64: toWrap.skip(5);\n65: skipped = true;\n66: return 5;\n67: }\n68: return 0;\n69: }\n70: };\n71: }\n72: });\n73: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J",
            "method_body": "public static long skip(InputStream input, long numToSkip) throws IOException {\nlong available = numToSkip;\nwhile (numToSkip > 0) {\nlong skipped = input.skip(numToSkip);\nif (skipped == 0) {\nbreak;\nnumToSkip -= skipped;\n}\nreturn available - numToSkip;\n}",
            "method_id": 0
        }
    ]
}