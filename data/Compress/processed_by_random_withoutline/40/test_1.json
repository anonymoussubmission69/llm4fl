{
    "bug_id": 40,
    "test_id": 1,
    "test_name": "org.apache.commons.compress.utils.BitInputStreamTest.littleEndianWithOverflow",
    "test_body": "125: public void littleEndianWithOverflow() throws Exception {\n126: ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n127: 87, // 01010111\n128: 45, // 00101101\n129: 66, // 01000010\n130: 15, // 00001111\n131: 90, // 01011010\n132: 29, // 00011101\n133: 88, // 01011000\n134: 61, // 00111101\n135: 33, // 00100001\n136: 74  // 01001010\n137: });\n138: BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n139: assertEquals(23, // 10111\n140: bin.readBits(5));\n141: assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n142: bin.readBits(63));\n143: assertEquals(1186, // 01001010-0010\n144: bin.readBits(12));\n145: assertEquals(-1 , bin.readBits(1));\n146: }\n",
    "stack_trace": "",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
            "method_body": "private final InputStream in;\nprivate long bitsCached = 0;\nprivate int bitsCachedSize = 0;\npublic BitInputStream(final InputStream in, final ByteOrder byteOrder) {\nthis.in = in;\nthis.byteOrder = byteOrder;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:<clinit>()V",
            "method_body": "private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit\nprivate static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1];\nfor (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) {\nMASKS[i] = (MASKS[i - 1] << 1) + 1;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
            "method_body": "public long readBits(final int count) throws IOException {\nif (count < 0 || count > MAXIMUM_CACHE_SIZE) {\nwhile (bitsCachedSize < count) {\nfinal long nextByte = in.read();\nif (nextByte < 0) {\nif (byteOrder == ByteOrder.LITTLE_ENDIAN) {\nbitsCached |= (nextByte << bitsCachedSize);\nbitsCached <<= 8;\nbitsCached |= nextByte;\nbitsCachedSize += 8;\n}\nif (byteOrder == ByteOrder.LITTLE_ENDIAN) {\nbitsOut = (bitsCached & MASKS[count]);\nbitsCached >>>= count;\nbitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\nbitsCachedSize -= count;\nreturn bitsOut;\n}",
            "method_id": 2
        }
    ]
}