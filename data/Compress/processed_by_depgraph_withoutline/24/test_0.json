{
    "bug_id": 24,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctal",
    "test_body": "46: public void testParseOctal() throws Exception{\n47: long value; \n48: byte [] buffer;\n49: final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n50: final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n51: final String maxOctal = \"777777777777\"; // Maximum valid octal\n52: buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n53: value = TarUtils.parseOctal(buffer,0, buffer.length);\n54: assertEquals(MAX_OCTAL_OVERFLOW, value);",
    "stack_trace": "java.lang.IllegalArgumentException: Invalid byte 55 at offset 11 in '777777777777' len=12\nat org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:132)\nat org.apache.commons.compress.archivers.tar.TarUtilsTest.testParseOctal(TarUtilsTest.java:53)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
            "method_body": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\nlong    result = 0;\nint     end = offset + length;\nint     start = offset;\nif (length < 2){\nif (buffer[start] == 0) {\nwhile (start < end){\nif (buffer[start] == ' '){\nbyte trailer = buffer[end - 1];\nif (trailer == 0 || trailer == ' '){\nthrow new IllegalArgumentException(\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
            "method_body": "private static String exceptionMessage(byte[] buffer, final int offset,\nString string = new String(buffer, offset, length);\nstring=string.replaceAll(\"\\0\", \"{NUL}\"); // Replace NULs to allow string to be printed\nfinal String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;\nreturn s;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
            "method_body": "private static final int BYTE_MASK = 255;\nstatic final ZipEncoding DEFAULT_ENCODING =\nstatic final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n};",
            "method_id": 2
        }
    ]
}