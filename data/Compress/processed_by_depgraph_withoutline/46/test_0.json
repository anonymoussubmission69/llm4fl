{
    "bug_id": 46,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters",
    "test_body": "200: public void testGettersSetters() {\n201: // X5455 is concerned with time, so let's\n202: // get a timestamp to play with (Jan 1st, 2000).\n203: final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n204: cal.set(Calendar.YEAR, 2000);\n205: cal.set(Calendar.MONTH, Calendar.JANUARY);\n206: cal.set(Calendar.DATE, 1);\n207: cal.set(Calendar.HOUR_OF_DAY, 0);\n208: cal.set(Calendar.MINUTE, 0);\n209: cal.set(Calendar.SECOND, 0);\n210: cal.set(Calendar.MILLISECOND, 0);\n211: final long timeMillis = cal.getTimeInMillis();\n212: final ZipLong time = new ZipLong(timeMillis / 1000);\n213: 214: // set too big\n215: try {\n216: // Java time is 1000 x larger (milliseconds).\n217: xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue() + 1L)));\n218: fail(\"Time too big for 32 bits!\");\n219: } catch (final IllegalArgumentException iae) {",
    "stack_trace": "junit.framework.AssertionFailedError: Time too big for 32 bits!\nat org.junit.Assert.fail(Assert.java:88)\nat org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testGettersSetters(X5455_ExtendedTimestampTest.java:218)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyTime(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V",
            "method_body": "public void setModifyTime(final ZipLong l) {\nbit0_modifyTimePresent = l != null;\nflags = (byte) (l != null ? (flags | MODIFY_TIME_BIT)\nthis.modifyTime = l;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
            "method_body": "private static ZipLong unixTimeToZipLong(long l) {\nfinal long TWO_TO_32 = 0x100000000L;\nif (l >= TWO_TO_32) {\nreturn new ZipLong(l);\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:dateToZipLong(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
            "method_body": "private static ZipLong dateToZipLong(final Date d) {\nif (d == null) { return null; }\nreturn unixTimeToZipLong(d.getTime() / 1000);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyJavaTime(Ljava/util/Date;)V",
            "method_body": "public void setModifyJavaTime(final Date d) { setModifyTime(dateToZipLong(d)); }\npublic void setModifyJavaTime(final Date d) { setModifyTime(dateToZipLong(d)); }",
            "method_id": 3
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:<clinit>()V",
            "method_body": "private static final ZipShort HEADER_ID = new ZipShort(0x5455);\npublic X5455_ExtendedTimestamp() {}",
            "method_id": 4
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:<init>()V",
            "method_body": "public X5455_ExtendedTimestamp() {}\npublic X5455_ExtendedTimestamp() {}",
            "method_id": 5
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:<init>(I)V",
            "method_body": "public ZipLong(int value) {\nthis.value = value;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:getValue()J",
            "method_body": "public long getValue() {\nreturn value;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipShort:<init>(I)V",
            "method_body": "public ZipShort (final int value) {\nthis.value = value;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.apache.commons.compress.archivers.zip.ZipLong:<init>(J)V",
            "method_body": "public ZipLong(final long value) {\nthis.value = value;\n}",
            "method_id": 9
        }
    ]
}