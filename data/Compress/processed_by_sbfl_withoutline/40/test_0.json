{
    "bug_id": 40,
    "test_id": 0,
    "test_name": "org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow",
    "test_body": "149: public void bigEndianWithOverflow() throws Exception {\n150: ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n151: 87, // 01010111\n152: 45, // 00101101\n153: 66, // 01000010\n154: 15, // 00001111\n155: 90, // 01011010\n156: 29, // 00011101\n157: 88, // 01011000\n158: 61, // 00111101\n159: 33, // 00100001\n160: 74  // 01001010\n161: });\n162: BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n163: assertEquals(10, // 01010\n164: bin.readBits(5));\n165: assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n166: bin.readBits(63));",
    "stack_trace": "junit.framework.AssertionFailedError: expected:<8274274654740644818> but was:<203824122492715986>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotEquals(Assert.java:743)\nat org.junit.Assert.assertEquals(Assert.java:118)\nat org.junit.Assert.assertEquals(Assert.java:555)\nat org.junit.Assert.assertEquals(Assert.java:542)\nat org.apache.commons.compress.utils.BitInputStreamTest.bigEndianWithOverflow(BitInputStreamTest.java:165)",
    "covered_methods": [
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
            "method_body": "private final InputStream in;\nprivate long bitsCached = 0;\nprivate int bitsCachedSize = 0;\npublic BitInputStream(final InputStream in, final ByteOrder byteOrder) {\nthis.in = in;\nthis.byteOrder = byteOrder;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:<clinit>()V",
            "method_body": "private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit\nprivate static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1];\nfor (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) {\nMASKS[i] = (MASKS[i - 1] << 1) + 1;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
            "method_body": "public long readBits(final int count) throws IOException {\nif (count < 0 || count > MAXIMUM_CACHE_SIZE) {\nwhile (bitsCachedSize < count) {\nfinal long nextByte = in.read();\nif (nextByte < 0) {\nif (byteOrder == ByteOrder.LITTLE_ENDIAN) {\nbitsCached |= (nextByte << bitsCachedSize);\nbitsCached <<= 8;\nbitsCached |= nextByte;\nbitsCachedSize += 8;\n}\nif (byteOrder == ByteOrder.LITTLE_ENDIAN) {\nbitsOut = (bitsCached & MASKS[count]);\nbitsCached >>>= count;\nbitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\nbitsCachedSize -= count;\nreturn bitsOut;\n}",
            "method_id": 2
        }
    ]
}