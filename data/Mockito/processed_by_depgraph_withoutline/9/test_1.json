{
    "bug_id": 9,
    "test_id": 1,
    "test_name": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodStubbed",
    "test_body": "public void abstractMethodStubbed() {\nAbstractThing thing = spy(AbstractThing.class);\nwhen(thing.name()).thenReturn(\"me\");\nassertEquals(\"abstract me\", thing.fullName());",
    "stack_trace": "org.mockito.exceptions.base.MockitoException:\nCannot call abstract real method on java object!\nCalling real methods is only possible when mocking non abstract method.\n//correct example:\nwhen(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\nat org.mockito.exceptions.Reporter.cannotCallAbstractRealMethod(Reporter.java:583)\nat org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:110)\nat org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:36)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest$AbstractThing$$EnhancerByMockitoWithCGLIB$$91611a84.name(<generated>)\nat org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodStubbed(CreatingMocksWithConstructorTest.java:119)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nif (defaultAnswer == null) {\nreturn this;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isUsingConstructor()Z",
            "method_body": "public boolean isUsingConstructor() {\nreturn useConstructor;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.CallsRealMethods:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn invocation.callRealMethod();\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.Mockito:spy(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public static <T> T spy(Class<T> classToSpy) {\nreturn MOCKITO_CORE.mock(classToSpy, withSettings()\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:validatedSettings(Ljava/lang/Class;Lorg/mockito/internal/creation/settings/CreationSettings;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, CreationSettings<T> source) {\nMockCreationValidator validator = new MockCreationValidator();\nvalidator.validateType(typeToMock);\nvalidator.validateExtraInterfaces(typeToMock, source.getExtraInterfaces());\nvalidator.validateMockedType(typeToMock, source.getSpiedInstance());\nvalidator.validateSerializable(typeToMock, source.isSerializable());\nvalidator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());\nCreationSettings<T> settings = new CreationSettings<T>(source);\nsettings.setMockName(new MockNameImpl(source.getName(), typeToMock));\nsettings.setTypeToMock(typeToMock);\nsettings.setExtraInterfaces(prepareExtraInterfaces(source));\nreturn settings;\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> typeToMock, MockSettings settings) {\nif (!MockSettingsImpl.class.isInstance(settings)) {\nMockSettingsImpl impl = MockSettingsImpl.class.cast(settings);\nMockCreationSettings<T> creationSettings = impl.confirm(typeToMock);\nT mock = mockUtil.createMock(creationSettings);\nmockingProgress.mockingStarted(mock, typeToMock);\nreturn mock;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:createMock(Lorg/mockito/mock/MockCreationSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings) {\nMockHandler mockHandler = new MockHandlerFactory().create(settings);\nT mock = mockMaker.createMock(settings, mockHandler);\nObject spiedInstance = settings.getSpiedInstance();\nif (spiedInstance != null) {\nreturn mock;\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerFactory:create(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "public InternalMockHandler create(MockCreationSettings settings) {\nInternalMockHandler handler = new MockHandlerImpl(settings);\nInternalMockHandler nullResultGuardian = new NullResultGuardian(handler);\nInternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);\nreturn notifier;\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.util.StringJoiner:join(Ljava/lang/StringBuilder;[Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "private static String join(StringBuilder out, Object[] linesToBreak) {\nfor (Object line : linesToBreak) {\nout.append(line.toString()).append(\"\\n\");\nint lastBreak = out.lastIndexOf(\"\\n\");\nreturn out.replace(lastBreak, lastBreak+1, \"\").toString();\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:prepareExtraInterfaces(Lorg/mockito/internal/creation/settings/CreationSettings;)Ljava/util/Set;",
            "method_body": "private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {\nSet<Class> interfaces = new HashSet<Class>(settings.getExtraInterfaces());\nif(settings.isSerializable()) {\nreturn interfaces;\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.util.StringJoiner:join([Ljava/lang/Object;)Ljava/lang/String;",
            "method_body": "public static String join(Object ... linesToBreak) {\nStringBuilder out = new StringBuilder(\"\\n\");\nreturn join(out, linesToBreak);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:<init>(Lorg/mockito/internal/creation/settings/CreationSettings;)V",
            "method_body": "public CreationSettings(CreationSettings copy) {\nthis.typeToMock = copy.typeToMock;\nthis.extraInterfaces = copy.extraInterfaces;\nthis.name = copy.name;\nthis.spiedInstance = copy.spiedInstance;\nthis.defaultAnswer = copy.defaultAnswer;\nthis.mockName = copy.mockName;\nthis.serializableMode = copy.serializableMode;\nthis.invocationListeners = copy.invocationListeners;\nthis.stubOnly = copy.stubOnly;\nthis.useConstructor = copy.isUsingConstructor();\nthis.outerClassInstance = copy.getOuterClassInstance();\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateMockedType(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void validateMockedType(Class classToMock, Object spiedInstance) {\nif (classToMock == null || spiedInstance == null) {\nreturn;\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setTypeToMock(Ljava/lang/Class;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setTypeToMock(Class<T> typeToMock) {\nthis.typeToMock = typeToMock;\nreturn this;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setExtraInterfaces(Ljava/util/Set;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setExtraInterfaces(Set<Class> extraInterfaces) {\nthis.extraInterfaces = extraInterfaces;\nreturn this;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setMockName(Lorg/mockito/mock/MockName;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setMockName(MockName mockName) {\nthis.mockName = mockName;\nreturn this;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSpiedInstance()Ljava/lang/Object;",
            "method_body": "public Object getSpiedInstance() {\nreturn spiedInstance;\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getSerializableMode()Lorg/mockito/mock/SerializableMode;",
            "method_body": "public SerializableMode getSerializableMode() {\nreturn serializableMode;\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializableMode != SerializableMode.NONE;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:confirm(Ljava/lang/Class;)Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings<T> confirm(Class<T> typeToMock) {\nreturn validatedSettings(typeToMock, this);\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.util.MockUtil:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> type) {\nreturn !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;Ljava/util/Collection;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) {\nif (extraInterfaces == null) {\nfor (Class i : extraInterfaces) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:<init>(Ljava/lang/String;)V",
            "method_body": "public MockitoException(String message) {\nsuper(message);\nfilterStackTrace();\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:<init>(Ljava/lang/String;Ljava/lang/Class;)V",
            "method_body": "public MockNameImpl(String mockName, Class classToMock) {\nif (mockName == null) {\nthis.mockName = toInstanceName(classToMock);\nthis.defaultName = true;\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:<init>(Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public MockHandlerImpl(MockCreationSettings mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress, mockSettings);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateSerializable(Ljava/lang/Class;Z)V",
            "method_body": "public void validateSerializable(Class classToMock, boolean serializable) {\nif(serializable\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!mockUtil.isTypeMockable(classToMock)) {\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {\nthis.mockHandler = mockHandler;\nthis.invocationListeners = settings.getInvocationListeners();\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.internal.handler.NullResultGuardian:<init>(Lorg/mockito/internal/InternalMockHandler;)V",
            "method_body": "public NullResultGuardian(InternalMockHandler delegate) {\nthis.delegate = delegate;\n}",
            "method_id": 32
        }
    ]
}