{
    "bug_id": 19,
    "test_id": 0,
    "test_name": "org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable",
    "test_body": "public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {\nMockitoAnnotations.initMocks(this);\nassertNull(otherSuperUnderTesting.candidate1);\nassertNotNull(otherSuperUnderTesting.candidate2);",
    "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: candidate2\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.assertTrue(Assert.java:22)\nat junit.framework.Assert.assertNull(Assert.java:277)\nat junit.framework.Assert.assertNull(Assert.java:268)\nat org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest.shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable(MockInjectionUsingSetterOrPropertyTest.java:115)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 200
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn new GlobalConfiguration().getDefaultAnswer().answer(invocation);\n}",
            "method_id": 201
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver:<init>(Ljava/util/Set;)V",
            "method_body": "public SimpleArgumentResolver(Set<Object> objects) {\nthis.objects = objects;\n}",
            "method_id": 202
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reset()V",
            "method_body": "public void reset() {\nstubbingInProgress = null;\nverificationMode = null;\ngetArgumentMatcherStorage().reset();\n}",
            "method_id": 203
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 204
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 205
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter$1:thenInject()Ljava/lang/Object;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 206
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializationReport:<init>(Ljava/lang/Object;ZZ)V",
            "method_body": "public FieldInitializationReport(Object fieldInstance, boolean wasInitialized, boolean wasInitializedUsingConstructorArgs) {\nthis.fieldInstance = fieldInstance;\nthis.wasInitialized = wasInitialized;\nthis.wasInitializedUsingConstructorArgs = wasInitializedUsingConstructorArgs;\n}",
            "method_id": 207
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;Lorg/mockito/internal/util/reflection/FieldInitializer$ConstructorArgumentResolver;)V",
            "method_body": "ParameterizedConstructorInstantiator(Object testClass, Field field, ConstructorArgumentResolver argumentResolver) {\nthis.testClass = testClass;\nthis.field = field;\nthis.argResolver = argumentResolver;\n}",
            "method_id": 208
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processIndependentAnnotations(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processIndependentAnnotations(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\ndelegate.process(classContext, testInstance);\nspyAnnotationEngine.process(classContext, testInstance);\nclassContext = classContext.getSuperclass();\n}",
            "method_id": 209
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.PropertyAndSetterInjection:injectMockCandidates(Ljava/lang/Class;Ljava/util/Set;Ljava/lang/Object;)Z",
            "method_body": "private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object instance) {\nboolean injectionOccurred = false;\nList<Field> orderedInstanceFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\ninjectionOccurred |= injectMockCandidatesOnFields(mocks, instance, injectionOccurred, orderedInstanceFields);\ninjectionOccurred |= injectMockCandidatesOnFields(mocks, instance, injectionOccurred, orderedInstanceFields);\nreturn injectionOccurred;\n}",
            "method_id": 210
        },
        {
            "method_signature": "org.mockito.internal.progress.SequenceNumber:next()I",
            "method_body": "public static synchronized int next() {\nreturn sequenceNumber++;\n}",
            "method_id": 211
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.LenientCopyTool:copyValues(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "private <T> void copyValues(T from, T mock, Class classFrom) {\nField[] fields = classFrom.getDeclaredFields();\nfor (int i = 0; i < fields.length; i++) {\nField field = fields[i];\nif (Modifier.isStatic(field.getModifiers())) {\ncontinue;\nAccessibilityChanger accessibilityChanger = new AccessibilityChanger();\naccessibilityChanger.enableAccess(field);\nfieldCopier.copyValue(from, mock, field);\naccessibilityChanger.safelyDisableAccess(field);\n}\n}",
            "method_id": 212
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.PropertyAndSetterInjection:initializeInjectMocksField(Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "private FieldInitializationReport initializeInjectMocksField(Field field, Object fieldOwner) {\nFieldInitializationReport report = null;\nreport = new FieldInitializer(fieldOwner, field).initialize();\n}\nreturn report; // never null\n}",
            "method_id": 213
        },
        {
            "method_signature": "org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper:get()Ljava/lang/Object;",
            "method_body": "public Object get() {\nreturn mockInstance;\n}",
            "method_id": 214
        },
        {
            "method_signature": "org.mockito.MockitoAnnotations:scanDeprecatedWay(Lorg/mockito/configuration/AnnotationEngine;Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "static void scanDeprecatedWay(AnnotationEngine annotationEngine, Object testClass, Class<?> clazz) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nprocessAnnotationDeprecatedWay(annotationEngine, testClass, field);\n}",
            "method_id": 215
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 216
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getInvocationListeners()Ljava/util/List;",
            "method_body": "public List<InvocationListener> getInvocationListeners() {\nreturn invocationListeners;\n}",
            "method_id": 217
        },
        {
            "method_signature": "org.mockito.Answers:answer(Lorg/mockito/invocation/InvocationOnMock;)Ljava/lang/Object;",
            "method_body": "public Object answer(InvocationOnMock invocation) throws Throwable {\nreturn implementation.answer(invocation);\n}",
            "method_id": 218
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator:instantiate()Lorg/mockito/internal/util/reflection/FieldInitializationReport;",
            "method_body": "FieldInitializationReport instantiate();\nNoArgConstructorInstantiator(Object testClass, Field field) {\nthis.testClass = testClass;\nthis.field = field;\n}\nfinal AccessibilityChanger changer = new AccessibilityChanger();\nConstructor<?> constructor = null;\nconstructor = field.getType().getDeclaredConstructor();\nchanger.enableAccess(constructor);\nfinal Object[] noArg = new Object[0];\nObject newFieldInstance = constructor.newInstance(noArg);\nnew FieldSetter(testClass, field).set(newFieldInstance);\nreturn new FieldInitializationReport(field.get(testClass), true, false);\nif(constructor != null) {\nchanger.safelyDisableAccess(constructor);\n}",
            "method_id": 219
        },
        {
            "method_signature": "org.mockito.internal.verification.DefaultRegisteredInvocations:add(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\nsynchronized (invocations) {\ninvocations.add(invocation);\n}\n}",
            "method_id": 220
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn GLOBAL_CONFIGURATION.get().getAnnotationEngine();\n}",
            "method_id": 221
        },
        {
            "method_signature": "org.mockito.internal.invocation.ArgumentsProcessor:expandVarArgs(Z[Ljava/lang/Object;)[Ljava/lang/Object;",
            "method_body": "public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] args) {\nif (!isVarArgs || new ArrayUtils().isEmpty(args) || args[args.length - 1] != null && !args[args.length - 1].getClass().isArray()) {\nreturn args == null ? new Object[0] : args;\n}",
            "method_id": 222
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:injectMocks(Ljava/lang/Object;)V",
            "method_body": "public void injectMocks(final Object testClassInstance) {\nClass<?> clazz = testClassInstance.getClass();\nSet<Field> mockDependentFields = new HashSet<Field>();\nSet<Object> mocks = newMockSafeHashSet();\nwhile (clazz != Object.class) {\nnew InjectMocksScanner(clazz).addTo(mockDependentFields);\nnew MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);\nclazz = clazz.getSuperclass();\nnew DefaultInjectionEngine().injectMocksOnFields(mockDependentFields, mocks, testClassInstance);\n}",
            "method_id": 223
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter$2:<init>(Lorg/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter;)V",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 224
        },
        {
            "method_signature": "org.mockito.internal.util.MockNameImpl:toString()Ljava/lang/String;",
            "method_body": "public String toString() {\nreturn mockName;\n}",
            "method_id": 225
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.scanner.InjectMocksScanner:assertNoAnnotations(Ljava/lang/reflect/Field;[Ljava/lang/Class;)V",
            "method_body": "void assertNoAnnotations(final Field field, final Class... annotations) {\nfor (Class annotation : annotations) {\nif (field.isAnnotationPresent(annotation)) {\n}",
            "method_id": 226
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.BeanPropertySetter:reportNoSetterFound()V",
            "method_body": "private void reportNoSetterFound() {\nif(reportNoSetterFound) {\n}",
            "method_id": 227
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:threadSafely()Lorg/mockito/internal/progress/MockingProgress;",
            "method_body": "static MockingProgress threadSafely() {\nif (mockingProgress.get() == null) {\nreturn mockingProgress.get();\n}",
            "method_id": 228
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldReader:read()Ljava/lang/Object;",
            "method_body": "public Object read() {\nreturn field.get(target);\n}",
            "method_id": 229
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:<init>(Lorg/mockito/internal/creation/settings/CreationSettings;)V",
            "method_body": "public CreationSettings(CreationSettings copy) {\nthis.typeToMock = copy.typeToMock;\nthis.extraInterfaces = copy.extraInterfaces;\nthis.name = copy.name;\nthis.spiedInstance = copy.spiedInstance;\nthis.defaultAnswer = copy.defaultAnswer;\nthis.mockName = copy.mockName;\nthis.serializableMode = copy.serializableMode;\nthis.invocationListeners = copy.invocationListeners;\nthis.stubOnly = copy.stubOnly;\nthis.useConstructor = copy.isUsingConstructor();\nthis.outerClassInstance = copy.getOuterClassInstance();\n}",
            "method_id": 230
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {\nif (!lastMatchers.isEmpty()) {\n}",
            "method_id": 231
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 232
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setExtraInterfaces(Ljava/util/Set;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setExtraInterfaces(Set<Class> extraInterfaces) {\nthis.extraInterfaces = extraInterfaces;\nreturn this;\n}",
            "method_id": 233
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:createRegisteredInvocations(Lorg/mockito/mock/MockCreationSettings;)Lorg/mockito/internal/verification/RegisteredInvocations;",
            "method_body": "private RegisteredInvocations createRegisteredInvocations(MockCreationSettings mockSettings) {\nreturn mockSettings.isStubOnly()\n}",
            "method_id": 234
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 235
        },
        {
            "method_signature": "org.mockito.Mockito:withSettings()Lorg/mockito/MockSettings;",
            "method_body": "public static MockSettings withSettings() {\nreturn new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS);\n}",
            "method_id": 236
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldCopier:copyValue(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public <T> void copyValue(T from, T to, Field field) throws IllegalAccessException {\nObject value = field.get(from);\nfield.set(to, value);\n}",
            "method_id": 237
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/filter/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\nreturn new OngoingInjecter() {\nreturn null;\n}",
            "method_id": 238
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn method.getName();\n}",
            "method_id": 239
        }
    ]
}