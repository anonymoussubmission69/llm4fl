{
    "bug_id": 7,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics",
    "test_body": "public void discoverDeepMockingOfGenerics() {\nMyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\nwhen(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n}\n",
    "stack_trace": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:407)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.extractRawTypeOf(GenericMetadataSupport.java:405)\nat org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType.rawType(GenericMetadataSupport.java:385)\nat org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(ReturnsDeepStubs.java:51)\nat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)\nat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\nat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\nat org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest$MyClass2$$EnhancerByMockitoWithCGLIB$$da894864.getNested(<generated>)\nat org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest.discoverDeepMockingOfGenerics(DeepStubFailingWhenGenricNestedAsRawTypeTest.java:26)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:cleansStackTrace()Z",
            "method_body": "public boolean cleansStackTrace() {\nreturn GLOBAL_CONFIGURATION.get().cleansStackTrace();\n}",
            "method_id": 100
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:resetInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void resetInvocationForPotentialStubbing(InvocationMatcher invocationMatcher) {\nthis.invocationForStubbing = invocationMatcher;\n}",
            "method_id": 101
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:addAnswer(Lorg/mockito/stubbing/Answer;Z)V",
            "method_body": "public void addAnswer(Answer answer, boolean isConsecutive) {\nInvocation invocation = invocationForStubbing.getInvocation();\nmockingProgress.stubbingCompleted(invocation);\nAnswersValidator answersValidator = new AnswersValidator();\nanswersValidator.validate(answer, invocation);\nsynchronized (stubbed) {\nif (isConsecutive) {\nstubbed.addFirst(new StubbedInvocationMatcher(invocationForStubbing, answer));\n}\n}",
            "method_id": 102
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CglibMockMaker:createMock(Lorg/mockito/mock/MockCreationSettings;Lorg/mockito/invocation/MockHandler;)Ljava/lang/Object;",
            "method_body": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\nInternalMockHandler mockitoHandler = cast(handler);\nnew AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);\nreturn new ClassImposterizer(new InstantiatorProvider().getInstantiator(settings)).imposterise(\n}",
            "method_id": 103
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getTypeToMock()Ljava/lang/Class;",
            "method_body": "public Class<T> getTypeToMock() {\nreturn typeToMock;\n}",
            "method_id": 104
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:firstBound()Ljava/lang/reflect/Type;",
            "method_body": "public Type firstBound() {\nreturn typeVariable.getBounds()[0]; //\n}",
            "method_id": 105
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn argumentMatcherStorage;\n}",
            "method_id": 106
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:isSerializable()Z",
            "method_body": "public boolean isSerializable() {\nreturn serializableMode != SerializableMode.NONE;\n}",
            "method_id": 107
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType:rawType()Ljava/lang/Class;",
            "method_body": "public Class<?> rawType() {\nif (rawType == null) {\nrawType = extractRawTypeOf(typeVariable);\nreturn rawType;\n}",
            "method_id": 108
        },
        {
            "method_signature": "org.mockito.internal.stubbing.answers.MethodInfo:<init>(Lorg/mockito/invocation/Invocation;)V",
            "method_body": "public MethodInfo(Invocation theInvocation) {\nthis.method = theInvocation.getMethod();\n}",
            "method_id": 109
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:getActualTypeArgumentFor(Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;",
            "method_body": "protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {\nType type = this.contextualActualTypeParameters.get(typeParameter);\nif (type instanceof TypeVariable) {\nreturn type;\n}",
            "method_id": 110
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$ReturnsDeepStubsSerializationFallback:<init>(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;)V",
            "method_body": "public ReturnsDeepStubsSerializationFallback(GenericMetadataSupport returnTypeGenericMetadata) {\nthis.returnTypeGenericMetadata = returnTypeGenericMetadata;\n}",
            "method_id": 111
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:defaultAnswer(Lorg/mockito/stubbing/Answer;)Lorg/mockito/MockSettings;",
            "method_body": "public MockSettings defaultAnswer(Answer defaultAnswer) {\nthis.defaultAnswer = defaultAnswer;\nif (defaultAnswer == null) {\nreturn this;\n}",
            "method_id": 112
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:<init>(Lorg/mockito/internal/creation/settings/CreationSettings;)V",
            "method_body": "public CreationSettings(CreationSettings copy) {\nthis.typeToMock = copy.typeToMock;\nthis.extraInterfaces = copy.extraInterfaces;\nthis.name = copy.name;\nthis.spiedInstance = copy.spiedInstance;\nthis.defaultAnswer = copy.defaultAnswer;\nthis.mockName = copy.mockName;\nthis.serializableMode = copy.serializableMode;\nthis.invocationListeners = copy.invocationListeners;\nthis.stubOnly = copy.stubOnly;\nthis.useConstructor = copy.isUsingConstructor();\nthis.outerClassInstance = copy.getOuterClassInstance();\n}",
            "method_id": 113
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:boundsOf(Ljava/lang/reflect/TypeVariable;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport$BoundedType;",
            "method_body": "private BoundedType boundsOf(TypeVariable typeParameter) {\nif (typeParameter.getBounds()[0] instanceof TypeVariable) {\nreturn new TypeVarBoundedType(typeParameter);\n}",
            "method_id": 114
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:setMockitoNamingPolicy(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public void setMockitoNamingPolicy(MethodProxy methodProxy) {\nField createInfoField = reflectOnCreateInfo(methodProxy);\ncreateInfoField.setAccessible(true);\nObject createInfo = createInfoField.get(methodProxy);\nField namingPolicyField = createInfo.getClass().getDeclaredField(\"namingPolicy\");\nnamingPolicyField.setAccessible(true);\nif (namingPolicyField.get(createInfo) == null) {\nnamingPolicyField.set(createInfo, MockitoNamingPolicy.INSTANCE);\n}\n}",
            "method_id": 115
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateConstructorUse(ZLorg/mockito/mock/SerializableMode;)V",
            "method_body": "public void validateConstructorUse(boolean usingConstructor, SerializableMode mode) {\nif (usingConstructor && mode == SerializableMode.ACROSS_CLASSLOADERS) {\n}",
            "method_id": 116
        },
        {
            "method_signature": "org.mockito.internal.handler.MockHandlerImpl:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockSettings;\n}",
            "method_id": 117
        },
        {
            "method_signature": "org.mockito.exceptions.base.MockitoException:filterStackTrace()V",
            "method_body": "private void filterStackTrace() {\nunfilteredStackTrace = getStackTrace();\nConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();\nfilter.filter(this);\n}",
            "method_id": 118
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:isTypeMockable(Ljava/lang/Class;)Z",
            "method_body": "public boolean isTypeMockable(Class<?> typeToMock) {\nreturn mockUtil.isTypeMockable(typeToMock);\n}",
            "method_id": 119
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CglibMockMaker:cast(Lorg/mockito/invocation/MockHandler;)Lorg/mockito/internal/InternalMockHandler;",
            "method_body": "private InternalMockHandler cast(MockHandler handler) {\nif (!(handler instanceof InternalMockHandler)) {\nreturn (InternalMockHandler) handler;\n}",
            "method_id": 120
        },
        {
            "method_signature": "org.mockito.internal.creation.MockSettingsImpl:getExtraInterfaces()Ljava/util/Set;",
            "method_body": "public Set<Class> getExtraInterfaces() {\nreturn extraInterfaces;\n}",
            "method_id": 121
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;Ljava/util/Collection;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) {\nif (extraInterfaces == null) {\nfor (Class i : extraInterfaces) {\n}",
            "method_id": 122
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:returnsDeepStubsAnswerUsing(Lorg/mockito/internal/util/reflection/GenericMetadataSupport;)Lorg/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs;",
            "method_body": "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\nreturn new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n}",
            "method_id": 123
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:<init>(Ljava/lang/reflect/Method;)V",
            "method_body": "public DelegatingMethod(Method method) {\nassert method != null : \"Method cannot be null\";\nthis.method = method;\n}",
            "method_id": 124
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:<init>(Lorg/mockito/internal/progress/MockingProgress;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationContainerImpl(MockingProgress mockingProgress, MockCreationSettings mockSettings) {\nthis.mockingProgress = mockingProgress;\nthis.registeredInvocations = createRegisteredInvocations(mockSettings);\n}",
            "method_id": 125
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType:<init>(Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "public TypeVarBoundedType(TypeVariable typeVariable) {\nthis.typeVariable = typeVariable;\n}",
            "method_id": 126
        },
        {
            "method_signature": "org.mockito.internal.invocation.realmethod.DefaultRealMethod:<init>(Lorg/mockito/internal/creation/util/MockitoMethodProxy;)V",
            "method_body": "public DefaultRealMethod(MockitoMethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 127
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:handle(Lorg/mockito/invocation/Invocation;)Ljava/lang/Object;",
            "method_body": "public Object handle(Invocation invocation) throws Throwable {\nObject returnedValue = mockHandler.handle(invocation);\nnotifyMethodCall(invocation, returnedValue);\nreturn returnedValue;\n} catch (Throwable t){\nnotifyMethodCallException(invocation, t);\nthrow t;\n}",
            "method_id": 128
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:hasRawExtraInterfaces()Z",
            "method_body": "public boolean hasRawExtraInterfaces() {\nreturn rawExtraInterfaces().length > 0;\n}",
            "method_id": 129
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:validateState()V",
            "method_body": "public void validateState() {\nthreadSafely().validateState();\n}",
            "method_id": 130
        },
        {
            "method_signature": "org.mockito.internal.progress.ArgumentMatcherStorageImpl:validateState()V",
            "method_body": "public void validateState() {\nif (!matcherStack.isEmpty()) {\n}",
            "method_id": 131
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:getHandler()Lorg/mockito/invocation/MockHandler;",
            "method_body": "public MockHandler getHandler() {\nreturn handler;\n}",
            "method_id": 132
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:<init>(Lorg/mockito/internal/InternalMockHandler;Lorg/mockito/mock/MockCreationSettings;)V",
            "method_body": "public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {\nthis.mockHandler = mockHandler;\nthis.invocationListeners = settings.getInvocationListeners();\n}",
            "method_id": 133
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:createMockitoMethod(Ljava/lang/reflect/Method;)Lorg/mockito/internal/invocation/MockitoMethod;",
            "method_body": "public MockitoMethod createMockitoMethod(Method method) {\nif (mockSettings.isSerializable()) {\nreturn new DelegatingMethod(method);\n}",
            "method_id": 134
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeParametersOn([Ljava/lang/reflect/TypeVariable;)V",
            "method_body": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) {\nfor (TypeVariable type : typeParameters) {\nregisterTypeVariableIfNotPresent(type);\n}",
            "method_id": 135
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:reportOngoingStubbing(Lorg/mockito/internal/progress/IOngoingStubbing;)V",
            "method_body": "public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {\nthis.iOngoingStubbing = iOngoingStubbing;\n}",
            "method_id": 136
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:setMockName(Lorg/mockito/mock/MockName;)Lorg/mockito/internal/creation/settings/CreationSettings;",
            "method_body": "public CreationSettings<T> setMockName(MockName mockName) {\nthis.mockName = mockName;\nreturn this;\n}",
            "method_id": 137
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/cglib/ClassImposterizer;)V",
            "method_body": "public Class<Factory> createProxyClass(Class<?> mockedType, Class<?>... interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\n}\nClass<?>[] allMockedTypes = prepend(mockedType, interfaces);\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(Object.class);\nenhancer.setInterfaces(allMockedTypes);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nenhancer.setSerialVersionUID(42L);\nreturn enhancer.createClass();\n}",
            "method_id": 138
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:validateState()V",
            "method_body": "public void validateState() {\nvalidateMostStuff();\nif (stubbingInProgress != null) {\n}",
            "method_id": 139
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.MethodInterceptorFilter:intercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/Object;",
            "method_body": "public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)\nif (objectMethodsGuru.isEqualsMethod(method)) {\n} else if (objectMethodsGuru.isHashCodeMethod(method)) {\n} else if (acrossJVMSerializationFeature.isWriteReplace(method)) {\nMockitoMethodProxy mockitoMethodProxy = createMockitoMethodProxy(methodProxy);\nnew CGLIBHacker().setMockitoNamingPolicy(methodProxy);\nMockitoMethod mockitoMethod = createMockitoMethod(method);\nCleanTraceRealMethod realMethod = new CleanTraceRealMethod(mockitoMethodProxy);\nInvocation invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);\nreturn handler.handle(invocation);\n}",
            "method_id": 140
        },
        {
            "method_signature": "org.mockito.internal.creation.instance.ObjenesisInstantiator:newInstance(Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T newInstance(Class<T> cls) {\nreturn objenesis.newInstance(cls);\n}",
            "method_id": 141
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:registerTypeVariablesOn(Ljava/lang/reflect/Type;)V",
            "method_body": "protected void registerTypeVariablesOn(Type classType) {\nif (!(classType instanceof ParameterizedType)) {\nreturn;\n}",
            "method_id": 142
        },
        {
            "method_signature": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs:mockitoCore()Lorg/mockito/internal/MockitoCore;",
            "method_body": "private static MockitoCore mockitoCore() {\nreturn LazyHolder.MOCKITO_CORE;\n}",
            "method_id": 143
        },
        {
            "method_signature": "org.mockito.internal.creation.cglib.CGLIBHacker:reflectOnCreateInfo(Lorg/mockito/cglib/proxy/MethodProxy;)Ljava/lang/reflect/Field;",
            "method_body": "private Field reflectOnCreateInfo(MethodProxy methodProxy) throws SecurityException, NoSuchFieldException {\nClass cglibMethodProxyClass = methodProxy.getClass();\nwhile (cglibMethodProxyClass != MethodProxy.class) {\nreturn cglibMethodProxyClass.getDeclaredField(\"createInfo\");\n}",
            "method_id": 144
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:hasAnswersForStubbing()Z",
            "method_body": "public boolean hasAnswersForStubbing() {\nreturn !answersForStubbing.isEmpty();\n}",
            "method_id": 145
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.GenericMetadataSupport:resolveGenericReturnType(Ljava/lang/reflect/Method;)Lorg/mockito/internal/util/reflection/GenericMetadataSupport;",
            "method_body": "public GenericMetadataSupport resolveGenericReturnType(Method method) {\nType genericReturnType = method.getGenericReturnType();\nif (genericReturnType instanceof Class) {\nif (genericReturnType instanceof ParameterizedType) {\nif (genericReturnType instanceof TypeVariable) {\nreturn new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);\n}",
            "method_id": 146
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:mockingStarted(Ljava/lang/Object;Ljava/lang/Class;)V",
            "method_body": "public void mockingStarted(Object mock, Class classToMock) {\nif (listener instanceof MockingStartedListener) {\nvalidateMostStuff();\n}",
            "method_id": 147
        },
        {
            "method_signature": "org.mockito.internal.handler.InvocationNotifierHandler:getMockSettings()Lorg/mockito/mock/MockCreationSettings;",
            "method_body": "public MockCreationSettings getMockSettings() {\nreturn mockHandler.getMockSettings();\n}",
            "method_id": 148
        },
        {
            "method_signature": "org.mockito.internal.creation.settings.CreationSettings:getName()Ljava/lang/String;",
            "method_body": "public String getName() {\nreturn name;\n}",
            "method_id": 149
        }
    ]
}