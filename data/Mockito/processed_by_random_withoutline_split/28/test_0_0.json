{
    "bug_id": 28,
    "test_id": 0,
    "test_name": "org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.mock_should_be_injected_once_and_in_the_best_matching_type",
    "test_body": "public void mock_should_be_injected_once_and_in_the_best_matching_type() {\nassertSame(REFERENCE, illegalInjectionExample.mockShouldNotGoInHere);\nassertSame(mockedBean, illegalInjectionExample.mockShouldGoInHere);",
    "stack_trace": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@1a6aecec> was not:<mockedBean>\nat org.junit.Assert.fail(Assert.java:88)\nat org.junit.Assert.failNotSame(Assert.java:737)\nat org.junit.Assert.assertSame(Assert.java:680)\nat org.junit.Assert.assertSame(Assert.java:691)\nat org.mockitousage.bugs.InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.mock_should_be_injected_once_and_in_the_best_matching_type(InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java:33)",
    "covered_methods": [
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMethod()Ljava/lang/reflect/Method;",
            "method_body": "public Method getMethod() {\nreturn method.getJavaMethod();\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nT mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\nmockingProgress.mockingStarted(mock, classToMock, mockSettings);\nreturn mock;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nif (annotation instanceof Mock) {\nreturn processAnnotationOn((Mock) annotation, field);\nif (annotation instanceof MockitoAnnotations.Mock) {\nif (annotation instanceof Captor) {\nreturn null;\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nField[] fields = clazz.getDeclaredFields();\nfor (Field field : fields) {\nboolean alreadyAssigned = false;\nfor(Annotation annotation : field.getAnnotations()) {\nObject mock = createMockFor(annotation, field);\nif (mock != null) {\nthrowIfAlreadyAssigned(field, alreadyAssigned);\nalreadyAssigned = true;\nnew FieldSetter(testInstance, field).set(mock);\n}\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.mockito.internal.runners.RunnerFactory:<init>(Lorg/mockito/internal/runners/util/RunnerProvider;)V",
            "method_body": "RunnerFactory(RunnerProvider runnerProvider) {\nthis.runnerProvider = runnerProvider;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.mockito.internal.configuration.GlobalConfiguration:getDefaultAnswer()Lorg/mockito/stubbing/Answer;",
            "method_body": "public Answer<Object> getDefaultAnswer() {\nreturn globalConfiguration.get().getDefaultAnswer();\n}",
            "method_id": 5
        },
        {
            "method_signature": "org.mockito.configuration.DefaultMockitoConfiguration:getAnnotationEngine()Lorg/mockito/configuration/AnnotationEngine;",
            "method_body": "public AnnotationEngine getAnnotationEngine() {\nreturn new InjectingAnnotationEngine();\n}",
            "method_id": 6
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateExtraInterfaces(Ljava/lang/Class;[Ljava/lang/Class;)V",
            "method_body": "public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {\nif (extraInterfaces == null) {\nreturn;\n}",
            "method_id": 7
        },
        {
            "method_signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl$1:withBefores(Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;)Lorg/junit/runners/model/Statement;",
            "method_body": "protected Statement withBefores(FrameworkMethod method, Object target,\nMockitoAnnotations.initMocks(target);\nreturn super.withBefores(method, target, statement);\n}",
            "method_id": 8
        },
        {
            "method_signature": "org.mockito.internal.invocation.MatchersBinder:validateMatchers(Lorg/mockito/internal/invocation/Invocation;Ljava/util/List;)V",
            "method_body": "private void validateMatchers(Invocation invocation, List<Matcher> matchers) {\nif (!matchers.isEmpty()) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "org.mockito.internal.invocation.InvocationMatcher:getInvocation()Lorg/mockito/internal/invocation/Invocation;",
            "method_body": "public Invocation getInvocation() {\nreturn this.invocation;\n}",
            "method_id": 10
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:throwIfAlreadyAssigned(Ljava/lang/reflect/Field;Z)V",
            "method_body": "void throwIfAlreadyAssigned(Field field, boolean alreadyAssigned) {\nif (alreadyAssigned) {\n}",
            "method_id": 11
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> clazz, Object testInstance) {\nprocessIndependentAnnotations(testInstance.getClass(), testInstance);\nprocessInjectMocks(testInstance.getClass(), testInstance);\n}",
            "method_id": 12
        },
        {
            "method_signature": "org.mockito.internal.runners.JUnit45AndHigherRunnerImpl:run(Lorg/junit/runner/notification/RunNotifier;)V",
            "method_body": "public void run(final RunNotifier notifier) {\nnotifier.addListener(new FrameworkUsageValidator(notifier));\nrunner.run(notifier);\n}",
            "method_id": 13
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:imposterise(Lorg/mockito/cglib/proxy/MethodInterceptor;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/Object;",
            "method_body": "public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancillaryTypes) {\nsetConstructorsAccessible(mockedType, true);\nClass<?> proxyClass = createProxyClass(mockedType, ancillaryTypes);\nreturn mockedType.cast(createProxy(proxyClass, interceptor));\nsetConstructorsAccessible(mockedType, false);\n}",
            "method_id": 14
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer:createProxy(Ljava/lang/Class;Lorg/mockito/cglib/proxy/MethodInterceptor;)Ljava/lang/Object;",
            "method_body": "private Object createProxy(Class<?> proxyClass, final MethodInterceptor interceptor) {\nFactory proxy = (Factory) objenesis.newInstance(proxyClass);\nproxy.setCallbacks(new Callback[] {interceptor, SerializableNoOp.SERIALIZABLE_INSTANCE });\nreturn proxy;\n}",
            "method_id": 15
        },
        {
            "method_signature": "org.mockito.internal.stubbing.InvocationContainerImpl:setInvocationForPotentialStubbing(Lorg/mockito/internal/invocation/InvocationMatcher;)V",
            "method_body": "public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {\nregisteredInvocations.add(invocation.getInvocation());\nthis.invocationForStubbing = invocation;\n}",
            "method_id": 16
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:getMethodProxy()Lorg/mockito/cglib/proxy/MethodProxy;",
            "method_body": "public MethodProxy getMethodProxy() {\nreturn methodProxy;\n}",
            "method_id": 17
        },
        {
            "method_signature": "org.mockito.internal.debugging.Location:<init>(Lorg/mockito/internal/exceptions/base/StackTraceFilter;)V",
            "method_body": "public Location(StackTraceFilter stackTraceFilter) {\nthis.stackTraceFilter = stackTraceFilter;\nstackTraceHolder = new Throwable();\n}",
            "method_id": 18
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:safelyDisableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void safelyDisableAccess(AccessibleObject accessibleObject) {\nassert wasAccessible != null;\naccessibleObject.setAccessible(wasAccessible);\n}\n}",
            "method_id": 19
        },
        {
            "method_signature": "org.mockito.internal.util.ObjectMethodsGuru:isEqualsMethod(Ljava/lang/reflect/Method;)Z",
            "method_body": "public boolean isEqualsMethod(Method method) {\nreturn method.getName().equals(\"equals\") && method.getParameterTypes().length == 1 && method.getParameterTypes()[0] == Object.class;\n}",
            "method_id": 20
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.TypeBasedCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\nList<Object> mockTypeMatches = new ArrayList<Object>();\nfor (Object mock : mocks) {\nif (field.getType().isAssignableFrom(mock.getClass())) {\nmockTypeMatches.add(mock);\n}\nreturn next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}",
            "method_id": 21
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:<init>(Ljava/lang/Object;Ljava/lang/reflect/Field;)V",
            "method_body": "public FieldInitializer(Object testClass, Field field) {\nif(new FieldReader(testClass, field).isNull()) {\nthis.testClass = testClass;\nthis.field = field;\n}",
            "method_id": 22
        },
        {
            "method_signature": "org.mockito.internal.progress.MockingProgressImpl:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nif (verificationMode == null) {\nreturn null;\n}",
            "method_id": 23
        },
        {
            "method_signature": "org.mockito.internal.invocation.Invocation:getMock()Ljava/lang/Object;",
            "method_body": "public Object getMock() {\nreturn mock;\n}",
            "method_id": 24
        },
        {
            "method_signature": "org.mockito.internal.util.MockCreationValidator:validateType(Ljava/lang/Class;)V",
            "method_body": "public void validateType(Class classToMock) {\nif (!isTypeMockable(classToMock)) {\n}",
            "method_id": 25
        },
        {
            "method_signature": "org.mockito.internal.MockHandler:<init>(Lorg/mockito/internal/creation/MockSettingsImpl;)V",
            "method_body": "public MockHandler(MockSettingsImpl mockSettings) {\nthis.mockSettings = mockSettings;\nthis.mockingProgress = new ThreadSafeMockingProgress();\nthis.matchersBinder = new MatchersBinder();\nthis.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);\n}",
            "method_id": 26
        },
        {
            "method_signature": "org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "public void process(Class<?> context, Object testInstance) {\nField[] fields = context.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(Spy.class)) {\n}",
            "method_id": 27
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.AccessibilityChanger:enableAccess(Ljava/lang/reflect/AccessibleObject;)V",
            "method_body": "public void enableAccess(AccessibleObject accessibleObject) {\nwasAccessible = accessibleObject.isAccessible();\naccessibleObject.setAccessible(true);\n}",
            "method_id": 28
        },
        {
            "method_signature": "org.mockito.internal.MockitoCore:validateMockitoUsage()V",
            "method_body": "public void validateMockitoUsage() {\nmockingProgress.validateState();\n}",
            "method_id": 29
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1:<init>(Lorg/mockito/internal/configuration/injection/FinalMockCandidateFilter;Ljava/lang/Object;Ljava/lang/reflect/Field;Ljava/lang/Object;)V",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\n}",
            "method_id": 30
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMockitoMethodProxy:<init>(Lorg/mockito/cglib/proxy/MethodProxy;)V",
            "method_body": "public DelegatingMockitoMethodProxy(MethodProxy methodProxy) {\nthis.methodProxy = methodProxy;\n}",
            "method_id": 31
        },
        {
            "method_signature": "org.mockito.runners.MockitoJUnitRunner:run(Lorg/junit/runner/notification/RunNotifier;)V",
            "method_body": "public void run(final RunNotifier notifier) {\nrunner.run(notifier);\n}",
            "method_id": 32
        },
        {
            "method_signature": "org.mockito.internal.configuration.DefaultAnnotationEngine:processAnnotationOn(Lorg/mockito/Mock;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object processAnnotationOn(Mock annotation, Field field) {\nMockSettings mockSettings = Mockito.withSettings();\nif (annotation.extraInterfaces().length > 0) { // never null\nif (\"\".equals(annotation.name())) {\nmockSettings.name(field.getName());\nmockSettings.defaultAnswer(annotation.answer().get());\nreturn Mockito.mock(field.getType(), mockSettings);\n}",
            "method_id": 33
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.FinalMockCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {\nif(mocks.size() == 1) {\nfinal Object matchingMock = mocks.iterator().next();\nreturn new OngoingInjecter() {\nif (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\nnew FieldSetter(fieldInstance, field).set(matchingMock);\n}\nreturn matchingMock;\n}",
            "method_id": 34
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.ClassImposterizer$3:<init>(Lorg/mockito/internal/creation/jmock/ClassImposterizer;)V",
            "method_body": "private Class<?> createProxyClass(Class<?> mockedType, Class<?>...interfaces) {\nif (mockedType == Object.class) {\nEnhancer enhancer = new Enhancer() {\nenhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));\nenhancer.setUseFactory(true);\nif (mockedType.isInterface()) {\nenhancer.setSuperclass(mockedType);\nenhancer.setInterfaces(interfaces);\nenhancer.setCallbackTypes(new Class[]{MethodInterceptor.class, NoOp.class});\nenhancer.setCallbackFilter(IGNORE_BRIDGE_METHODS);\nif (mockedType.getSigners() != null) {\nenhancer.setNamingPolicy(MockitoNamingPolicy.INSTANCE);\nreturn enhancer.createClass();\n}",
            "method_id": 35
        },
        {
            "method_signature": "org.mockito.internal.util.reflection.FieldInitializer:acquireFieldInstance(Ljava/lang/Object;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "private Object acquireFieldInstance(Object testClass, Field field) throws IllegalAccessException {\nObject fieldInstance = field.get(testClass);\nif(fieldInstance != null) {\nreturn fieldInstance;\n}",
            "method_id": 36
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:createMockFor(Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Field;)Ljava/lang/Object;",
            "method_body": "public Object createMockFor(Annotation annotation, Field field) {\nreturn delegate.createMockFor(annotation, field);\n}",
            "method_id": 37
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:processInjectMocks(Ljava/lang/Class;Ljava/lang/Object;)V",
            "method_body": "private void processInjectMocks(final Class<?> clazz, final Object testInstance) {\nClass<?> classContext = clazz;\nwhile (classContext != Object.class) {\nField[] fields = classContext.getDeclaredFields();\nfor (Field field : fields) {\nif (field.isAnnotationPresent(InjectMocks.class)) {\nassertNoAnnotations(field, Mock.class, MockitoAnnotations.Mock.class, Captor.class);\ninjectMocks(testInstance);\nclassContext = classContext.getSuperclass();\n}\n}",
            "method_id": 38
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:pullVerificationMode()Lorg/mockito/verification/VerificationMode;",
            "method_body": "public VerificationMode pullVerificationMode() {\nreturn threadSafely().pullVerificationMode();\n}",
            "method_id": 39
        },
        {
            "method_signature": "org.mockito.internal.creation.jmock.SearchingClassLoader:combineLoadersOf(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/ClassLoader;",
            "method_body": "private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others) {\nList<ClassLoader> loaders = new ArrayList<ClassLoader>();\naddIfNewElement(loaders, first.getClassLoader());\nfor (Class<?> c : others) {\naddIfNewElement(loaders, c.getClassLoader());\naddIfNewElement(loaders, SearchingClassLoader.class.getClassLoader());\naddIfNewElement(loaders, currentThread().getContextClassLoader());\nreturn combine(loaders);\n}",
            "method_id": 40
        },
        {
            "method_signature": "org.mockito.internal.configuration.injection.NameBasedCandidateFilter:filterCandidate(Ljava/util/Collection;Ljava/lang/reflect/Field;Ljava/lang/Object;)Lorg/mockito/internal/configuration/injection/OngoingInjecter;",
            "method_body": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\nList<Object> mockNameMatches = new ArrayList<Object>();\nif(mocks.size() > 1) {\nreturn next.filterCandidate(mocks, field, fieldInstance);\n}",
            "method_id": 41
        },
        {
            "method_signature": "org.mockito.internal.creation.DelegatingMethod:getReturnType()Ljava/lang/Class;",
            "method_body": "public Class<?> getReturnType() {\nreturn method.getReturnType();\n}",
            "method_id": 42
        },
        {
            "method_signature": "org.mockito.Mockito:validateMockitoUsage()V",
            "method_body": "public static void validateMockitoUsage() {\nMOCKITO_CORE.validateMockitoUsage();\n}",
            "method_id": 43
        },
        {
            "method_signature": "org.mockito.internal.configuration.InjectingAnnotationEngine:scanMocks(Ljava/lang/Object;Ljava/lang/Class;)Ljava/util/Set;",
            "method_body": "private static Set<Object> scanMocks(final Object testClass, final Class<?> clazz) {\nSet<Object> mocks = new HashSet<Object>();\nfor (Field field : clazz.getDeclaredFields()) {\nif (null != field.getAnnotation(Spy.class) || null != field.getAnnotation(org.mockito.Mock.class)\nObject fieldInstance = null;\nboolean wasAccessible = field.isAccessible();\nfield.setAccessible(true);\nfieldInstance = field.get(testClass);\nfield.setAccessible(wasAccessible);\n}\nif (fieldInstance != null) {\nmocks.add(fieldInstance);\nreturn mocks;\n}",
            "method_id": 44
        },
        {
            "method_signature": "org.mockito.internal.runners.util.RunnerProvider:newInstance(Ljava/lang/String;Ljava/lang/Class;)Lorg/mockito/internal/runners/RunnerImpl;",
            "method_body": "public RunnerImpl newInstance(String runnerClassName, Class<?> constructorParam) throws Exception {\nClass<?> runnerClass = Class.forName(runnerClassName);\nconstructor = runnerClass.getConstructor(Class.class.getClass());\n}\nreturn (RunnerImpl) constructor.newInstance(constructorParam);\n}",
            "method_id": 45
        },
        {
            "method_signature": "org.mockito.Mockito:mock(Ljava/lang/Class;Lorg/mockito/MockSettings;)Ljava/lang/Object;",
            "method_body": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\nreturn MOCKITO_CORE.mock(classToMock, mockSettings);\n}",
            "method_id": 46
        },
        {
            "method_signature": "org.mockito.internal.progress.ThreadSafeMockingProgress:getArgumentMatcherStorage()Lorg/mockito/internal/progress/ArgumentMatcherStorage;",
            "method_body": "public ArgumentMatcherStorage getArgumentMatcherStorage() {\nreturn threadSafely().getArgumentMatcherStorage();\n}",
            "method_id": 47
        },
        {
            "method_signature": "org.mockito.internal.runners.util.FrameworkUsageValidator:<init>(Lorg/junit/runner/notification/RunNotifier;)V",
            "method_body": "public FrameworkUsageValidator(RunNotifier notifier) {\nthis.notifier = notifier;\n}",
            "method_id": 48
        },
        {
            "method_signature": "org.mockito.internal.verification.RegisteredInvocations:add(Lorg/mockito/internal/invocation/Invocation;)V",
            "method_body": "public void add(Invocation invocation) {\ninvocations.add(invocation);\n}",
            "method_id": 49
        }
    ]
}