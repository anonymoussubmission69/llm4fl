{
    "bug_id": 23,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForID_String_old",
    "test_body": "243: public void testForID_String_old() {\n244: Map<String, String> map = new LinkedHashMap<String, String>();\n245: map.put(\"GMT\", \"UTC\");\n246: map.put(\"WET\", \"WET\");\n247: map.put(\"CET\", \"CET\");\n248: map.put(\"MET\", \"CET\");\n249: map.put(\"ECT\", \"CET\");\n250: map.put(\"EET\", \"EET\");\n251: map.put(\"MIT\", \"Pacific/Apia\");\n252: map.put(\"HST\", \"Pacific/Honolulu\");\n253: map.put(\"AST\", \"America/Anchorage\");\n254: map.put(\"PST\", \"America/Los_Angeles\");\n255: map.put(\"MST\", \"America/Denver\");\n256: map.put(\"PNT\", \"America/Phoenix\");\n257: map.put(\"CST\", \"America/Chicago\");\n258: map.put(\"EST\", \"America/New_York\");\n259: map.put(\"IET\", \"America/Indiana/Indianapolis\");\n260: map.put(\"PRT\", \"America/Puerto_Rico\");\n261: map.put(\"CNT\", \"America/St_Johns\");\n262: map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n263: map.put(\"BET\", \"America/Sao_Paulo\");\n264: map.put(\"ART\", \"Africa/Cairo\");\n265: map.put(\"CAT\", \"Africa/Harare\");\n266: map.put(\"EAT\", \"Africa/Addis_Ababa\");\n267: map.put(\"NET\", \"Asia/Yerevan\");\n268: map.put(\"PLT\", \"Asia/Karachi\");\n269: map.put(\"IST\", \"Asia/Kolkata\");\n270: map.put(\"BST\", \"Asia/Dhaka\");\n271: map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n272: map.put(\"CTT\", \"Asia/Shanghai\");\n273: map.put(\"JST\", \"Asia/Tokyo\");\n274: map.put(\"ACT\", \"Australia/Darwin\");\n275: map.put(\"AET\", \"Australia/Sydney\");\n276: map.put(\"SST\", \"Pacific/Guadalcanal\");\n277: map.put(\"NST\", \"Pacific/Auckland\");\n278: for (String key : map.keySet()) {\n279: String value = map.get(key);\n280: TimeZone juZone = TimeZone.getTimeZone(key);\n281: DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n282: assertEquals(value, zone.getID());\n283: //            System.out.println(juZone);",
    "stack_trace": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZone.testForID_String_old(TestDateTimeZone.java:282)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
            "method_id": 0
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\nfinal String id = zone.getID();\nif (id.equals(\"UTC\")) {\nDateTimeZone dtz = null;\nString convId = getConvertedId(id);\nif (convId != null) {\ndtz = cProvider.getZone(convId);\nif (dtz == null) {\nif (dtz != null) {\nreturn dtz;\n}",
            "method_id": 1
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
            "method_body": "private static synchronized String getConvertedId(String id) {\nMap<String, String> map = cZoneIdConversion;\nif (map == null) {\nreturn map.get(id);\n}",
            "method_id": 2
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
            "method_body": "public final String getID() {\nreturn iID;\n}",
            "method_id": 3
        },
        {
            "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
            "method_id": 4
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
            "method_id": 5
        }
    ]
}