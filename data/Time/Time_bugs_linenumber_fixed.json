{
    "projects": [
        {
            "name": "Time",
            "bugs": [
                {
                    "bug_id": 1,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray",
                            "test_body": "260: public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n261: int[] values = new int[] {1, 1, 1};\n262: DateTimeFieldType[] types = new DateTimeFieldType[] {\n263: DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n264: try {\n265: new Partial(types, values);\n266: fail();\n267: } catch (IllegalArgumentException ex) {\n268: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n269: }\n270: 271: types = new DateTimeFieldType[] {\n272: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n273: try {\n274: new Partial(types, values);\n275: fail();\n276: } catch (IllegalArgumentException ex) {\n277: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n278: }\n279: 280: types = new DateTimeFieldType[] {\n281: DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n282: try {\n283: new Partial(types, values);\n284: fail();\n285: } catch (IllegalArgumentException ex) {\n286: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n287: }\n288: 289: types = new DateTimeFieldType[] {\n290: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n291: try {\n292: new Partial(types, values);\n293: fail();\n294: } catch (IllegalArgumentException ex) {\n295: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n296: }\n297: 298: types = new DateTimeFieldType[] {\n299: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n300: try {\n301: new Partial(types, values);\n302: fail();\n303: } catch (IllegalArgumentException ex) {\n304: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n305: }\n306: 307: types = new DateTimeFieldType[] {\n308: DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n309: try {\n310: new Partial(types, values);\n311: fail();\n312: } catch (IllegalArgumentException ex) {\n313: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n314: }\n315: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "310: public int size() {\n311: return iTypes.length;\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "160: public long getUnitMillis() {\n161: return iUnitMillis;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "344: public int getMaximumValue() {\n345: return iMax;\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n286: return chronology.eras();\n292: return chronology.years();\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMinimumValue()I",
                                    "method_body": "135: public int getMinimumValue() {\n136: return DateTimeConstants.BCE;\n137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "189: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n190: super();\n191: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n192: iChronology = chronology;\n193: if (types == null) {\n196: if (values == null) {\n199: if (values.length != types.length) {\n202: if (types.length == 0) {\n207: for (int i = 0; i < types.length; i++) {\n208: if (types[i] == null) {\n212: DurationField lastUnitField = null;\n213: for (int i = 0; i < types.length; i++) {\n214: DateTimeFieldType loopType = types[i];\n215: DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n216: if (i > 0) {\n217: int compare = lastUnitField.compareTo(loopUnitField);\n218: if (compare < 0) {\n219: throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n221: } else if (compare == 0) {\n245: lastUnitField = loopUnitField;\n248: iTypes = (DateTimeFieldType[]) types.clone();\n249: chronology.validate(this, values);\n250: iValues = (int[]) values.clone();\n251: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n484: return chronology.era();\n492: return chronology.year();\n496: return chronology.monthOfYear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "339: public int getMinimumValue() {\n340: return MIN;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n153: return -1;\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "362: public static DateTimeFieldType era() {\n363: return ERA_TYPE;\n364: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "226: public int compareTo(DurationField durationField) {\n227: if (durationField.isSupported()) {\n228: return 1;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
                                    "method_body": "115: public int getMinimumValue() {\n116: return iChronology.getMinYear();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n285: return ISOChronology.getInstance();\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMaximumValue()I",
                                    "method_body": "139: public int getMaximumValue() {\n140: return DateTimeConstants.CE;\n141: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "334: protected DateTimeField getField(int index, Chronology chrono) {\n335: return iTypes[index].getField(chrono);\n336: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
                                    "method_body": "119: public int getMaximumValue() {\n120: return iChronology.getMaxYear();\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[I)V",
                                    "method_body": "174: public Partial(DateTimeFieldType[] types, int[] values) {\n175: this(types, values, null);\n176: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "322: public Chronology getChronology() {\n323: return iChronology;\n324: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 2,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange",
                            "test_body": "467: public void testWith_baseAndArgHaveNoRange() {\n468: Partial test = new Partial(DateTimeFieldType.year(), 1);\n469: Partial result = test.with(DateTimeFieldType.era(), 1);\n470: assertEquals(2, result.size());\n471: assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n472: assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n473: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "310: public int size() {\n311: return iTypes.length;\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "456: public DurationFieldType getRangeDurationType() {\n457: return iRangeType;\n458: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
                                    "method_body": "428: public Partial with(DateTimeFieldType fieldType, int value) {\n429: if (fieldType == null) {\n432: int index = indexOf(fieldType);\n433: if (index == -1) {\n434: DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n435: int[] newValues = new int[newTypes.length];\n438: int i = 0;\n439: DurationField unitField = fieldType.getDurationType().getField(iChronology);\n440: if (unitField.isSupported()) {\n458: System.arraycopy(iTypes, 0, newTypes, 0, i);\n459: System.arraycopy(iValues, 0, newValues, 0, i);\n460: newTypes[i] = fieldType;\n461: newValues[i] = value;\n462: System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n463: System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n466: Partial newPartial = new Partial(newTypes, newValues, iChronology);\n467: iChronology.validate(newPartial, newValues);\n468: return newPartial;\n476: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "226: public int compareTo(DurationField durationField) {\n227: return 0;\n228: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "334: protected DateTimeField getField(int index, Chronology chrono) {\n335: return iTypes[index].getField(chrono);\n336: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "189: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n190: super();\n191: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n192: iChronology = chronology;\n193: if (types == null) {\n196: if (values == null) {\n199: if (values.length != types.length) {\n202: if (types.length == 0) {\n207: for (int i = 0; i < types.length; i++) {\n208: if (types[i] == null) {\n212: DurationField lastUnitField = null;\n213: for (int i = 0; i < types.length; i++) {\n214: DateTimeFieldType loopType = types[i];\n215: DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n216: if (i > 0) {\n217: int compare = lastUnitField.compareTo(loopUnitField);\n218: if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n221: } else if (compare == 0) {\n222: if (types[i - 1].getRangeDurationType() == null) {\n223: if (loopType.getRangeDurationType() == null) {\n224: throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n245: lastUnitField = loopUnitField;\n251: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "138: public Partial(DateTimeFieldType type, int value) {\n139: this(type, value, null);\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V",
                                    "method_body": "152: public Partial(DateTimeFieldType type, int value, Chronology chronology) {\n153: super();\n154: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n155: iChronology = chronology;\n156: if (type == null) {\n159: iTypes = new DateTimeFieldType[] {type};\n160: iValues = new int[] {value};\n161: chronology.validate(this, iValues);\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "169: public int indexOf(DateTimeFieldType type) {\n170: for (int i = 0, isize = size(); i < isize; i++) {\n171: if (getFieldType(i) == type) {\n175: return -1;\n176: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "345: public DateTimeFieldType getFieldType(int index) {\n346: return iTypes[index];\n347: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "362: public static DateTimeFieldType era() {\n363: return ERA_TYPE;\n364: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
                                    "method_body": "115: public int getMinimumValue() {\n116: return iChronology.getMinYear();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n285: return ISOChronology.getInstance();\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n286: return chronology.eras();\n292: return chronology.years();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
                                    "method_body": "119: public int getMaximumValue() {\n120: return iChronology.getMaxYear();\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "322: public Chronology getChronology() {\n323: return iChronology;\n324: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 3,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero",
                            "test_body": "295: public void testAddWeeks_int_dstOverlapWinter_addZero() {\n296: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n297: test.addHours(1);\n298: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n299: test.addWeeks(0);\n300: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n301: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "72: public int get(long instant) {\n73: return iChronology.getMonthOfYear(instant);\n74: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "905: public int getOffsetFromLocal(long instantLocal) {\n907: final int offsetLocal = getOffset(instantLocal);\n909: final long instantAdjusted = instantLocal - offsetLocal;\n910: final int offsetAdjusted = getOffset(instantAdjusted);\n912: if (offsetLocal != offsetAdjusted) {\n925: } else if (offsetLocal >= 0) {\n926: long prev = previousTransition(instantAdjusted);\n927: if (prev < instantAdjusted) {\n928: int offsetPrev = getOffset(prev);\n929: int diff = offsetPrev - offsetLocal;\n930: if (instantAdjusted - prev <= diff) {\n931: return offsetPrev;\n936: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n473: super.setMillis(instant);\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "401: int getYear(long instant) {\n407: long unitMillis = getAverageMillisPerYearDividedByTwo();\n408: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n409: if (i2 < 0) {\n412: int year = (int) (i2 / unitMillis);\n414: long yearStart = getYearMillis(year);\n415: long diff = instant - yearStart;\n417: if (diff < 0) {\n419: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n436: return year;\n437: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "78: public long set(long instant, int value) {\n79: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n81: return instant + (value - get(instant)) * iUnitMillis;\n82: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "468: public void printTo(StringBuffer buf, ReadableInstant instant) {\n469: long millis = DateTimeUtils.getInstantMillis(instant);\n470: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n471: printTo(buf, millis, chrono);\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n213: return zone;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "627: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n628: DateTimePrinter printer = requirePrinter();\n629: chrono = selectChronology(chrono);\n632: DateTimeZone zone = chrono.getZone();\n633: int offset = zone.getOffset(instant);\n634: long adjustedInstant = instant + offset;\n635: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n641: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "450: abstract int getMonthOfYear(long millis, int year);\n456: int year = getYear(millis);\n457: int month = getMonthOfYear(millis, year);\n458: return getDayOfMonth(millis, year, month);\n459: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "442: int getMonthOfYear(long millis) {\n443: return getMonthOfYear(millis, getYear(millis));\n444: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long instant) {\n80: if (instant >= 0) {\n81: return (int) ((instant / getUnitMillis()) % iRange);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "707: abstract long getAverageMillisPerYear();\n746: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n747: if (info == null || info.iYear != year) {\n751: return info;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "666: private DateTimePrinter requirePrinter() {\n667: DateTimePrinter printer = iPrinter;\n668: if (printer == null) {\n671: return printer;\n672: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "475: int getDayOfMonth(long millis, int year, int month) {\n476: long dateMillis = getYearMillis(year);\n477: dateMillis += getTotalMillisByYearMonth(year, month);\n478: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n479: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "141: public DurationField getDurationField() {\n142: return iUnitField;\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "298: public long set(long instant, int month) {\n299: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n301: int thisYear = iChronology.getYear(instant);\n303: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n304: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n305: if (thisDom > maxDom) {\n310: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1285: public boolean equals(Object obj) {\n1286: if (this == obj) {\n1289: if (obj instanceof DSTZone) {\n1290: DSTZone other = (DSTZone)obj;\n1291: return\n1298: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "134: public DateTimeZone getZone(String id) {\n135: if (id == null) {\n139: Object obj = iZoneInfoMap.get(id);\n140: if (obj == null) {\n144: if (id.equals(obj)) {\n149: if (obj instanceof SoftReference<?>) {\n151: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n152: DateTimeZone tz = ref.get();\n153: if (tz != null) {\n154: return tz;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "724: public static DateTimeFormatter dateTime() {\n725: return Constants.dt;\n726: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "126: public long remainder(long instant) {\n127: if (instant >= 0) {\n128: return instant % iUnitMillis;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "538: int getDayOfWeek(long instant) {\n542: if (instant >= 0) {\n543: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n552: return 1 + (int) ((daysSince19700101 + 3) % 7);\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1943: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1946: DateTimeField field = iFieldType.getField(chrono);\n1947: int minDigits = iMinDigits;\n1951: fraction = field.remainder(instant);\n1959: }\n1961: if (fraction == 0) {\n1962: if (buf != null) {\n1963: while (--minDigits >= 0) {\n1964: buf.append('0');\n1971: return;\n2025: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1241: public long previousTransition(long instant) {\n1244: instant++;\n1246: int standardOffset = iStandardOffset;\n1247: Recurrence startRecurrence = iStartRecurrence;\n1248: Recurrence endRecurrence = iEndRecurrence;\n1253: start = startRecurrence.previous\n1255: if (instant < 0 && start > 0) {\n1265: }\n1268: end = endRecurrence.previous\n1270: if (instant < 0 && end > 0) {\n1280: }\n1282: return ((start > end) ? start : end) - 1;\n1283: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2657: public void printTo(\n2660: DateTimePrinter[] elements = iPrinters;\n2661: if (elements == null) {\n2665: if (locale == null) {\n2667: locale = Locale.getDefault();\n2670: int len = elements.length;\n2671: for (int i = 0; i < len; i++) {\n2672: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2674: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "56: public int get(long instant) {\n57: return iChronology.getDayOfWeek(instant);\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1265: public abstract boolean equals(Object object);\n1273: return 57 + getID().hashCode();\n1274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "340: private int getOffsetToAdd(long instant) {\n341: int offset = this.iZone.getOffset(instant);\n342: long sum = instant + offset;\n344: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n347: return offset;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "950: private Chronology selectChronology(Chronology chrono) {\n951: chrono = DateTimeUtils.getChronology(chrono);\n952: if (iChrono != null) {\n955: if (iZone != null) {\n958: return chrono;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "314: public long add(long instant, int value) {\n315: int offset = getOffsetToAdd(instant);\n316: instant = iField.add(instant + offset, value);\n317: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1621: public boolean equals(Object obj) {\n1622: if (this == obj) {\n1625: if (obj instanceof PrecalculatedZone) {\n1626: PrecalculatedZone other = (PrecalculatedZone)obj;\n1627: return\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1909: public void printTo(\n1913: printTo(buf, null, instant, chrono);\n1916: }\n1917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "126: public boolean equals(Object obj) {\n127: if (this == obj) {\n130: if (obj instanceof CachedDateTimeZone) {\n131: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2147: public void printTo(\n2150: if (displayZone == null) {\n2153: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2157: if (displayOffset >= 0) {\n2158: buf.append('+');\n2164: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2165: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2166: if (iMaxFields == 1) {\n2169: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2170: if (displayOffset == 0 && iMinFields <= 1) {\n2174: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2175: if (iShowSeparators) {\n2176: buf.append(':');\n2178: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2179: if (iMaxFields == 2) {\n2182: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2183: if (displayOffset == 0 && iMinFields <= 2) {\n2184: return;\n2204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "47: public int get(long instant) {\n48: return iChronology.getDayOfMonth(instant);\n49: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1471: public void printTo(\n1475: DateTimeField field = iFieldType.getField(chrono);\n1476: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1479: }\n1480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "195: public static final Chronology getInstantChronology(ReadableInstant instant) {\n196: if (instant == null) {\n199: Chronology chrono = instant.getChronology();\n200: if (chrono == null) {\n203: return chrono;\n204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addWeeks(I)V",
                                    "method_body": "722: public void addWeeks(final int weeks) {\n723: setMillis(getChronology().weeks().add(getMillis(), weeks));\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "465: int getDayOfMonth(long millis, int year) {\n466: int month = getMonthOfYear(millis, year);\n467: return getDayOfMonth(millis, year, month);\n468: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "591: public String print(ReadableInstant instant) {\n592: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n593: printTo(buf, instant);\n594: return buf.toString();\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "730: public final String getID() {\n731: return iID;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "558: int getMillisOfDay(long instant) {\n559: if (instant >= 0) {\n560: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "154: public final long getUnitMillis() {\n155: return iUnitMillis;\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "392: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n393: long millis = getYearMillis(year);\n394: millis += getTotalMillisByYearMonth(year, month);\n395: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "96: protected int getMaximumValueForSet(long instant, int value) {\n97: return iChronology.getDaysInMonthMaxForSet(instant, value);\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "111: public long set(long instant, int value) {\n112: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n113: return instant + (value - get(instant)) * iUnitMillis;\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1589: public long previousTransition(long instant) {\n1590: long[] transitions = iTransitions;\n1591: int i = Arrays.binarySearch(transitions, instant);\n1592: if (i >= 0) {\n1598: i = ~i;\n1599: if (i < transitions.length) {\n1608: if (iTailZone != null) {\n1609: long prev = iTailZone.previousTransition(instant);\n1610: if (prev < instant) {\n1611: return prev;\n1619: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "92: public long add(long instant, int months) {\n93: if (months == 0) {\n94: return instant; // the easy case\n99: long timePart = iChronology.getMillisOfDay(instant);\n104: int thisYear = iChronology.getYear(instant);\n105: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n113: int monthToUse = thisMonth - 1 + months;\n114: if (monthToUse >= 0) {\n115: yearToUse = thisYear + (monthToUse / iMax);\n116: monthToUse = (monthToUse % iMax) + 1;\n137: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n138: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n139: if (dayToUse > maxDay) {\n145: long datePart =\n147: return datePart + timePart;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "350: private int getOffsetFromLocalToSubtract(long instant) {\n351: int offset = this.iZone.getOffsetFromLocal(instant);\n352: long diff = instant - offset;\n354: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n357: return offset;\n358: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "177: public static final long getInstantMillis(ReadableInstant instant) {\n178: if (instant == null) {\n181: return instant.getMillis();\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "231: public static void verifyValueBounds(DateTimeField field,\n233: if ((value < lowerBound) || (value > upperBound)) {\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "610: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n611: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n614: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "367: long getYearMillis(int year) {\n368: return getYearInfo(year).iFirstDayMillis;\n369: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1228: public String toString() {\n1229: return ISODateTimeFormat.dateTime().print(this);\n1230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "55: public int getMinimumValue() {\n56: return 1;\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "698: int getMaxMonth() {\n699: return 12;\n700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1215: public void printTo(\n1218: buf.append(iValue);\n1219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "784: public void addHours(final int hours) {\n785: setMillis(getChronology().hours().add(getMillis(), hours));\n786: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "249: public static void verifyValueBounds(DateTimeFieldType fieldType,\n251: if ((value < lowerBound) || (value > upperBound)) {\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "624: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n690: return getMaxMonth();\n691: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "54: public int get(long instant) {\n55: return iChronology.getYear(instant);\n56: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero",
                            "test_body": "266: public void testAddDays_int_dstOverlapWinter_addZero() {\n267: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n268: test.addHours(1);\n269: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n270: test.addDays(0);\n271: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n272: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "72: public int get(long instant) {\n73: return iChronology.getMonthOfYear(instant);\n74: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "905: public int getOffsetFromLocal(long instantLocal) {\n907: final int offsetLocal = getOffset(instantLocal);\n909: final long instantAdjusted = instantLocal - offsetLocal;\n910: final int offsetAdjusted = getOffset(instantAdjusted);\n912: if (offsetLocal != offsetAdjusted) {\n925: } else if (offsetLocal >= 0) {\n926: long prev = previousTransition(instantAdjusted);\n927: if (prev < instantAdjusted) {\n928: int offsetPrev = getOffset(prev);\n929: int diff = offsetPrev - offsetLocal;\n930: if (instantAdjusted - prev <= diff) {\n931: return offsetPrev;\n936: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n473: super.setMillis(instant);\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "401: int getYear(long instant) {\n407: long unitMillis = getAverageMillisPerYearDividedByTwo();\n408: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n409: if (i2 < 0) {\n412: int year = (int) (i2 / unitMillis);\n414: long yearStart = getYearMillis(year);\n415: long diff = instant - yearStart;\n417: if (diff < 0) {\n419: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n436: return year;\n437: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addDays(I)V",
                                    "method_body": "763: public void addDays(final int days) {\n764: setMillis(getChronology().days().add(getMillis(), days));\n765: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "78: public long set(long instant, int value) {\n79: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n81: return instant + (value - get(instant)) * iUnitMillis;\n82: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "468: public void printTo(StringBuffer buf, ReadableInstant instant) {\n469: long millis = DateTimeUtils.getInstantMillis(instant);\n470: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n471: printTo(buf, millis, chrono);\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n213: return zone;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "627: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n628: DateTimePrinter printer = requirePrinter();\n629: chrono = selectChronology(chrono);\n632: DateTimeZone zone = chrono.getZone();\n633: int offset = zone.getOffset(instant);\n634: long adjustedInstant = instant + offset;\n635: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n641: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "450: abstract int getMonthOfYear(long millis, int year);\n456: int year = getYear(millis);\n457: int month = getMonthOfYear(millis, year);\n458: return getDayOfMonth(millis, year, month);\n459: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "442: int getMonthOfYear(long millis) {\n443: return getMonthOfYear(millis, getYear(millis));\n444: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long instant) {\n80: if (instant >= 0) {\n81: return (int) ((instant / getUnitMillis()) % iRange);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "707: abstract long getAverageMillisPerYear();\n746: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n747: if (info == null || info.iYear != year) {\n751: return info;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "666: private DateTimePrinter requirePrinter() {\n667: DateTimePrinter printer = iPrinter;\n668: if (printer == null) {\n671: return printer;\n672: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "475: int getDayOfMonth(long millis, int year, int month) {\n476: long dateMillis = getYearMillis(year);\n477: dateMillis += getTotalMillisByYearMonth(year, month);\n478: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n479: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "141: public DurationField getDurationField() {\n142: return iUnitField;\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "298: public long set(long instant, int month) {\n299: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n301: int thisYear = iChronology.getYear(instant);\n303: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n304: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n305: if (thisDom > maxDom) {\n310: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1285: public boolean equals(Object obj) {\n1286: if (this == obj) {\n1289: if (obj instanceof DSTZone) {\n1290: DSTZone other = (DSTZone)obj;\n1291: return\n1298: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "134: public DateTimeZone getZone(String id) {\n135: if (id == null) {\n139: Object obj = iZoneInfoMap.get(id);\n140: if (obj == null) {\n144: if (id.equals(obj)) {\n149: if (obj instanceof SoftReference<?>) {\n151: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n152: DateTimeZone tz = ref.get();\n153: if (tz != null) {\n154: return tz;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "724: public static DateTimeFormatter dateTime() {\n725: return Constants.dt;\n726: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "126: public long remainder(long instant) {\n127: if (instant >= 0) {\n128: return instant % iUnitMillis;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "538: int getDayOfWeek(long instant) {\n542: if (instant >= 0) {\n543: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n552: return 1 + (int) ((daysSince19700101 + 3) % 7);\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1943: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1946: DateTimeField field = iFieldType.getField(chrono);\n1947: int minDigits = iMinDigits;\n1951: fraction = field.remainder(instant);\n1959: }\n1961: if (fraction == 0) {\n1962: if (buf != null) {\n1963: while (--minDigits >= 0) {\n1964: buf.append('0');\n1971: return;\n2025: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1241: public long previousTransition(long instant) {\n1244: instant++;\n1246: int standardOffset = iStandardOffset;\n1247: Recurrence startRecurrence = iStartRecurrence;\n1248: Recurrence endRecurrence = iEndRecurrence;\n1253: start = startRecurrence.previous\n1255: if (instant < 0 && start > 0) {\n1265: }\n1268: end = endRecurrence.previous\n1270: if (instant < 0 && end > 0) {\n1280: }\n1282: return ((start > end) ? start : end) - 1;\n1283: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2657: public void printTo(\n2660: DateTimePrinter[] elements = iPrinters;\n2661: if (elements == null) {\n2665: if (locale == null) {\n2667: locale = Locale.getDefault();\n2670: int len = elements.length;\n2671: for (int i = 0; i < len; i++) {\n2672: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2674: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "56: public int get(long instant) {\n57: return iChronology.getDayOfWeek(instant);\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1265: public abstract boolean equals(Object object);\n1273: return 57 + getID().hashCode();\n1274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "340: private int getOffsetToAdd(long instant) {\n341: int offset = this.iZone.getOffset(instant);\n342: long sum = instant + offset;\n344: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n347: return offset;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "950: private Chronology selectChronology(Chronology chrono) {\n951: chrono = DateTimeUtils.getChronology(chrono);\n952: if (iChrono != null) {\n955: if (iZone != null) {\n958: return chrono;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "314: public long add(long instant, int value) {\n315: int offset = getOffsetToAdd(instant);\n316: instant = iField.add(instant + offset, value);\n317: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1621: public boolean equals(Object obj) {\n1622: if (this == obj) {\n1625: if (obj instanceof PrecalculatedZone) {\n1626: PrecalculatedZone other = (PrecalculatedZone)obj;\n1627: return\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1909: public void printTo(\n1913: printTo(buf, null, instant, chrono);\n1916: }\n1917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "126: public boolean equals(Object obj) {\n127: if (this == obj) {\n130: if (obj instanceof CachedDateTimeZone) {\n131: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2147: public void printTo(\n2150: if (displayZone == null) {\n2153: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2157: if (displayOffset >= 0) {\n2158: buf.append('+');\n2164: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2165: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2166: if (iMaxFields == 1) {\n2169: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2170: if (displayOffset == 0 && iMinFields <= 1) {\n2174: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2175: if (iShowSeparators) {\n2176: buf.append(':');\n2178: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2179: if (iMaxFields == 2) {\n2182: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2183: if (displayOffset == 0 && iMinFields <= 2) {\n2184: return;\n2204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "47: public int get(long instant) {\n48: return iChronology.getDayOfMonth(instant);\n49: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1471: public void printTo(\n1475: DateTimeField field = iFieldType.getField(chrono);\n1476: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1479: }\n1480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "195: public static final Chronology getInstantChronology(ReadableInstant instant) {\n196: if (instant == null) {\n199: Chronology chrono = instant.getChronology();\n200: if (chrono == null) {\n203: return chrono;\n204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "465: int getDayOfMonth(long millis, int year) {\n466: int month = getMonthOfYear(millis, year);\n467: return getDayOfMonth(millis, year, month);\n468: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "591: public String print(ReadableInstant instant) {\n592: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n593: printTo(buf, instant);\n594: return buf.toString();\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "730: public final String getID() {\n731: return iID;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "558: int getMillisOfDay(long instant) {\n559: if (instant >= 0) {\n560: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "154: public final long getUnitMillis() {\n155: return iUnitMillis;\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "392: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n393: long millis = getYearMillis(year);\n394: millis += getTotalMillisByYearMonth(year, month);\n395: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "96: protected int getMaximumValueForSet(long instant, int value) {\n97: return iChronology.getDaysInMonthMaxForSet(instant, value);\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "111: public long set(long instant, int value) {\n112: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n113: return instant + (value - get(instant)) * iUnitMillis;\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1589: public long previousTransition(long instant) {\n1590: long[] transitions = iTransitions;\n1591: int i = Arrays.binarySearch(transitions, instant);\n1592: if (i >= 0) {\n1598: i = ~i;\n1599: if (i < transitions.length) {\n1608: if (iTailZone != null) {\n1609: long prev = iTailZone.previousTransition(instant);\n1610: if (prev < instant) {\n1611: return prev;\n1619: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "92: public long add(long instant, int months) {\n93: if (months == 0) {\n94: return instant; // the easy case\n99: long timePart = iChronology.getMillisOfDay(instant);\n104: int thisYear = iChronology.getYear(instant);\n105: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n113: int monthToUse = thisMonth - 1 + months;\n114: if (monthToUse >= 0) {\n115: yearToUse = thisYear + (monthToUse / iMax);\n116: monthToUse = (monthToUse % iMax) + 1;\n137: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n138: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n139: if (dayToUse > maxDay) {\n145: long datePart =\n147: return datePart + timePart;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "350: private int getOffsetFromLocalToSubtract(long instant) {\n351: int offset = this.iZone.getOffsetFromLocal(instant);\n352: long diff = instant - offset;\n354: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n357: return offset;\n358: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "177: public static final long getInstantMillis(ReadableInstant instant) {\n178: if (instant == null) {\n181: return instant.getMillis();\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "231: public static void verifyValueBounds(DateTimeField field,\n233: if ((value < lowerBound) || (value > upperBound)) {\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "610: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n611: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n614: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "367: long getYearMillis(int year) {\n368: return getYearInfo(year).iFirstDayMillis;\n369: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1228: public String toString() {\n1229: return ISODateTimeFormat.dateTime().print(this);\n1230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "55: public int getMinimumValue() {\n56: return 1;\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "698: int getMaxMonth() {\n699: return 12;\n700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1215: public void printTo(\n1218: buf.append(iValue);\n1219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "784: public void addHours(final int hours) {\n785: setMillis(getChronology().hours().add(getMillis(), hours));\n786: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "249: public static void verifyValueBounds(DateTimeFieldType fieldType,\n251: if ((value < lowerBound) || (value > upperBound)) {\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "624: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n690: return getMaxMonth();\n691: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "54: public int get(long instant) {\n55: return iChronology.getYear(instant);\n56: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
                            "test_body": "182: public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n183: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n184: test.addHours(1);\n185: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n186: test.add(DurationFieldType.years(), 0);\n187: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n188: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "72: public int get(long instant) {\n73: return iChronology.getMonthOfYear(instant);\n74: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "905: public int getOffsetFromLocal(long instantLocal) {\n907: final int offsetLocal = getOffset(instantLocal);\n909: final long instantAdjusted = instantLocal - offsetLocal;\n910: final int offsetAdjusted = getOffset(instantAdjusted);\n912: if (offsetLocal != offsetAdjusted) {\n925: } else if (offsetLocal >= 0) {\n926: long prev = previousTransition(instantAdjusted);\n927: if (prev < instantAdjusted) {\n928: int offsetPrev = getOffset(prev);\n929: int diff = offsetPrev - offsetLocal;\n930: if (instantAdjusted - prev <= diff) {\n931: return offsetPrev;\n936: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n473: super.setMillis(instant);\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "401: int getYear(long instant) {\n407: long unitMillis = getAverageMillisPerYearDividedByTwo();\n408: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n409: if (i2 < 0) {\n412: int year = (int) (i2 / unitMillis);\n414: long yearStart = getYearMillis(year);\n415: long diff = instant - yearStart;\n417: if (diff < 0) {\n419: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n436: return year;\n437: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "78: public long set(long instant, int value) {\n79: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n81: return instant + (value - get(instant)) * iUnitMillis;\n82: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "186: public static DurationFieldType years() {\n187: return YEARS_TYPE;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "468: public void printTo(StringBuffer buf, ReadableInstant instant) {\n469: long millis = DateTimeUtils.getInstantMillis(instant);\n470: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n471: printTo(buf, millis, chrono);\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n213: return zone;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "627: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n628: DateTimePrinter printer = requirePrinter();\n629: chrono = selectChronology(chrono);\n632: DateTimeZone zone = chrono.getZone();\n633: int offset = zone.getOffset(instant);\n634: long adjustedInstant = instant + offset;\n635: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n641: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "450: abstract int getMonthOfYear(long millis, int year);\n456: int year = getYear(millis);\n457: int month = getMonthOfYear(millis, year);\n458: return getDayOfMonth(millis, year, month);\n459: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "442: int getMonthOfYear(long millis) {\n443: return getMonthOfYear(millis, getYear(millis));\n444: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long instant) {\n80: if (instant >= 0) {\n81: return (int) ((instant / getUnitMillis()) % iRange);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:add(Lorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "635: public void add(DurationFieldType type, int amount) {\n636: if (type == null) {\n639: setMillis(type.getField(getChronology()).add(getMillis(), amount));\n640: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "707: abstract long getAverageMillisPerYear();\n746: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n747: if (info == null || info.iYear != year) {\n751: return info;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "666: private DateTimePrinter requirePrinter() {\n667: DateTimePrinter printer = iPrinter;\n668: if (printer == null) {\n671: return printer;\n672: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "475: int getDayOfMonth(long millis, int year, int month) {\n476: long dateMillis = getYearMillis(year);\n477: dateMillis += getTotalMillisByYearMonth(year, month);\n478: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n479: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "141: public DurationField getDurationField() {\n142: return iUnitField;\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "298: public long set(long instant, int month) {\n299: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n301: int thisYear = iChronology.getYear(instant);\n303: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n304: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n305: if (thisDom > maxDom) {\n310: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1285: public boolean equals(Object obj) {\n1286: if (this == obj) {\n1289: if (obj instanceof DSTZone) {\n1290: DSTZone other = (DSTZone)obj;\n1291: return\n1298: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "134: public DateTimeZone getZone(String id) {\n135: if (id == null) {\n139: Object obj = iZoneInfoMap.get(id);\n140: if (obj == null) {\n144: if (id.equals(obj)) {\n149: if (obj instanceof SoftReference<?>) {\n151: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n152: DateTimeZone tz = ref.get();\n153: if (tz != null) {\n154: return tz;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "724: public static DateTimeFormatter dateTime() {\n725: return Constants.dt;\n726: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "126: public long remainder(long instant) {\n127: if (instant >= 0) {\n128: return instant % iUnitMillis;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "538: int getDayOfWeek(long instant) {\n542: if (instant >= 0) {\n543: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n552: return 1 + (int) ((daysSince19700101 + 3) % 7);\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1943: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1946: DateTimeField field = iFieldType.getField(chrono);\n1947: int minDigits = iMinDigits;\n1951: fraction = field.remainder(instant);\n1959: }\n1961: if (fraction == 0) {\n1962: if (buf != null) {\n1963: while (--minDigits >= 0) {\n1964: buf.append('0');\n1971: return;\n2025: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1241: public long previousTransition(long instant) {\n1244: instant++;\n1246: int standardOffset = iStandardOffset;\n1247: Recurrence startRecurrence = iStartRecurrence;\n1248: Recurrence endRecurrence = iEndRecurrence;\n1253: start = startRecurrence.previous\n1255: if (instant < 0 && start > 0) {\n1265: }\n1268: end = endRecurrence.previous\n1270: if (instant < 0 && end > 0) {\n1280: }\n1282: return ((start > end) ? start : end) - 1;\n1283: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2657: public void printTo(\n2660: DateTimePrinter[] elements = iPrinters;\n2661: if (elements == null) {\n2665: if (locale == null) {\n2667: locale = Locale.getDefault();\n2670: int len = elements.length;\n2671: for (int i = 0; i < len; i++) {\n2672: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2674: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "56: public int get(long instant) {\n57: return iChronology.getDayOfWeek(instant);\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1265: public abstract boolean equals(Object object);\n1273: return 57 + getID().hashCode();\n1274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "340: private int getOffsetToAdd(long instant) {\n341: int offset = this.iZone.getOffset(instant);\n342: long sum = instant + offset;\n344: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n347: return offset;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "950: private Chronology selectChronology(Chronology chrono) {\n951: chrono = DateTimeUtils.getChronology(chrono);\n952: if (iChrono != null) {\n955: if (iZone != null) {\n958: return chrono;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "314: public long add(long instant, int value) {\n315: int offset = getOffsetToAdd(instant);\n316: instant = iField.add(instant + offset, value);\n317: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1621: public boolean equals(Object obj) {\n1622: if (this == obj) {\n1625: if (obj instanceof PrecalculatedZone) {\n1626: PrecalculatedZone other = (PrecalculatedZone)obj;\n1627: return\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1909: public void printTo(\n1913: printTo(buf, null, instant, chrono);\n1916: }\n1917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "126: public boolean equals(Object obj) {\n127: if (this == obj) {\n130: if (obj instanceof CachedDateTimeZone) {\n131: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2147: public void printTo(\n2150: if (displayZone == null) {\n2153: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2157: if (displayOffset >= 0) {\n2158: buf.append('+');\n2164: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2165: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2166: if (iMaxFields == 1) {\n2169: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2170: if (displayOffset == 0 && iMinFields <= 1) {\n2174: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2175: if (iShowSeparators) {\n2176: buf.append(':');\n2178: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2179: if (iMaxFields == 2) {\n2182: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2183: if (displayOffset == 0 && iMinFields <= 2) {\n2184: return;\n2204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "47: public int get(long instant) {\n48: return iChronology.getDayOfMonth(instant);\n49: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1471: public void printTo(\n1475: DateTimeField field = iFieldType.getField(chrono);\n1476: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1479: }\n1480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n292: return chronology.years();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "195: public static final Chronology getInstantChronology(ReadableInstant instant) {\n196: if (instant == null) {\n199: Chronology chrono = instant.getChronology();\n200: if (chrono == null) {\n203: return chrono;\n204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "465: int getDayOfMonth(long millis, int year) {\n466: int month = getMonthOfYear(millis, year);\n467: return getDayOfMonth(millis, year, month);\n468: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "591: public String print(ReadableInstant instant) {\n592: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n593: printTo(buf, instant);\n594: return buf.toString();\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "730: public final String getID() {\n731: return iID;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "558: int getMillisOfDay(long instant) {\n559: if (instant >= 0) {\n560: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "154: public final long getUnitMillis() {\n155: return iUnitMillis;\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "392: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n393: long millis = getYearMillis(year);\n394: millis += getTotalMillisByYearMonth(year, month);\n395: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "96: protected int getMaximumValueForSet(long instant, int value) {\n97: return iChronology.getDaysInMonthMaxForSet(instant, value);\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "111: public long set(long instant, int value) {\n112: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n113: return instant + (value - get(instant)) * iUnitMillis;\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1589: public long previousTransition(long instant) {\n1590: long[] transitions = iTransitions;\n1591: int i = Arrays.binarySearch(transitions, instant);\n1592: if (i >= 0) {\n1598: i = ~i;\n1599: if (i < transitions.length) {\n1608: if (iTailZone != null) {\n1609: long prev = iTailZone.previousTransition(instant);\n1610: if (prev < instant) {\n1611: return prev;\n1619: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "92: public long add(long instant, int months) {\n93: if (months == 0) {\n94: return instant; // the easy case\n99: long timePart = iChronology.getMillisOfDay(instant);\n104: int thisYear = iChronology.getYear(instant);\n105: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n113: int monthToUse = thisMonth - 1 + months;\n114: if (monthToUse >= 0) {\n115: yearToUse = thisYear + (monthToUse / iMax);\n116: monthToUse = (monthToUse % iMax) + 1;\n137: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n138: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n139: if (dayToUse > maxDay) {\n145: long datePart =\n147: return datePart + timePart;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "182: public long add(long instant, int value) {\n183: return ImpreciseDateTimeField.this.add(instant, value);\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "350: private int getOffsetFromLocalToSubtract(long instant) {\n351: int offset = this.iZone.getOffsetFromLocal(instant);\n352: long diff = instant - offset;\n354: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n357: return offset;\n358: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "177: public static final long getInstantMillis(ReadableInstant instant) {\n178: if (instant == null) {\n181: return instant.getMillis();\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "231: public static void verifyValueBounds(DateTimeField field,\n233: if ((value < lowerBound) || (value > upperBound)) {\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "610: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n611: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n614: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "367: long getYearMillis(int year) {\n368: return getYearInfo(year).iFirstDayMillis;\n369: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1228: public String toString() {\n1229: return ISODateTimeFormat.dateTime().print(this);\n1230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "55: public int getMinimumValue() {\n56: return 1;\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "698: int getMaxMonth() {\n699: return 12;\n700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1215: public void printTo(\n1218: buf.append(iValue);\n1219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "58: public long add(long instant, int years) {\n59: if (years == 0) {\n60: return instant;\n65: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "784: public void addHours(final int hours) {\n785: setMillis(getChronology().hours().add(getMillis(), hours));\n786: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "249: public static void verifyValueBounds(DateTimeFieldType fieldType,\n251: if ((value < lowerBound) || (value > upperBound)) {\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "624: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n690: return getMaxMonth();\n691: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "54: public int get(long instant) {\n55: return iChronology.getYear(instant);\n56: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero",
                            "test_body": "244: public void testAddMonths_int_dstOverlapWinter_addZero() {\n245: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n246: test.addHours(1);\n247: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n248: test.addMonths(0);\n249: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n250: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "72: public int get(long instant) {\n73: return iChronology.getMonthOfYear(instant);\n74: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "905: public int getOffsetFromLocal(long instantLocal) {\n907: final int offsetLocal = getOffset(instantLocal);\n909: final long instantAdjusted = instantLocal - offsetLocal;\n910: final int offsetAdjusted = getOffset(instantAdjusted);\n912: if (offsetLocal != offsetAdjusted) {\n925: } else if (offsetLocal >= 0) {\n926: long prev = previousTransition(instantAdjusted);\n927: if (prev < instantAdjusted) {\n928: int offsetPrev = getOffset(prev);\n929: int diff = offsetPrev - offsetLocal;\n930: if (instantAdjusted - prev <= diff) {\n931: return offsetPrev;\n936: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n473: super.setMillis(instant);\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "401: int getYear(long instant) {\n407: long unitMillis = getAverageMillisPerYearDividedByTwo();\n408: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n409: if (i2 < 0) {\n412: int year = (int) (i2 / unitMillis);\n414: long yearStart = getYearMillis(year);\n415: long diff = instant - yearStart;\n417: if (diff < 0) {\n419: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n436: return year;\n437: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "78: public long set(long instant, int value) {\n79: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n81: return instant + (value - get(instant)) * iUnitMillis;\n82: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addMonths(I)V",
                                    "method_body": "701: public void addMonths(final int months) {\n702: setMillis(getChronology().months().add(getMillis(), months));\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "468: public void printTo(StringBuffer buf, ReadableInstant instant) {\n469: long millis = DateTimeUtils.getInstantMillis(instant);\n470: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n471: printTo(buf, millis, chrono);\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n213: return zone;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "627: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n628: DateTimePrinter printer = requirePrinter();\n629: chrono = selectChronology(chrono);\n632: DateTimeZone zone = chrono.getZone();\n633: int offset = zone.getOffset(instant);\n634: long adjustedInstant = instant + offset;\n635: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n641: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "450: abstract int getMonthOfYear(long millis, int year);\n456: int year = getYear(millis);\n457: int month = getMonthOfYear(millis, year);\n458: return getDayOfMonth(millis, year, month);\n459: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "442: int getMonthOfYear(long millis) {\n443: return getMonthOfYear(millis, getYear(millis));\n444: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long instant) {\n80: if (instant >= 0) {\n81: return (int) ((instant / getUnitMillis()) % iRange);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "707: abstract long getAverageMillisPerYear();\n746: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n747: if (info == null || info.iYear != year) {\n751: return info;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "666: private DateTimePrinter requirePrinter() {\n667: DateTimePrinter printer = iPrinter;\n668: if (printer == null) {\n671: return printer;\n672: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "475: int getDayOfMonth(long millis, int year, int month) {\n476: long dateMillis = getYearMillis(year);\n477: dateMillis += getTotalMillisByYearMonth(year, month);\n478: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n479: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "141: public DurationField getDurationField() {\n142: return iUnitField;\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "298: public long set(long instant, int month) {\n299: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n301: int thisYear = iChronology.getYear(instant);\n303: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n304: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n305: if (thisDom > maxDom) {\n310: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1285: public boolean equals(Object obj) {\n1286: if (this == obj) {\n1289: if (obj instanceof DSTZone) {\n1290: DSTZone other = (DSTZone)obj;\n1291: return\n1298: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "134: public DateTimeZone getZone(String id) {\n135: if (id == null) {\n139: Object obj = iZoneInfoMap.get(id);\n140: if (obj == null) {\n144: if (id.equals(obj)) {\n149: if (obj instanceof SoftReference<?>) {\n151: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n152: DateTimeZone tz = ref.get();\n153: if (tz != null) {\n154: return tz;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "724: public static DateTimeFormatter dateTime() {\n725: return Constants.dt;\n726: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "126: public long remainder(long instant) {\n127: if (instant >= 0) {\n128: return instant % iUnitMillis;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "538: int getDayOfWeek(long instant) {\n542: if (instant >= 0) {\n543: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n552: return 1 + (int) ((daysSince19700101 + 3) % 7);\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1943: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1946: DateTimeField field = iFieldType.getField(chrono);\n1947: int minDigits = iMinDigits;\n1951: fraction = field.remainder(instant);\n1959: }\n1961: if (fraction == 0) {\n1962: if (buf != null) {\n1963: while (--minDigits >= 0) {\n1964: buf.append('0');\n1971: return;\n2025: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1241: public long previousTransition(long instant) {\n1244: instant++;\n1246: int standardOffset = iStandardOffset;\n1247: Recurrence startRecurrence = iStartRecurrence;\n1248: Recurrence endRecurrence = iEndRecurrence;\n1253: start = startRecurrence.previous\n1255: if (instant < 0 && start > 0) {\n1265: }\n1268: end = endRecurrence.previous\n1270: if (instant < 0 && end > 0) {\n1280: }\n1282: return ((start > end) ? start : end) - 1;\n1283: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2657: public void printTo(\n2660: DateTimePrinter[] elements = iPrinters;\n2661: if (elements == null) {\n2665: if (locale == null) {\n2667: locale = Locale.getDefault();\n2670: int len = elements.length;\n2671: for (int i = 0; i < len; i++) {\n2672: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2674: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "56: public int get(long instant) {\n57: return iChronology.getDayOfWeek(instant);\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1265: public abstract boolean equals(Object object);\n1273: return 57 + getID().hashCode();\n1274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "340: private int getOffsetToAdd(long instant) {\n341: int offset = this.iZone.getOffset(instant);\n342: long sum = instant + offset;\n344: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n347: return offset;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "950: private Chronology selectChronology(Chronology chrono) {\n951: chrono = DateTimeUtils.getChronology(chrono);\n952: if (iChrono != null) {\n955: if (iZone != null) {\n958: return chrono;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "314: public long add(long instant, int value) {\n315: int offset = getOffsetToAdd(instant);\n316: instant = iField.add(instant + offset, value);\n317: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1621: public boolean equals(Object obj) {\n1622: if (this == obj) {\n1625: if (obj instanceof PrecalculatedZone) {\n1626: PrecalculatedZone other = (PrecalculatedZone)obj;\n1627: return\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1909: public void printTo(\n1913: printTo(buf, null, instant, chrono);\n1916: }\n1917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "126: public boolean equals(Object obj) {\n127: if (this == obj) {\n130: if (obj instanceof CachedDateTimeZone) {\n131: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2147: public void printTo(\n2150: if (displayZone == null) {\n2153: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2157: if (displayOffset >= 0) {\n2158: buf.append('+');\n2164: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2165: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2166: if (iMaxFields == 1) {\n2169: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2170: if (displayOffset == 0 && iMinFields <= 1) {\n2174: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2175: if (iShowSeparators) {\n2176: buf.append(':');\n2178: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2179: if (iMaxFields == 2) {\n2182: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2183: if (displayOffset == 0 && iMinFields <= 2) {\n2184: return;\n2204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "47: public int get(long instant) {\n48: return iChronology.getDayOfMonth(instant);\n49: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1471: public void printTo(\n1475: DateTimeField field = iFieldType.getField(chrono);\n1476: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1479: }\n1480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "195: public static final Chronology getInstantChronology(ReadableInstant instant) {\n196: if (instant == null) {\n199: Chronology chrono = instant.getChronology();\n200: if (chrono == null) {\n203: return chrono;\n204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "465: int getDayOfMonth(long millis, int year) {\n466: int month = getMonthOfYear(millis, year);\n467: return getDayOfMonth(millis, year, month);\n468: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "591: public String print(ReadableInstant instant) {\n592: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n593: printTo(buf, instant);\n594: return buf.toString();\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "730: public final String getID() {\n731: return iID;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "558: int getMillisOfDay(long instant) {\n559: if (instant >= 0) {\n560: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "154: public final long getUnitMillis() {\n155: return iUnitMillis;\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "392: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n393: long millis = getYearMillis(year);\n394: millis += getTotalMillisByYearMonth(year, month);\n395: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "96: protected int getMaximumValueForSet(long instant, int value) {\n97: return iChronology.getDaysInMonthMaxForSet(instant, value);\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "111: public long set(long instant, int value) {\n112: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n113: return instant + (value - get(instant)) * iUnitMillis;\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1589: public long previousTransition(long instant) {\n1590: long[] transitions = iTransitions;\n1591: int i = Arrays.binarySearch(transitions, instant);\n1592: if (i >= 0) {\n1598: i = ~i;\n1599: if (i < transitions.length) {\n1608: if (iTailZone != null) {\n1609: long prev = iTailZone.previousTransition(instant);\n1610: if (prev < instant) {\n1611: return prev;\n1619: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "92: public long add(long instant, int months) {\n93: if (months == 0) {\n94: return instant; // the easy case\n99: long timePart = iChronology.getMillisOfDay(instant);\n104: int thisYear = iChronology.getYear(instant);\n105: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n113: int monthToUse = thisMonth - 1 + months;\n114: if (monthToUse >= 0) {\n115: yearToUse = thisYear + (monthToUse / iMax);\n116: monthToUse = (monthToUse % iMax) + 1;\n137: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n138: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n139: if (dayToUse > maxDay) {\n145: long datePart =\n147: return datePart + timePart;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "182: public long add(long instant, int value) {\n183: return ImpreciseDateTimeField.this.add(instant, value);\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "350: private int getOffsetFromLocalToSubtract(long instant) {\n351: int offset = this.iZone.getOffsetFromLocal(instant);\n352: long diff = instant - offset;\n354: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n357: return offset;\n358: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "177: public static final long getInstantMillis(ReadableInstant instant) {\n178: if (instant == null) {\n181: return instant.getMillis();\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "231: public static void verifyValueBounds(DateTimeField field,\n233: if ((value < lowerBound) || (value > upperBound)) {\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "610: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n611: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n614: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "367: long getYearMillis(int year) {\n368: return getYearInfo(year).iFirstDayMillis;\n369: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1228: public String toString() {\n1229: return ISODateTimeFormat.dateTime().print(this);\n1230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "55: public int getMinimumValue() {\n56: return 1;\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "698: int getMaxMonth() {\n699: return 12;\n700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1215: public void printTo(\n1218: buf.append(iValue);\n1219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "784: public void addHours(final int hours) {\n785: setMillis(getChronology().hours().add(getMillis(), hours));\n786: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "249: public static void verifyValueBounds(DateTimeFieldType fieldType,\n251: if ((value < lowerBound) || (value > upperBound)) {\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "624: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n690: return getMaxMonth();\n691: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "54: public int get(long instant) {\n55: return iChronology.getYear(instant);\n56: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero",
                            "test_body": "222: public void testAddYears_int_dstOverlapWinter_addZero() {\n223: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n224: test.addHours(1);\n225: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n226: test.addYears(0);\n227: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n228: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "72: public int get(long instant) {\n73: return iChronology.getMonthOfYear(instant);\n74: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "905: public int getOffsetFromLocal(long instantLocal) {\n907: final int offsetLocal = getOffset(instantLocal);\n909: final long instantAdjusted = instantLocal - offsetLocal;\n910: final int offsetAdjusted = getOffset(instantAdjusted);\n912: if (offsetLocal != offsetAdjusted) {\n925: } else if (offsetLocal >= 0) {\n926: long prev = previousTransition(instantAdjusted);\n927: if (prev < instantAdjusted) {\n928: int offsetPrev = getOffset(prev);\n929: int diff = offsetPrev - offsetLocal;\n930: if (instantAdjusted - prev <= diff) {\n931: return offsetPrev;\n936: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n473: super.setMillis(instant);\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "401: int getYear(long instant) {\n407: long unitMillis = getAverageMillisPerYearDividedByTwo();\n408: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n409: if (i2 < 0) {\n412: int year = (int) (i2 / unitMillis);\n414: long yearStart = getYearMillis(year);\n415: long diff = instant - yearStart;\n417: if (diff < 0) {\n419: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n436: return year;\n437: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "78: public long set(long instant, int value) {\n79: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n81: return instant + (value - get(instant)) * iUnitMillis;\n82: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "468: public void printTo(StringBuffer buf, ReadableInstant instant) {\n469: long millis = DateTimeUtils.getInstantMillis(instant);\n470: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n471: printTo(buf, millis, chrono);\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n213: return zone;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "627: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n628: DateTimePrinter printer = requirePrinter();\n629: chrono = selectChronology(chrono);\n632: DateTimeZone zone = chrono.getZone();\n633: int offset = zone.getOffset(instant);\n634: long adjustedInstant = instant + offset;\n635: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n641: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "450: abstract int getMonthOfYear(long millis, int year);\n456: int year = getYear(millis);\n457: int month = getMonthOfYear(millis, year);\n458: return getDayOfMonth(millis, year, month);\n459: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "442: int getMonthOfYear(long millis) {\n443: return getMonthOfYear(millis, getYear(millis));\n444: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long instant) {\n80: if (instant >= 0) {\n81: return (int) ((instant / getUnitMillis()) % iRange);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "707: abstract long getAverageMillisPerYear();\n746: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n747: if (info == null || info.iYear != year) {\n751: return info;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "666: private DateTimePrinter requirePrinter() {\n667: DateTimePrinter printer = iPrinter;\n668: if (printer == null) {\n671: return printer;\n672: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "475: int getDayOfMonth(long millis, int year, int month) {\n476: long dateMillis = getYearMillis(year);\n477: dateMillis += getTotalMillisByYearMonth(year, month);\n478: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n479: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "141: public DurationField getDurationField() {\n142: return iUnitField;\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "298: public long set(long instant, int month) {\n299: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n301: int thisYear = iChronology.getYear(instant);\n303: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n304: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n305: if (thisDom > maxDom) {\n310: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n312: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1285: public boolean equals(Object obj) {\n1286: if (this == obj) {\n1289: if (obj instanceof DSTZone) {\n1290: DSTZone other = (DSTZone)obj;\n1291: return\n1298: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "134: public DateTimeZone getZone(String id) {\n135: if (id == null) {\n139: Object obj = iZoneInfoMap.get(id);\n140: if (obj == null) {\n144: if (id.equals(obj)) {\n149: if (obj instanceof SoftReference<?>) {\n151: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n152: DateTimeZone tz = ref.get();\n153: if (tz != null) {\n154: return tz;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "724: public static DateTimeFormatter dateTime() {\n725: return Constants.dt;\n726: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "126: public long remainder(long instant) {\n127: if (instant >= 0) {\n128: return instant % iUnitMillis;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "538: int getDayOfWeek(long instant) {\n542: if (instant >= 0) {\n543: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n552: return 1 + (int) ((daysSince19700101 + 3) % 7);\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1943: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1946: DateTimeField field = iFieldType.getField(chrono);\n1947: int minDigits = iMinDigits;\n1951: fraction = field.remainder(instant);\n1959: }\n1961: if (fraction == 0) {\n1962: if (buf != null) {\n1963: while (--minDigits >= 0) {\n1964: buf.append('0');\n1971: return;\n2025: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addYears(I)V",
                                    "method_body": "659: public void addYears(final int years) {\n660: setMillis(getChronology().years().add(getMillis(), years));\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1241: public long previousTransition(long instant) {\n1244: instant++;\n1246: int standardOffset = iStandardOffset;\n1247: Recurrence startRecurrence = iStartRecurrence;\n1248: Recurrence endRecurrence = iEndRecurrence;\n1253: start = startRecurrence.previous\n1255: if (instant < 0 && start > 0) {\n1265: }\n1268: end = endRecurrence.previous\n1270: if (instant < 0 && end > 0) {\n1280: }\n1282: return ((start > end) ? start : end) - 1;\n1283: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2657: public void printTo(\n2660: DateTimePrinter[] elements = iPrinters;\n2661: if (elements == null) {\n2665: if (locale == null) {\n2667: locale = Locale.getDefault();\n2670: int len = elements.length;\n2671: for (int i = 0; i < len; i++) {\n2672: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2674: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "56: public int get(long instant) {\n57: return iChronology.getDayOfWeek(instant);\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1265: public abstract boolean equals(Object object);\n1273: return 57 + getID().hashCode();\n1274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "340: private int getOffsetToAdd(long instant) {\n341: int offset = this.iZone.getOffset(instant);\n342: long sum = instant + offset;\n344: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n347: return offset;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "950: private Chronology selectChronology(Chronology chrono) {\n951: chrono = DateTimeUtils.getChronology(chrono);\n952: if (iChrono != null) {\n955: if (iZone != null) {\n958: return chrono;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "314: public long add(long instant, int value) {\n315: int offset = getOffsetToAdd(instant);\n316: instant = iField.add(instant + offset, value);\n317: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1621: public boolean equals(Object obj) {\n1622: if (this == obj) {\n1625: if (obj instanceof PrecalculatedZone) {\n1626: PrecalculatedZone other = (PrecalculatedZone)obj;\n1627: return\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1909: public void printTo(\n1913: printTo(buf, null, instant, chrono);\n1916: }\n1917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "126: public boolean equals(Object obj) {\n127: if (this == obj) {\n130: if (obj instanceof CachedDateTimeZone) {\n131: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2147: public void printTo(\n2150: if (displayZone == null) {\n2153: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2157: if (displayOffset >= 0) {\n2158: buf.append('+');\n2164: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2165: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2166: if (iMaxFields == 1) {\n2169: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2170: if (displayOffset == 0 && iMinFields <= 1) {\n2174: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2175: if (iShowSeparators) {\n2176: buf.append(':');\n2178: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2179: if (iMaxFields == 2) {\n2182: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2183: if (displayOffset == 0 && iMinFields <= 2) {\n2184: return;\n2204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "47: public int get(long instant) {\n48: return iChronology.getDayOfMonth(instant);\n49: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1471: public void printTo(\n1475: DateTimeField field = iFieldType.getField(chrono);\n1476: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1479: }\n1480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "195: public static final Chronology getInstantChronology(ReadableInstant instant) {\n196: if (instant == null) {\n199: Chronology chrono = instant.getChronology();\n200: if (chrono == null) {\n203: return chrono;\n204: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "465: int getDayOfMonth(long millis, int year) {\n466: int month = getMonthOfYear(millis, year);\n467: return getDayOfMonth(millis, year, month);\n468: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "591: public String print(ReadableInstant instant) {\n592: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n593: printTo(buf, instant);\n594: return buf.toString();\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "730: public final String getID() {\n731: return iID;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "558: int getMillisOfDay(long instant) {\n559: if (instant >= 0) {\n560: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "154: public final long getUnitMillis() {\n155: return iUnitMillis;\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "392: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n393: long millis = getYearMillis(year);\n394: millis += getTotalMillisByYearMonth(year, month);\n395: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "96: protected int getMaximumValueForSet(long instant, int value) {\n97: return iChronology.getDaysInMonthMaxForSet(instant, value);\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "111: public long set(long instant, int value) {\n112: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n113: return instant + (value - get(instant)) * iUnitMillis;\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1589: public long previousTransition(long instant) {\n1590: long[] transitions = iTransitions;\n1591: int i = Arrays.binarySearch(transitions, instant);\n1592: if (i >= 0) {\n1598: i = ~i;\n1599: if (i < transitions.length) {\n1608: if (iTailZone != null) {\n1609: long prev = iTailZone.previousTransition(instant);\n1610: if (prev < instant) {\n1611: return prev;\n1619: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "92: public long add(long instant, int months) {\n93: if (months == 0) {\n94: return instant; // the easy case\n99: long timePart = iChronology.getMillisOfDay(instant);\n104: int thisYear = iChronology.getYear(instant);\n105: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n113: int monthToUse = thisMonth - 1 + months;\n114: if (monthToUse >= 0) {\n115: yearToUse = thisYear + (monthToUse / iMax);\n116: monthToUse = (monthToUse % iMax) + 1;\n137: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n138: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n139: if (dayToUse > maxDay) {\n145: long datePart =\n147: return datePart + timePart;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "182: public long add(long instant, int value) {\n183: return ImpreciseDateTimeField.this.add(instant, value);\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "350: private int getOffsetFromLocalToSubtract(long instant) {\n351: int offset = this.iZone.getOffsetFromLocal(instant);\n352: long diff = instant - offset;\n354: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n357: return offset;\n358: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "177: public static final long getInstantMillis(ReadableInstant instant) {\n178: if (instant == null) {\n181: return instant.getMillis();\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "231: public static void verifyValueBounds(DateTimeField field,\n233: if ((value < lowerBound) || (value > upperBound)) {\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "610: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n611: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n614: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "367: long getYearMillis(int year) {\n368: return getYearInfo(year).iFirstDayMillis;\n369: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1228: public String toString() {\n1229: return ISODateTimeFormat.dateTime().print(this);\n1230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "55: public int getMinimumValue() {\n56: return 1;\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "698: int getMaxMonth() {\n699: return 12;\n700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1215: public void printTo(\n1218: buf.append(iValue);\n1219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "58: public long add(long instant, int years) {\n59: if (years == 0) {\n60: return instant;\n65: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "784: public void addHours(final int hours) {\n785: setMillis(getChronology().hours().add(getMillis(), hours));\n786: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "249: public static void verifyValueBounds(DateTimeFieldType fieldType,\n251: if ((value < lowerBound) || (value > upperBound)) {\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "624: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n690: return getMaxMonth();\n691: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "54: public int get(long instant) {\n55: return iChronology.getYear(instant);\n56: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 4,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Basics.testWith3",
                            "test_body": "360: public void testWith3() {\n361: Partial test = createHourMinPartial();\n362: try {\n363: test.with(DateTimeFieldType.clockhourOfDay(), 6);\n364: fail();\n365: } catch (IllegalArgumentException ex) {}\n366: check(test, 10, 20);\n367: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "308: public int size() {\n309: return iTypes.length;\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "70: public final DateTimeField getWrappedField() {\n71: return iField;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
                                    "method_body": "426: public Partial with(DateTimeFieldType fieldType, int value) {\n427: if (fieldType == null) {\n430: int index = indexOf(fieldType);\n431: if (index == -1) {\n432: DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n433: int[] newValues = new int[newTypes.length];\n436: int i = 0;\n437: DurationField unitField = fieldType.getDurationType().getField(iChronology);\n438: if (unitField.isSupported()) {\n439: for (; i < iTypes.length; i++) {\n440: DateTimeFieldType loopType = iTypes[i];\n441: DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n442: if (loopUnitField.isSupported()) {\n443: int compare = unitField.compareTo(loopUnitField);\n444: if (compare > 0) {\n445: break;\n446: } else if (compare == 0) {\n447: DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n448: DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n449: if (rangeField.compareTo(loopRangeField) > 0) {\n456: System.arraycopy(iTypes, 0, newTypes, 0, i);\n457: System.arraycopy(iValues, 0, newValues, 0, i);\n458: newTypes[i] = fieldType;\n459: newValues[i] = value;\n460: System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n461: System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n464: Partial newPartial = new Partial(iChronology, newTypes, newValues);\n465: iChronology.validate(newPartial, newValues);\n466: return newPartial;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n298: return chronology.days();\n302: return chronology.hours();\n304: return chronology.minutes();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "189: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n190: super();\n191: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n192: iChronology = chronology;\n193: if (types == null) {\n196: if (values == null) {\n199: if (values.length != types.length) {\n202: if (types.length == 0) {\n207: for (int i = 0; i < types.length; i++) {\n208: if (types[i] == null) {\n212: DurationField lastUnitField = null;\n213: for (int i = 0; i < types.length; i++) {\n214: DateTimeFieldType loopType = types[i];\n215: DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n216: if (i > 0) {\n217: int compare = lastUnitField.compareTo(loopUnitField);\n218: if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n221: } else if (compare == 0) {\n243: lastUnitField = loopUnitField;\n246: iTypes = (DateTimeFieldType[]) types.clone();\n247: chronology.validate(this, values);\n248: iValues = (int[]) values.clone();\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V",
                                    "method_body": "295: Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\n296: super();\n297: iChronology = chronology;\n298: iTypes = types;\n299: iValues = values;\n300: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n514: return chronology.clockhourOfDay();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "137: public int getMinimumValue(ReadablePartial instant, int[] values) {\n138: return 1;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "150: public int getMinimumValue() {\n151: return 0;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "177: public int getMaximumValue(ReadablePartial instant, int[] values) {\n178: return getWrappedField().getMaximumValue(instant, values) + 1;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "169: public int indexOf(DateTimeFieldType type) {\n170: for (int i = 0, isize = size(); i < isize; i++) {\n171: if (getFieldType(i) == type) {\n175: return -1;\n176: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "343: public DateTimeFieldType getFieldType(int index) {\n344: return iTypes[index];\n345: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "226: public static DateTimeFieldType clockhourOfDay() {\n227: return CLOCKHOUR_OF_DAY_TYPE;\n228: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue()I",
                                    "method_body": "147: public int getMaximumValue() {\n148: return getWrappedField().getMaximumValue() + 1;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "332: protected DateTimeField getField(int index, Chronology chrono) {\n333: return iTypes[index].getField(chrono);\n334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue()I",
                                    "method_body": "110: public int getMinimumValue() {\n111: return 1;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "456: public DurationFieldType getRangeDurationType() {\n457: return iRangeType;\n458: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "131: public int getMaximumValue() {\n132: return iRange - 1;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "320: public Chronology getChronology() {\n321: return iChronology;\n322: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 5,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
                            "test_body": "1551: public void testNormalizedStandard_periodType_monthsWeeks() {\n1552: PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n1553: DurationFieldType.months(),\n1554: DurationFieldType.weeks(),\n1555: DurationFieldType.days()});\n1556: Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n1557: Period result = test.normalizedStandard(type);\n1558: assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n1559: assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n1560: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "627: public DurationFieldType getFieldType(int index) {\n628: return iTypes[index];\n629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "328: public int getValue(int index) {\n329: return iValues[index];\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "443: public Period(long duration, PeriodType type, Chronology chronology) {\n444: super(duration, type, chronology);\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public static final PeriodType getPeriodType(PeriodType type) {\n318: if (type == null) {\n321: return type;\n322: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "94: public int[] getValues() {\n95: int[] result = new int[size()];\n96: for (int i = 0; i < result.length; i++) {\n97: result[i] = getValue(i);\n99: return result;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n296: return chronology.weeks();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "763: public int getDays() {\n764: return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n765: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "773: public int getHours() {\n774: return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "113: public static DurationFieldType seconds() {\n114: return SECONDS_TYPE;\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "451: private int[] setPeriodInternal(int years, int months, int weeks, int days,\n453: int[] newValues = new int[size()];\n454: checkAndUpdate(DurationFieldType.years(), newValues, years);\n455: checkAndUpdate(DurationFieldType.months(), newValues, months);\n456: checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);\n457: checkAndUpdate(DurationFieldType.days(), newValues, days);\n458: checkAndUpdate(DurationFieldType.hours(), newValues, hours);\n459: checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);\n460: checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);\n461: checkAndUpdate(DurationFieldType.millis(), newValues, millis);\n462: return newValues;\n463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:forFields([Lorg/joda/time/DurationFieldType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "501: public static synchronized PeriodType forFields(DurationFieldType[] types) {\n502: if (types == null || types.length == 0) {\n505: for (int i = 0; i < types.length; i++) {\n506: if (types[i] == null) {\n510: Map<PeriodType, Object> cache = cTypes;\n511: if (cache.isEmpty()) {\n530: PeriodType inPartType = new PeriodType(null, types, null);\n531: Object cached = cache.get(inPartType);\n532: if (cached instanceof PeriodType) {\n533: return (PeriodType) cached;\n577: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:hashCode()I",
                                    "method_body": "850: public int hashCode() {\n851: int hash = 0;\n852: for (int i = 0; i < iTypes.length; i++) {\n853: hash += iTypes[i].hashCode();\n855: return hash;\n856: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "140: public int getDifference(long minuendInstant, long subtrahendInstant) {\n141: return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "1616: public Period normalizedStandard(PeriodType type) {\n1617: type = DateTimeUtils.getPeriodType(type);\n1618: long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n1619: millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n1620: millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n1621: millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n1622: millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n1623: millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n1624: Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n1625: int years = getYears();\n1626: int months = getMonths();\n1627: if (years != 0 || months != 0) {\n1628: years = FieldUtils.safeAdd(years, months / 12);\n1629: months = months % 12;\n1630: if (years != 0) {\n1631: result = result.withYears(years);\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "275: public int[] get(ReadablePeriod period, long duration) {\n276: int size = period.size();\n277: int[] values = new int[size];\n278: if (duration != 0) {\n279: long current = 0;\n280: for (int i = 0; i < size; i++) {\n281: DurationField field = period.getFieldType(i).getField(this);\n282: if (field.isPrecise()) {\n283: int value = field.getDifference(duration, current);\n284: current = field.add(current, value);\n285: values[i] = value;\n289: return values;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public PeriodType getPeriodType() {\n318: return iType;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "67: public DurationFieldType getFieldType(int index) {\n68: return getPeriodType().getFieldType(index);\n69: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "745: public int getMonths() {\n746: return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n747: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "122: public static DurationFieldType minutes() {\n123: return MINUTES_TYPE;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "647: public int indexOf(DurationFieldType type) {\n648: for (int i = 0, isize = size(); i < isize; i++) {\n649: if (iTypes[i] == type) {\n650: return i;\n654: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "265: public boolean equals(Object obj) {\n266: if (this == obj) {\n267: return true;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "307: protected PeriodType checkPeriodType(PeriodType type) {\n308: return DateTimeUtils.getPeriodType(type);\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "327: public Period(int years, int months, int weeks, int days,\n329: super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "687: boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n688: int realIndex = iIndices[index];\n689: if (realIndex == -1) {\n690: throw new UnsupportedOperationException(\"Field is not supported\");\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "736: public int getYears() {\n737: return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "55: public int size() {\n56: return getPeriodType().size();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "791: public int getSeconds() {\n792: return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "253: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n254: super();\n255: type = checkPeriodType(type);\n256: chrono = DateTimeUtils.getChronology(chrono);\n257: iType = type;\n258: iValues = chrono.get(this, duration);\n259: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "754: public int getWeeks() {\n755: return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "389: private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n390: int index = indexOf(type);\n391: if (index == -1) {\n397: values[index] = newValue;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "131: public static DurationFieldType hours() {\n132: return HOURS_TYPE;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "156: public boolean isPrecise() {\n157: return false;\n158: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:<init>(Ljava/lang/String;[Lorg/joda/time/DurationFieldType;[I)V",
                                    "method_body": "594: protected PeriodType(String name, DurationFieldType[] types, int[] indices) {\n595: super();\n596: iName = name;\n597: iTypes = types;\n598: iIndices = indices;\n599: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "99: public static long safeSubtract(long val1, long val2) {\n100: long diff = val1 - val2;\n102: if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n106: return diff;\n107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "186: public static DurationFieldType years() {\n187: return YEARS_TYPE;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "159: public static DurationFieldType weeks() {\n160: return WEEKS_TYPE;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "113: public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n114: long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n115: return difference / iUnitMillis;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "202: public static int safeToInt(long value) {\n203: if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n204: return (int) value;\n207: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "782: public int getMinutes() {\n783: return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n784: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "834: public boolean equals(Object obj) {\n835: if (this == obj) {\n838: if (obj instanceof PeriodType == false) {\n841: PeriodType other = (PeriodType) obj;\n842: return (Arrays.equals(iTypes, other.iTypes));\n843: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "894: public Period withYears(int years) {\n895: int[] values = getValues();  // cloned\n896: getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n897: return new Period(values, getPeriodType());\n898: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "673: int getIndexedField(ReadablePeriod period, int index) {\n674: int realIndex = iIndices[index];\n675: return (realIndex == -1 ? 0 : period.getValue(realIndex));\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "136: public int indexOf(DurationFieldType type) {\n137: return getPeriodType().indexOf(type);\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "800: public int getMillis() {\n801: return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n802: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "87: protected BasePeriod(int years, int months, int weeks, int days,\n90: super();\n91: type = checkPeriodType(type);\n92: iType = type;\n93: iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n94: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2",
                            "test_body": "1527: public void testNormalizedStandard_periodType_months2() {\n1528: Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n1529: Period result = test.normalizedStandard(PeriodType.months());\n1530: assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n1531: assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n1532: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "328: public int getValue(int index) {\n329: return iValues[index];\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "443: public Period(long duration, PeriodType type, Chronology chronology) {\n444: super(duration, type, chronology);\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public static final PeriodType getPeriodType(PeriodType type) {\n318: if (type == null) {\n321: return type;\n322: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "94: public int[] getValues() {\n95: int[] result = new int[size()];\n96: for (int i = 0; i < result.length; i++) {\n97: result[i] = getValue(i);\n99: return result;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "763: public int getDays() {\n764: return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n765: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "773: public int getHours() {\n774: return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "113: public static DurationFieldType seconds() {\n114: return SECONDS_TYPE;\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "451: private int[] setPeriodInternal(int years, int months, int weeks, int days,\n453: int[] newValues = new int[size()];\n454: checkAndUpdate(DurationFieldType.years(), newValues, years);\n455: checkAndUpdate(DurationFieldType.months(), newValues, months);\n456: checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);\n457: checkAndUpdate(DurationFieldType.days(), newValues, days);\n458: checkAndUpdate(DurationFieldType.hours(), newValues, hours);\n459: checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);\n460: checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);\n461: checkAndUpdate(DurationFieldType.millis(), newValues, millis);\n462: return newValues;\n463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "1616: public Period normalizedStandard(PeriodType type) {\n1617: type = DateTimeUtils.getPeriodType(type);\n1618: long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n1619: millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n1620: millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n1621: millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n1622: millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n1623: millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n1624: Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n1625: int years = getYears();\n1626: int months = getMonths();\n1627: if (years != 0 || months != 0) {\n1628: years = FieldUtils.safeAdd(years, months / 12);\n1629: months = months % 12;\n1630: if (years != 0) {\n1631: result = result.withYears(years);\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public PeriodType getPeriodType() {\n318: return iType;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "745: public int getMonths() {\n746: return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n747: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "122: public static DurationFieldType minutes() {\n123: return MINUTES_TYPE;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:months()Lorg/joda/time/PeriodType;",
                                    "method_body": "371: public static PeriodType months() {\n372: PeriodType type = cMonths;\n373: if (type == null) {\n381: return type;\n382: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "647: public int indexOf(DurationFieldType type) {\n648: for (int i = 0, isize = size(); i < isize; i++) {\n649: if (iTypes[i] == type) {\n650: return i;\n654: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "307: protected PeriodType checkPeriodType(PeriodType type) {\n308: return DateTimeUtils.getPeriodType(type);\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "327: public Period(int years, int months, int weeks, int days,\n329: super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "687: boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n688: int realIndex = iIndices[index];\n689: if (realIndex == -1) {\n690: throw new UnsupportedOperationException(\"Field is not supported\");\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "736: public int getYears() {\n737: return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "55: public int size() {\n56: return getPeriodType().size();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "791: public int getSeconds() {\n792: return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "253: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n254: super();\n255: type = checkPeriodType(type);\n256: chrono = DateTimeUtils.getChronology(chrono);\n257: iType = type;\n258: iValues = chrono.get(this, duration);\n259: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "754: public int getWeeks() {\n755: return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "389: private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n390: int index = indexOf(type);\n391: if (index == -1) {\n397: values[index] = newValue;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "131: public static DurationFieldType hours() {\n132: return HOURS_TYPE;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "186: public static DurationFieldType years() {\n187: return YEARS_TYPE;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "159: public static DurationFieldType weeks() {\n160: return WEEKS_TYPE;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "782: public int getMinutes() {\n783: return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n784: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "894: public Period withYears(int years) {\n895: int[] values = getValues();  // cloned\n896: getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n897: return new Period(values, getPeriodType());\n898: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "673: int getIndexedField(ReadablePeriod period, int index) {\n674: int realIndex = iIndices[index];\n675: return (realIndex == -1 ? 0 : period.getValue(realIndex));\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "136: public int indexOf(DurationFieldType type) {\n137: return getPeriodType().indexOf(type);\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "800: public int getMillis() {\n801: return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n802: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "87: protected BasePeriod(int years, int months, int weeks, int days,\n90: super();\n91: type = checkPeriodType(type);\n92: iType = type;\n93: iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n94: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1",
                            "test_body": "1520: public void testNormalizedStandard_periodType_months1() {\n1521: Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n1522: Period result = test.normalizedStandard(PeriodType.months());\n1523: assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n1524: assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n1525: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "328: public int getValue(int index) {\n329: return iValues[index];\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "443: public Period(long duration, PeriodType type, Chronology chronology) {\n444: super(duration, type, chronology);\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public static final PeriodType getPeriodType(PeriodType type) {\n318: if (type == null) {\n321: return type;\n322: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "94: public int[] getValues() {\n95: int[] result = new int[size()];\n96: for (int i = 0; i < result.length; i++) {\n97: result[i] = getValue(i);\n99: return result;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "763: public int getDays() {\n764: return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n765: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "773: public int getHours() {\n774: return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "113: public static DurationFieldType seconds() {\n114: return SECONDS_TYPE;\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "451: private int[] setPeriodInternal(int years, int months, int weeks, int days,\n453: int[] newValues = new int[size()];\n454: checkAndUpdate(DurationFieldType.years(), newValues, years);\n455: checkAndUpdate(DurationFieldType.months(), newValues, months);\n456: checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);\n457: checkAndUpdate(DurationFieldType.days(), newValues, days);\n458: checkAndUpdate(DurationFieldType.hours(), newValues, hours);\n459: checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);\n460: checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);\n461: checkAndUpdate(DurationFieldType.millis(), newValues, millis);\n462: return newValues;\n463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "1616: public Period normalizedStandard(PeriodType type) {\n1617: type = DateTimeUtils.getPeriodType(type);\n1618: long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n1619: millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n1620: millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n1621: millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n1622: millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n1623: millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n1624: Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n1625: int years = getYears();\n1626: int months = getMonths();\n1627: if (years != 0 || months != 0) {\n1628: years = FieldUtils.safeAdd(years, months / 12);\n1629: months = months % 12;\n1630: if (years != 0) {\n1631: result = result.withYears(years);\n1638: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public PeriodType getPeriodType() {\n318: return iType;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "745: public int getMonths() {\n746: return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n747: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "122: public static DurationFieldType minutes() {\n123: return MINUTES_TYPE;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:months()Lorg/joda/time/PeriodType;",
                                    "method_body": "371: public static PeriodType months() {\n372: PeriodType type = cMonths;\n373: if (type == null) {\n381: return type;\n382: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "647: public int indexOf(DurationFieldType type) {\n648: for (int i = 0, isize = size(); i < isize; i++) {\n649: if (iTypes[i] == type) {\n650: return i;\n654: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "307: protected PeriodType checkPeriodType(PeriodType type) {\n308: return DateTimeUtils.getPeriodType(type);\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "327: public Period(int years, int months, int weeks, int days,\n329: super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "687: boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n688: int realIndex = iIndices[index];\n689: if (realIndex == -1) {\n690: throw new UnsupportedOperationException(\"Field is not supported\");\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "736: public int getYears() {\n737: return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "55: public int size() {\n56: return getPeriodType().size();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "791: public int getSeconds() {\n792: return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "547: FixedMillisProvider(long fixedMillis) {\n548: iMillis = fixedMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "160: private static void checkPermission() throws SecurityException {\n161: SecurityManager sm = System.getSecurityManager();\n162: if (sm != null) {\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "253: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n254: super();\n255: type = checkPeriodType(type);\n256: chrono = DateTimeUtils.getChronology(chrono);\n257: iType = type;\n258: iValues = chrono.get(this, duration);\n259: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "754: public int getWeeks() {\n755: return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "389: private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n390: int index = indexOf(type);\n391: if (index == -1) {\n397: values[index] = newValue;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "131: public static DurationFieldType hours() {\n132: return HOURS_TYPE;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "99: public static final void setCurrentMillisSystem() throws SecurityException {\n100: checkPermission();\n101: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "186: public static DurationFieldType years() {\n187: return YEARS_TYPE;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "159: public static DurationFieldType weeks() {\n160: return WEEKS_TYPE;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "782: public int getMinutes() {\n783: return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n784: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "283: public static final Chronology getChronology(Chronology chrono) {\n284: if (chrono == null) {\n287: return chrono;\n288: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "894: public Period withYears(int years) {\n895: int[] values = getValues();  // cloned\n896: getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n897: return new Period(values, getPeriodType());\n898: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "113: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n114: checkPermission();\n115: cMillisProvider = new FixedMillisProvider(fixedMillis);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "673: int getIndexedField(ReadablePeriod period, int index) {\n674: int realIndex = iIndices[index];\n675: return (realIndex == -1 ? 0 : period.getValue(realIndex));\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "136: public int indexOf(DurationFieldType type) {\n137: return getPeriodType().indexOf(type);\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "800: public int getMillis() {\n801: return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n802: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "87: protected BasePeriod(int years, int months, int weeks, int days,\n90: super();\n91: type = checkPeriodType(type);\n92: iType = type;\n93: iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n94: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 6,
                    "tests": [
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover",
                            "test_body": "121: public void test_plusWeekyears_positiveToNegative_crossCutover() {\n122: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n123: LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n124: assertEquals(expected, date.weekyear().addToCopy(-2004));\n125: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "305: public Chronology withUTC() {\n306: return withZone(DateTimeZone.UTC);\n307: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "609: protected long getLocalMillis() {\n610: return iLocalMillis;\n611: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n411: i2 = i2 - unitMillis + 1;\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2695: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2696: DateTimePrinter[] elements = iPrinters;\n2697: if (elements == null) {\n2701: if (locale == null) {\n2703: locale = Locale.getDefault();\n2706: int len = elements.length;\n2707: for (int i=0; i<len; i++) {\n2708: elements[i].printTo(buf, partial, locale);\n2710: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "290: public DateTimeZone getZone() {\n292: if ((base = getBase()) != null) {\n295: return DateTimeZone.UTC;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "1040: LocalDate withLocalMillis(long newMillis) {\n1041: newMillis = iChronology.dayOfMonth().roundFloor(newMillis);\n1042: return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n1043: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "451: abstract int getMonthOfYear(long millis, int year);\n457: int year = getYear(millis);\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "71: public long add(long instant, int years) {\n72: if (years == 0) {\n75: return set(instant, get(instant) + years);\n76: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:add(JI)J",
                                    "method_body": "973: public long add(long instant, int value) {\n974: if (instant >= iCutover) {\n975: instant = iGregorianField.add(instant, value);\n976: if (instant < iCutover) {\n978: if (instant + iGapDuration < iCutover) {\n979: instant = gregorianToJulian(instant);\n992: return instant;\n993: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n749: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n750: iYearInfoCache[year & CACHE_MASK] = info;\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.AbstractReadableInstantFieldProperty:<init>()V",
                                    "method_body": "54: public AbstractReadableInstantFieldProperty() {\n55: super();\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "630: public boolean equals(Object partial) {\n632: if (this == partial) {\n635: if (partial instanceof LocalDate) {\n636: LocalDate other = (LocalDate) partial;\n637: if (iChronology.equals(other.iChronology)) {\n638: return iLocalMillis == other.iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withDayOfWeek(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1707: public LocalDate withDayOfWeek(int dayOfWeek) {\n1708: return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n1709: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "260: long getApproxMillisAtEpochDividedByTwo() {\n261: return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByWeekyear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "94: private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\n96: newInstant = to.weekyear().set(0, from.weekyear().get(instant));\n97: newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\n98: newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\n99: newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\n100: return newInstant;\n101: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "539: int getDayOfWeek(long instant) {\n543: if (instant >= 0) {\n544: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n546: daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))\n548: if (daysSince19700101 < -3) {\n549: return 7 + (int) ((daysSince19700101 + 4) % 7);\n553: return 1 + (int) ((daysSince19700101 + 3) % 7);\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "240: int getMinYear() {\n241: return MIN_YEAR;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "210: boolean isLeapYear(int year) {\n211: return (year & 3) == 0;\n212: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "501: int getWeekyear(long instant) {\n502: int year = getYear(instant);\n503: int week = getWeekOfWeekyear(instant, year);\n504: if (week == 1) {\n505: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n506: } else if (week > 51) {\n507: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n509: return year;\n511: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "569: public boolean isSupported(DateTimeFieldType type) {\n570: if (type == null) {\n573: DurationFieldType durType = type.getDurationType();\n574: if (DATE_DURATION_TYPES.contains(durType) ||\n577: return type.getField(getChronology()).isSupported();\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:weekyear()Lorg/joda/time/LocalDate$Property;",
                                    "method_body": "1762: public Property weekyear() {\n1763: return new Property(this, getChronology().weekyear());\n1764: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getMaximumValue()I",
                                    "method_body": "227: public int getMaximumValue() {\n228: return iChronology.getMaxYear();\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "524: int getWeekOfWeekyear(long instant, int year) {\n525: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n526: if (instant < firstWeekMillis1) {\n529: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n530: if (instant >= firstWeekMillis2) {\n531: return 1;\n533: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n534: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "718: public long set(long instant, int value) {\n719: if (instant >= iCutover) {\n733: instant = iJulianField.set(instant, value);\n734: if (instant >= iCutover) {\n746: return instant;\n747: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1818: public String toString() {\n1819: return ISODateTimeFormat.date().print(this);\n1820: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "658: private DateTimePrinter requirePrinter() {\n659: DateTimePrinter printer = iPrinter;\n660: if (printer == null) {\n663: return printer;\n664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getMaximumValue()I",
                                    "method_body": "227: public int getMaximumValue() {\n228: return iField.getMaximumValue();\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n563: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "443: int getMonthOfYear(long millis) {\n444: return getMonthOfYear(millis, getYear(millis));\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "990: public static DateTimeFormatter yearMonthDay() {\n991: return Constants.ymd;\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "534: public void printTo(StringBuffer buf, ReadablePartial partial) {\n535: DateTimePrinter printer = requirePrinter();\n536: if (partial == null) {\n539: printer.printTo(buf, partial, iLocale);\n540: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "244: int getMaxYear() {\n245: return MAX_YEAR;\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getWeekOfWeekyear()I",
                                    "method_body": "1499: public int getWeekOfWeekyear() {\n1500: return getChronology().weekOfWeekyear().get(getLocalMillis());\n1501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "657: public static DateTimeFormatter date() {\n658: return yearMonthDay();\n659: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "613: public String print(ReadablePartial partial) {\n614: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n615: printTo(buf, partial);\n616: return buf.toString();\n617: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "335: int getWeeksInYear(int year) {\n336: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n337: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n338: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n339: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:set(JI)J",
                                    "method_body": "87: public long set(long millis, int value) {\n88: FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\n89: if (value <= iSkip) {\n90: if (value == iSkip) {\n91: throw new IllegalFieldValueException\n94: value++;\n96: return super.set(millis, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "77: static int adjustYearForSet(int year) {\n78: if (year <= 0) {\n79: if (year == 0) {\n80: throw new IllegalFieldValueException\n83: year++;\n85: return year;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByWeekyear(J)J",
                                    "method_body": "595: long gregorianToJulianByWeekyear(long instant) {\n596: return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n597: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
                                    "method_body": "920: protected long gregorianToJulian(long instant) {\n921: if (iConvertByWeekyear) {\n922: return gregorianToJulianByWeekyear(instant);\n924: return gregorianToJulianByYear(instant);\n926: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "252: long getAverageMillisPerYearDividedByTwo() {\n253: return MILLIS_PER_YEAR / 2;\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "325: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n330: if ((base = getBase()) != null) {\n335: long instant = iGregorianChronology.getDateTimeMillis\n337: if (instant < iCutoverMillis) {\n339: instant = iJulianChronology.getDateTimeMillis\n341: if (instant >= iCutoverMillis) {\n346: return instant;\n347: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "618: public Chronology getChronology() {\n619: return iChronology;\n620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long millis) {\n80: int value = super.get(millis);\n81: if (value <= iSkip) {\n82: value--;\n84: return value;\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:<init>(Lorg/joda/time/LocalDate;Lorg/joda/time/DateTimeField;)V",
                                    "method_body": "1893: Property(LocalDate instant, DateTimeField field) {\n1894: super();\n1895: iInstant = instant;\n1896: iField = field;\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "315: public Chronology withZone(DateTimeZone zone) {\n316: if (zone == null) {\n319: if (zone == getZone()) {\n320: return this;\n323: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1493: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1494: if (partial.isSupported(iFieldType)) {\n1496: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1499: }\n1503: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1053: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1054: if (newZone == null) {\n1057: if (newZone == this) {\n1058: return oldInstant;\n1062: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "450: public LocalDate(\n455: super();\n456: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n457: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n458: iChronology = chronology;\n459: iLocalMillis = instant;\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "347: long getFirstWeekOfYearMillis(int year) {\n348: long jan1millis = getYearMillis(year);\n349: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n351: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n353: return jan1millis + (8 - jan1dayOfWeek)\n357: return jan1millis - (jan1dayOfWeek - 1)\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "872: public long roundFloor(long instant) {\n873: if (instant >= iCutover) {\n882: instant = iJulianField.roundFloor(instant);\n884: return instant;\n885: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1227: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1228: buf.append(iValue);\n1229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "335: public LocalDate(long instant, Chronology chronology) {\n336: chronology = DateTimeUtils.getChronology(chronology);\n338: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n339: chronology = chronology.withUTC();\n340: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n341: iChronology = chronology;\n342: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "551: public int get(DateTimeFieldType fieldType) {\n552: if (fieldType == null) {\n555: if (isSupported(fieldType) == false) {\n558: return fieldType.getField(getChronology()).get(getLocalMillis());\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n95: instant += 1;\n96: return instant - instant % iUnitMillis - iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1964: public LocalDate addToCopy(int value) {\n1965: return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n1966: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n181: } else if ( workWoyYear > year ) {\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "652: public int get(long instant) {\n653: if (instant >= iCutover) {\n654: return iGregorianField.get(instant);\n656: return iJulianField.get(instant);\n658: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:set(JI)J",
                                    "method_body": "171: public long set(long instant, int value) {\n172: return iField.set(instant, value);\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "516: int getWeekOfWeekyear(long instant) {\n517: return getWeekOfWeekyear(instant, getYear(instant));\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "204: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n207: return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withWeekOfWeekyear(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1662: public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {\n1663: return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n1664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getDayOfWeek()I",
                                    "method_body": "1530: public int getDayOfWeek() {\n1531: return getChronology().dayOfWeek().get(getLocalMillis());\n1532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "416: public boolean equals(Object obj) {\n417: if (this == obj) {\n418: return true;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "95: public int get(long instant) {\n96: return iField.get(instant);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
                            "test_body": "96: public void test_plusYears_positiveToZero_crossCutover() {\n97: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n98: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\n99: assertEquals(expected, date.plusYears(-2003));\n100: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "305: public Chronology withUTC() {\n306: return withZone(DateTimeZone.UTC);\n307: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "609: protected long getLocalMillis() {\n610: return iLocalMillis;\n611: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n411: i2 = i2 - unitMillis + 1;\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
                                    "method_body": "1098: public long add(long instant, int value) {\n1099: return iField.add(instant, value);\n1100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "83: private static long convertByYear(long instant, Chronology from, Chronology to) {\n84: return to.getDateTimeMillis\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "290: public DateTimeZone getZone() {\n292: if ((base = getBase()) != null) {\n295: return DateTimeZone.UTC;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "451: abstract int getMonthOfYear(long millis, int year);\n457: int year = getYear(millis);\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n749: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n750: iYearInfoCache[year & CACHE_MASK] = info;\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n45: if (upperBound == null) {\n46: buf.append(\"is not supported\");\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "240: int getMinYear() {\n241: return MIN_YEAR;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "210: boolean isLeapYear(int year) {\n211: return (year & 3) == 0;\n212: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n563: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "443: int getMonthOfYear(long millis) {\n444: return getMonthOfYear(millis, getYear(millis));\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "244: int getMaxYear() {\n245: return MAX_YEAR;\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "77: static int adjustYearForSet(int year) {\n78: if (year <= 0) {\n79: if (year == 0) {\n80: throw new IllegalFieldValueException\n83: year++;\n85: return year;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
                                    "method_body": "587: long gregorianToJulianByYear(long instant) {\n588: return convertByYear(instant, iGregorianChronology, iJulianChronology);\n589: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "325: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n330: if ((base = getBase()) != null) {\n335: long instant = iGregorianChronology.getDateTimeMillis\n337: if (instant < iCutoverMillis) {\n339: instant = iJulianChronology.getDateTimeMillis\n341: if (instant >= iCutoverMillis) {\n346: return instant;\n347: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "618: public Chronology getChronology() {\n619: return iChronology;\n620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "315: public Chronology withZone(DateTimeZone zone) {\n316: if (zone == null) {\n319: if (zone == getZone()) {\n320: return this;\n323: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "450: public LocalDate(\n455: super();\n456: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n457: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n458: iChronology = chronology;\n459: iLocalMillis = instant;\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:plusYears(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1201: public LocalDate plusYears(int years) {\n1202: if (years == 0) {\n1205: long instant = getChronology().years().add(getLocalMillis(), years);\n1206: return withLocalMillis(instant);\n1207: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "204: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n207: return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover",
                            "test_body": "115: public void test_plusWeekyears_positiveToZero_crossCutover() {\n116: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n117: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n118: assertEquals(expected, date.weekyear().addToCopy(-2003));\n119: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "305: public Chronology withUTC() {\n306: return withZone(DateTimeZone.UTC);\n307: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "609: protected long getLocalMillis() {\n610: return iLocalMillis;\n611: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n411: i2 = i2 - unitMillis + 1;\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "290: public DateTimeZone getZone() {\n292: if ((base = getBase()) != null) {\n295: return DateTimeZone.UTC;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "1040: LocalDate withLocalMillis(long newMillis) {\n1041: newMillis = iChronology.dayOfMonth().roundFloor(newMillis);\n1042: return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n1043: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "71: public long add(long instant, int years) {\n72: if (years == 0) {\n75: return set(instant, get(instant) + years);\n76: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n749: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n750: iYearInfoCache[year & CACHE_MASK] = info;\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.AbstractReadableInstantFieldProperty:<init>()V",
                                    "method_body": "54: public AbstractReadableInstantFieldProperty() {\n55: super();\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n45: if (upperBound == null) {\n46: buf.append(\"is not supported\");\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withDayOfWeek(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1707: public LocalDate withDayOfWeek(int dayOfWeek) {\n1708: return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n1709: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "260: long getApproxMillisAtEpochDividedByTwo() {\n261: return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByWeekyear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "94: private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\n96: newInstant = to.weekyear().set(0, from.weekyear().get(instant));\n97: newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\n98: newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\n99: newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\n100: return newInstant;\n101: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "539: int getDayOfWeek(long instant) {\n543: if (instant >= 0) {\n544: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n546: daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))\n548: if (daysSince19700101 < -3) {\n549: return 7 + (int) ((daysSince19700101 + 4) % 7);\n553: return 1 + (int) ((daysSince19700101 + 3) % 7);\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "240: int getMinYear() {\n241: return MIN_YEAR;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "210: boolean isLeapYear(int year) {\n211: return (year & 3) == 0;\n212: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "501: int getWeekyear(long instant) {\n502: int year = getYear(instant);\n503: int week = getWeekOfWeekyear(instant, year);\n504: if (week == 1) {\n505: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n506: } else if (week > 51) {\n507: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n509: return year;\n511: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:weekyear()Lorg/joda/time/LocalDate$Property;",
                                    "method_body": "1762: public Property weekyear() {\n1763: return new Property(this, getChronology().weekyear());\n1764: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getMaximumValue()I",
                                    "method_body": "227: public int getMaximumValue() {\n228: return iChronology.getMaxYear();\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "524: int getWeekOfWeekyear(long instant, int year) {\n525: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n526: if (instant < firstWeekMillis1) {\n529: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n530: if (instant >= firstWeekMillis2) {\n531: return 1;\n533: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n534: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "718: public long set(long instant, int value) {\n719: if (instant >= iCutover) {\n733: instant = iJulianField.set(instant, value);\n734: if (instant >= iCutover) {\n746: return instant;\n747: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getMaximumValue()I",
                                    "method_body": "227: public int getMaximumValue() {\n228: return iField.getMaximumValue();\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n563: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "244: int getMaxYear() {\n245: return MAX_YEAR;\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getWeekOfWeekyear()I",
                                    "method_body": "1499: public int getWeekOfWeekyear() {\n1500: return getChronology().weekOfWeekyear().get(getLocalMillis());\n1501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "335: int getWeeksInYear(int year) {\n336: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n337: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n338: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n339: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:set(JI)J",
                                    "method_body": "87: public long set(long millis, int value) {\n88: FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\n89: if (value <= iSkip) {\n90: if (value == iSkip) {\n91: throw new IllegalFieldValueException\n94: value++;\n96: return super.set(millis, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "77: static int adjustYearForSet(int year) {\n78: if (year <= 0) {\n79: if (year == 0) {\n80: throw new IllegalFieldValueException\n83: year++;\n85: return year;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByWeekyear(J)J",
                                    "method_body": "595: long gregorianToJulianByWeekyear(long instant) {\n596: return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n597: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
                                    "method_body": "920: protected long gregorianToJulian(long instant) {\n921: if (iConvertByWeekyear) {\n922: return gregorianToJulianByWeekyear(instant);\n924: return gregorianToJulianByYear(instant);\n926: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "252: long getAverageMillisPerYearDividedByTwo() {\n253: return MILLIS_PER_YEAR / 2;\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "325: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n330: if ((base = getBase()) != null) {\n335: long instant = iGregorianChronology.getDateTimeMillis\n337: if (instant < iCutoverMillis) {\n339: instant = iJulianChronology.getDateTimeMillis\n341: if (instant >= iCutoverMillis) {\n346: return instant;\n347: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "618: public Chronology getChronology() {\n619: return iChronology;\n620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:<init>(Lorg/joda/time/LocalDate;Lorg/joda/time/DateTimeField;)V",
                                    "method_body": "1893: Property(LocalDate instant, DateTimeField field) {\n1894: super();\n1895: iInstant = instant;\n1896: iField = field;\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "315: public Chronology withZone(DateTimeZone zone) {\n316: if (zone == null) {\n319: if (zone == getZone()) {\n320: return this;\n323: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1053: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1054: if (newZone == null) {\n1057: if (newZone == this) {\n1058: return oldInstant;\n1062: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "450: public LocalDate(\n455: super();\n456: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n457: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n458: iChronology = chronology;\n459: iLocalMillis = instant;\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "347: long getFirstWeekOfYearMillis(int year) {\n348: long jan1millis = getYearMillis(year);\n349: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n351: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n353: return jan1millis + (8 - jan1dayOfWeek)\n357: return jan1millis - (jan1dayOfWeek - 1)\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "872: public long roundFloor(long instant) {\n873: if (instant >= iCutover) {\n882: instant = iJulianField.roundFloor(instant);\n884: return instant;\n885: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "335: public LocalDate(long instant, Chronology chronology) {\n336: chronology = DateTimeUtils.getChronology(chronology);\n338: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n339: chronology = chronology.withUTC();\n340: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n341: iChronology = chronology;\n342: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n95: instant += 1;\n96: return instant - instant % iUnitMillis - iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1964: public LocalDate addToCopy(int value) {\n1965: return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n1966: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n181: } else if ( workWoyYear > year ) {\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "652: public int get(long instant) {\n653: if (instant >= iCutover) {\n654: return iGregorianField.get(instant);\n656: return iJulianField.get(instant);\n658: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "516: int getWeekOfWeekyear(long instant) {\n517: return getWeekOfWeekyear(instant, getYear(instant));\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "204: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n207: return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withWeekOfWeekyear(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1662: public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {\n1663: return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n1664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getDayOfWeek()I",
                                    "method_body": "1530: public int getDayOfWeek() {\n1531: return getChronology().dayOfWeek().get(getLocalMillis());\n1532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover",
                            "test_body": "102: public void test_plusYears_positiveToNegative_crossCutover() {\n103: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n104: LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);\n105: assertEquals(expected, date.plusYears(-2004));\n106: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "305: public Chronology withUTC() {\n306: return withZone(DateTimeZone.UTC);\n307: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "609: protected long getLocalMillis() {\n610: return iLocalMillis;\n611: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n411: i2 = i2 - unitMillis + 1;\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
                                    "method_body": "1098: public long add(long instant, int value) {\n1099: return iField.add(instant, value);\n1100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2695: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2696: DateTimePrinter[] elements = iPrinters;\n2697: if (elements == null) {\n2701: if (locale == null) {\n2703: locale = Locale.getDefault();\n2706: int len = elements.length;\n2707: for (int i=0; i<len; i++) {\n2708: elements[i].printTo(buf, partial, locale);\n2710: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "83: private static long convertByYear(long instant, Chronology from, Chronology to) {\n84: return to.getDateTimeMillis\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "290: public DateTimeZone getZone() {\n292: if ((base = getBase()) != null) {\n295: return DateTimeZone.UTC;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "1040: LocalDate withLocalMillis(long newMillis) {\n1041: newMillis = iChronology.dayOfMonth().roundFloor(newMillis);\n1042: return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n1043: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "451: abstract int getMonthOfYear(long millis, int year);\n457: int year = getYear(millis);\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:add(JI)J",
                                    "method_body": "973: public long add(long instant, int value) {\n974: if (instant >= iCutover) {\n975: instant = iGregorianField.add(instant, value);\n976: if (instant < iCutover) {\n978: if (instant + iGapDuration < iCutover) {\n979: instant = gregorianToJulian(instant);\n992: return instant;\n993: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n749: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n750: iYearInfoCache[year & CACHE_MASK] = info;\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "630: public boolean equals(Object partial) {\n632: if (this == partial) {\n635: if (partial instanceof LocalDate) {\n636: LocalDate other = (LocalDate) partial;\n637: if (iChronology.equals(other.iChronology)) {\n638: return iLocalMillis == other.iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "260: long getApproxMillisAtEpochDividedByTwo() {\n261: return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "240: int getMinYear() {\n241: return MIN_YEAR;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "210: boolean isLeapYear(int year) {\n211: return (year & 3) == 0;\n212: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "569: public boolean isSupported(DateTimeFieldType type) {\n570: if (type == null) {\n573: DurationFieldType durType = type.getDurationType();\n574: if (DATE_DURATION_TYPES.contains(durType) ||\n577: return type.getField(getChronology()).isSupported();\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1818: public String toString() {\n1819: return ISODateTimeFormat.date().print(this);\n1820: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "658: private DateTimePrinter requirePrinter() {\n659: DateTimePrinter printer = iPrinter;\n660: if (printer == null) {\n663: return printer;\n664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n563: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "443: int getMonthOfYear(long millis) {\n444: return getMonthOfYear(millis, getYear(millis));\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "990: public static DateTimeFormatter yearMonthDay() {\n991: return Constants.ymd;\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "534: public void printTo(StringBuffer buf, ReadablePartial partial) {\n535: DateTimePrinter printer = requirePrinter();\n536: if (partial == null) {\n539: printer.printTo(buf, partial, iLocale);\n540: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "244: int getMaxYear() {\n245: return MAX_YEAR;\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "657: public static DateTimeFormatter date() {\n658: return yearMonthDay();\n659: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "613: public String print(ReadablePartial partial) {\n614: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n615: printTo(buf, partial);\n616: return buf.toString();\n617: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "77: static int adjustYearForSet(int year) {\n78: if (year <= 0) {\n79: if (year == 0) {\n80: throw new IllegalFieldValueException\n83: year++;\n85: return year;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "252: long getAverageMillisPerYearDividedByTwo() {\n253: return MILLIS_PER_YEAR / 2;\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
                                    "method_body": "587: long gregorianToJulianByYear(long instant) {\n588: return convertByYear(instant, iGregorianChronology, iJulianChronology);\n589: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "325: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n330: if ((base = getBase()) != null) {\n335: long instant = iGregorianChronology.getDateTimeMillis\n337: if (instant < iCutoverMillis) {\n339: instant = iJulianChronology.getDateTimeMillis\n341: if (instant >= iCutoverMillis) {\n346: return instant;\n347: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "618: public Chronology getChronology() {\n619: return iChronology;\n620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long millis) {\n80: int value = super.get(millis);\n81: if (value <= iSkip) {\n82: value--;\n84: return value;\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "315: public Chronology withZone(DateTimeZone zone) {\n316: if (zone == null) {\n319: if (zone == getZone()) {\n320: return this;\n323: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1493: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1494: if (partial.isSupported(iFieldType)) {\n1496: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1499: }\n1503: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1053: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1054: if (newZone == null) {\n1057: if (newZone == this) {\n1058: return oldInstant;\n1062: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "450: public LocalDate(\n455: super();\n456: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n457: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n458: iChronology = chronology;\n459: iLocalMillis = instant;\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "872: public long roundFloor(long instant) {\n873: if (instant >= iCutover) {\n882: instant = iJulianField.roundFloor(instant);\n884: return instant;\n885: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1227: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1228: buf.append(iValue);\n1229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "335: public LocalDate(long instant, Chronology chronology) {\n336: chronology = DateTimeUtils.getChronology(chronology);\n338: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n339: chronology = chronology.withUTC();\n340: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n341: iChronology = chronology;\n342: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "551: public int get(DateTimeFieldType fieldType) {\n552: if (fieldType == null) {\n555: if (isSupported(fieldType) == false) {\n558: return fieldType.getField(getChronology()).get(getLocalMillis());\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n95: instant += 1;\n96: return instant - instant % iUnitMillis - iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:plusYears(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "1201: public LocalDate plusYears(int years) {\n1202: if (years == 0) {\n1205: long instant = getChronology().years().add(getLocalMillis(), years);\n1206: return withLocalMillis(instant);\n1207: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "204: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n207: return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2653: public int estimatePrintedLength() {\n2654: return iPrintedLengthEstimate;\n2655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "416: public boolean equals(Object obj) {\n417: if (this == obj) {\n418: return true;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "95: public int get(long instant) {\n96: return iField.get(instant);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
                            "test_body": "128: public void test_cutoverPreZero() {\n129: DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\n130: try {\n131: GJChronology.getInstance(DateTimeZone.UTC, cutover);\n132: fail();\n133: } catch (IllegalArgumentException ex) {\n134: // expected\n135: }\n136: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "609: protected long getLocalMillis() {\n610: return iLocalMillis;\n611: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n411: i2 = i2 - unitMillis + 1;\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundCeiling(J)J",
                                    "method_body": "126: public long roundCeiling(long instant) {\n127: int year = get(instant);\n128: long yearStartMillis = iChronology.getYearMillis(year);\n129: if (instant != yearStartMillis) {\n131: instant = iChronology.getYearMillis(year + 1);\n133: return instant;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "83: private static long convertByYear(long instant, Chronology from, Chronology to) {\n84: return to.getDateTimeMillis\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "451: abstract int getMonthOfYear(long millis, int year);\n457: int year = getYear(millis);\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "71: public long add(long instant, int years) {\n72: if (years == 0) {\n75: return set(instant, get(instant) + years);\n76: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n749: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n750: iYearInfoCache[year & CACHE_MASK] = info;\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "260: long getApproxMillisAtEpochDividedByTwo() {\n261: return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "733: public final String getID() {\n734: return iID;\n735: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "404: public int getMinimumDaysInFirstWeek() {\n405: return iGregorianChronology.getMinimumDaysInFirstWeek();\n406: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "298: public static final DateTimeZone getZone(DateTimeZone zone) {\n299: if (zone == null) {\n302: return zone;\n303: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "210: boolean isLeapYear(int year) {\n211: return (year & 3) == 0;\n212: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toDateTimeAtStartOfDay(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;",
                                    "method_body": "727: public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\n728: zone = DateTimeUtils.getZone(zone);\n729: Chronology chrono = getChronology().withZone(zone);\n730: long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;\n731: long instant = zone.convertLocalToUTC(localMillis, false);\n732: instant = chrono.dayOfMonth().roundFloor(instant);\n733: return new DateTime(instant, chrono);\n734: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "501: int getWeekyear(long instant) {\n502: int year = getYear(instant);\n503: int week = getWeekOfWeekyear(instant, year);\n504: if (week == 1) {\n505: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n506: } else if (week > 51) {\n507: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n509: return year;\n511: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: if ((base = iBase) != null && (iBaseFlags & 6) == 6) {\n120: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "231: public long roundFloor(long instant) {\n234: instant = iChronology.weekOfWeekyear().roundFloor(instant);\n235: int wow = iChronology.getWeekOfWeekyear(instant);\n236: if (wow > 1) {\n237: instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);\n239: return instant;\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:<init>(Lorg/joda/time/chrono/JulianChronology;Lorg/joda/time/chrono/GregorianChronology;Lorg/joda/time/Instant;)V",
                                    "method_body": "267: private GJChronology(JulianChronology julian,\n270: super(null, new Object[] {julian, gregorian, cutoverInstant});\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "524: int getWeekOfWeekyear(long instant, int year) {\n525: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n526: if (instant < firstWeekMillis1) {\n529: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n530: if (instant >= firstWeekMillis2) {\n531: return 1;\n533: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n534: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:<init>(J)V",
                                    "method_body": "117: public Instant(long instant) {\n118: super();\n119: iMillis = instant;\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "772: public DurationField getDurationField() {\n773: return iDurationField;\n774: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "200: long calculateFirstDayOfYearMillis(int year) {\n202: int leapYears = year / 100;\n203: if (year < 0) {\n209: leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\n211: leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n212: if (isLeapYear(year)) {\n213: leapYears--;\n217: return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "141: public DateTimeZone getZone() {\n143: if ((base = getBase()) != null) {\n146: return DateTimeZone.UTC;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "1000: public long convertLocalToUTC(long instantLocal, boolean strict) {\n1002: int offsetLocal = getOffset(instantLocal);\n1004: int offset = getOffset(instantLocal - offsetLocal);\n1006: if (offsetLocal != offset) {\n1035: long instantUTC = instantLocal - offset;\n1037: if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {\n1040: return instantUTC;\n1041: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V",
                                    "method_body": "962: ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n965: {\n966: super(julianField, gregorianField, cutoverMillis, convertByWeekyear);\n967: if (durationField == null) {\n968: durationField = new LinkedDurationField(iDurationField, this);\n970: iDurationField = durationField;\n971: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "443: int getMonthOfYear(long millis) {\n444: return getMonthOfYear(millis, getYear(millis));\n445: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "195: public DurationField getRangeDurationField() {\n196: return iField.getRangeDurationField();\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "214: long calculateFirstDayOfYearMillis(int year) {\n219: int relativeYear = year - 1968;\n221: if (relativeYear <= 0) {\n224: leapYears = (relativeYear + 3) >> 2;\n233: long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;\n237: return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:julianToGregorianByYear(J)J",
                                    "method_body": "583: long julianToGregorianByYear(long instant) {\n584: return convertByYear(instant, iJulianChronology, iGregorianChronology);\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;",
                                    "method_body": "124: public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n125: if (zone == null) {\n129: synchronized (cCache) {\n130: JulianChronology[] chronos = cCache.get(zone);\n131: if (chronos == null) {\n136: chrono = chronos[minDaysInFirstWeek - 1];\n140: }\n141: if (chrono == null) {\n151: }\n152: return chrono;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V",
                                    "method_body": "630: CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n631: long cutoverMillis, boolean convertByWeekyear) {\n632: super(gregorianField.getType());\n633: iJulianField = julianField;\n634: iGregorianField = gregorianField;\n635: iCutover = cutoverMillis;\n636: iConvertByWeekyear = convertByWeekyear;\n639: iDurationField = gregorianField.getDurationField();\n641: DurationField rangeField = gregorianField.getRangeDurationField();\n642: if (rangeField == null) {\n643: rangeField = julianField.getRangeDurationField();\n645: iRangeDurationField = rangeField;\n646: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "136: public Instant toInstant() {\n137: return new Instant(getMillis());\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
                                    "method_body": "942: ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n943: this(julianField, gregorianField, null, cutoverMillis, false);\n944: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "335: int getWeeksInYear(int year) {\n336: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n337: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n338: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n339: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "185: public static synchronized GJChronology getInstance(\n190: zone = DateTimeUtils.getZone(zone);\n192: if (gregorianCutover == null) {\n195: cutoverInstant = gregorianCutover.toInstant();\n199: synchronized (cCache) {\n200: ArrayList<GJChronology> chronos = cCache.get(zone);\n201: if (chronos == null) {\n205: for (int i = chronos.size(); --i >= 0;) {\n206: chrono = chronos.get(i);\n207: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n214: if (zone == DateTimeZone.UTC) {\n215: chrono = new GJChronology\n227: chronos.add(chrono);\n228: }\n229: return chrono;\n230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "252: long getAverageMillisPerYearDividedByTwo() {\n253: return MILLIS_PER_YEAR / 2;\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "618: public Chronology getChronology() {\n619: return iChronology;\n620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
                                    "method_body": "620: CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n621: this(julianField, gregorianField, cutoverMillis, false);\n622: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "79: public int get(long millis) {\n80: int value = super.get(millis);\n81: if (value <= iSkip) {\n82: value--;\n84: return value;\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "48: public int getOffset(long instant) {\n49: return iWallOffset;\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "219: public DateTime(long instant, Chronology chronology) {\n220: super(instant, chronology);\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "314: public DurationField getRangeDurationField() {\n315: return iChronology.years();\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "450: public LocalDate(\n455: super();\n456: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n457: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n458: iChronology = chronology;\n459: iLocalMillis = instant;\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "779: YearInfo(int year, long firstDayMillis) {\n780: iYear = year;\n781: iFirstDayMillis = firstDayMillis;\n782: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "347: long getFirstWeekOfYearMillis(int year) {\n348: long jan1millis = getYearMillis(year);\n349: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n351: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n353: return jan1millis + (8 - jan1dayOfWeek)\n357: return jan1millis - (jan1dayOfWeek - 1)\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "110: public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n111: if (zone == null) {\n115: synchronized (cCache) {\n116: GregorianChronology[] chronos = cCache.get(zone);\n117: if (chronos == null) {\n122: chrono = chronos[minDaysInFirstWeek - 1];\n126: }\n127: if (chrono == null) {\n137: }\n138: return chrono;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "395: public Instant getGregorianCutover() {\n396: return iCutoverInstant;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "255: public long getMillis() {\n256: return iMillis;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n95: instant += 1;\n96: return instant - instant % iUnitMillis - iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n181: } else if ( workWoyYear > year ) {\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;)V",
                                    "method_body": "1093: LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\n1094: super(durationField, durationField.getType());\n1095: iField = dateTimeField;\n1096: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;J)V",
                                    "method_body": "951: ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n954: this(julianField, gregorianField, durationField, cutoverMillis, false);\n955: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:roundCeiling(J)J",
                                    "method_body": "867: public abstract long roundFloor(long instant);\n886: long newInstant = roundFloor(instant);\n887: if (newInstant != instant) {\n888: instant = add(newInstant, 1);\n890: return instant;\n891: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "516: int getWeekOfWeekyear(long instant) {\n517: return getWeekOfWeekyear(instant, getYear(instant));\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "170: public static GJChronology getInstance(\n174: return getInstance(zone, gregorianCutover, 4);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "473: protected void assemble(Fields fields) {\n474: Object[] params = (Object[])getParam();\n476: JulianChronology julian = (JulianChronology)params[0];\n477: GregorianChronology gregorian = (GregorianChronology)params[1];\n478: Instant cutoverInstant = (Instant)params[2];\n479: iCutoverMillis = cutoverInstant.getMillis();\n481: iJulianChronology = julian;\n482: iGregorianChronology = gregorian;\n483: iCutoverInstant = cutoverInstant;\n485: if (getBase() != null) {\n489: if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\n494: iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\n500: fields.copyFieldsFrom(gregorian);\n506: if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {\n510: fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n511: fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n512: fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n513: fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n514: fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n515: fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n516: fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n517: fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n518: fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n519: fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\n521: fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n526: fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\n535: long cutover = gregorian.year().roundCeiling(iCutoverMillis);\n536: fields.dayOfYear = new CutoverField(\n541: long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\n542: fields.weekOfWeekyear = new CutoverField(\n550: fields.year = new ImpreciseCutoverField(\n552: fields.years = fields.year.getDurationField();\n553: fields.yearOfEra = new ImpreciseCutoverField(\n555: fields.yearOfCentury = new ImpreciseCutoverField(\n558: fields.centuryOfEra = new ImpreciseCutoverField(\n560: fields.centuries = fields.centuryOfEra.getDurationField();\n562: fields.monthOfYear = new ImpreciseCutoverField(\n564: fields.months = fields.monthOfYear.getDurationField();\n566: fields.weekyear = new ImpreciseCutoverField(\n568: fields.weekyearOfCentury = new ImpreciseCutoverField(\n570: fields.weekyears = fields.weekyear.getDurationField();\n576: CutoverField cf = new CutoverField\n578: cf.iRangeDurationField = fields.months;\n579: fields.dayOfMonth = cf;\n581: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "51: public DecoratedDurationField(DurationField field, DurationFieldType type) {\n52: super(type);\n53: if (field == null) {\n56: if (!field.isSupported()) {\n59: iField = field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n370: flags = 0;\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "95: public int get(long instant) {\n96: return iField.get(instant);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 7,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo_endOfYear",
                            "test_body": "957: public void testParseInto_monthDay_feb29_tokyo_endOfYear() {\n958: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n959: MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);\n960: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n961: assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);\n962: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "381: private DateTimeFormatterBuilder append0(\n383: iFormatter = null;\n384: iElementPairs.add(printer);\n385: iElementPairs.add(parser);\n386: return this;\n387: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "908: public int getOffsetFromLocal(long instantLocal) {\n910: final int offsetLocal = getOffset(instantLocal);\n912: final long instantAdjusted = instantLocal - offsetLocal;\n913: final int offsetAdjusted = getOffset(instantAdjusted);\n915: if (offsetLocal != offsetAdjusted) {\n928: } else if (offsetLocal >= 0) {\n929: long prev = previousTransition(instantAdjusted);\n930: if (prev < instantAdjusted) {\n931: int offsetPrev = getOffset(prev);\n932: int diff = offsetPrev - offsetLocal;\n933: if (instantAdjusted - prev <= diff) {\n938: return offsetAdjusted;\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1206: CharacterLiteral(char value) {\n1207: super();\n1208: iValue = value;\n1209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "927: private DateTimeParser requireParser() {\n928: DateTimeParser parser = iParser;\n929: if (parser == null) {\n932: return parser;\n933: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "216: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n217: if (formatter == null) {\n220: return append0(formatter.getPrinter(), formatter.getParser());\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "83: public DateTimeFormatterBuilder() {\n84: super();\n85: iElementPairs = new ArrayList<Object>();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "173: public DateTimeParser getParser() {\n174: return iParser;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "118: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n120: super();\n121: chrono = DateTimeUtils.getChronology(chrono);\n122: iMillis = instantLocal;\n123: iZone = chrono.getZone();\n124: iChrono = chrono.withUTC();\n125: iLocale = (locale == null ? Locale.getDefault() : locale);\n126: iPivotYear = pivotYear;\n127: iDefaultYear = defaultYear;\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1137: private Object getFormatter() {\n1138: Object f = iFormatter;\n1140: if (f == null) {\n1141: if (iElementPairs.size() == 2) {\n1154: if (f == null) {\n1155: f = new Composite(iElementPairs);\n1158: iFormatter = f;\n1161: return f;\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "373: private DateTimeFormatterBuilder append0(Object element) {\n374: iFormatter = null;\n376: iElementPairs.add(element);\n377: iElementPairs.add(element);\n378: return this;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "344: public long computeMillis(boolean resetFields, String text) {\n345: SavedField[] savedFields = iSavedFields;\n346: int count = iSavedFieldsCount;\n347: if (iSavedFieldsShared) {\n351: sort(savedFields, count);\n352: if (count > 0) {\n354: DurationField months = DurationFieldType.months().getField(iChrono);\n355: DurationField days = DurationFieldType.days().getField(iChrono);\n356: DurationField first = savedFields[0].iField.getDurationField();\n357: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n358: saveField(DateTimeFieldType.year(), iDefaultYear);\n359: return computeMillis(resetFields, text);\n363: long millis = iMillis;\n365: for (int i = 0; i < count; i++) {\n366: millis = savedFields[i].set(millis, resetFields);\n373: } catch (IllegalFieldValueException e) {\n374: if (text != null) {\n375: e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n377: throw e;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1753: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1754: super();\n1755: iFieldType = fieldType;\n1756: iShort = isShort;\n1757: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1239: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1240: if (position >= text.length()) {\n1244: char a = text.charAt(position);\n1245: char b = iValue;\n1247: if (a != b) {\n1259: return position + 1;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "104: public DateTimeFormatter toFormatter() {\n105: Object f = getFormatter();\n106: DateTimePrinter printer = null;\n107: if (isPrinter(f)) {\n108: printer = (DateTimePrinter) f;\n110: DateTimeParser parser = null;\n111: if (isParser(f)) {\n112: parser = (DateTimeParser) f;\n114: if (printer != null || parser != null) {\n115: return new DateTimeFormatter(printer, parser);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2750: boolean isParser() {\n2751: return iParsers != null;\n2752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "942: private Chronology selectChronology(Chronology chrono) {\n943: chrono = DateTimeUtils.getChronology(chrono);\n944: if (iChrono != null) {\n947: if (iZone != null) {\n950: return chrono;\n951: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2746: boolean isPrinter() {\n2747: return iPrinters != null;\n2748: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:prependMessage(Ljava/lang/String;)V",
                                    "method_body": "322: public void prependMessage(String message) {\n323: if (iMessage == null) {\n325: } else if (message != null) {\n326: iMessage = message + \": \" + iMessage;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "261: private void saveField(SavedField field) {\n262: SavedField[] savedFields = iSavedFields;\n263: int savedFieldsCount = iSavedFieldsCount;\n265: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n274: iSavedState = null;\n275: savedFields[savedFieldsCount] = field;\n276: iSavedFieldsCount = savedFieldsCount + 1;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "545: FixedMillisProvider(long fixedMillis) {\n546: iMillis = fixedMillis;\n547: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "466: int getDayOfMonth(long millis, int year) {\n467: int month = getMonthOfYear(millis, year);\n468: return getDayOfMonth(millis, year, month);\n469: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1325: public int estimateParsedLength() {\n1326: return iMaxParsedDigits;\n1327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1821: public int estimateParsedLength() {\n1822: return estimatePrintedLength();\n1823: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "402: public int get(long instant) {\n403: long localInstant = iZone.convertUTCToLocal(instant);\n404: return iField.get(localInstant);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1467: public int estimatePrintedLength() {\n1468: return iMaxParsedDigits;\n1469: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2136: public int estimatePrintedLength() {\n2137: int est = 1 + iMinFields << 1;\n2138: if (iShowSeparators) {\n2139: est += iMinFields - 1;\n2141: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2144: return est;\n2145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2614: Composite(List<Object> elementPairs) {\n2615: super();\n2617: List<Object> printerList = new ArrayList<Object>();\n2618: List<Object> parserList = new ArrayList<Object>();\n2620: decompose(elementPairs, printerList, parserList);\n2622: if (printerList.contains(null) || printerList.isEmpty()) {\n2626: int size = printerList.size();\n2627: iPrinters = new DateTimePrinter[size];\n2628: int printEst = 0;\n2629: for (int i=0; i<size; i++) {\n2630: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2631: printEst += printer.estimatePrintedLength();\n2632: iPrinters[i] = printer;\n2634: iPrintedLengthEstimate = printEst;\n2637: if (parserList.contains(null) || parserList.isEmpty()) {\n2641: int size = parserList.size();\n2642: iParsers = new DateTimeParser[size];\n2643: int parseEst = 0;\n2644: for (int i=0; i<size; i++) {\n2645: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2646: parseEst += parser.estimateParsedLength();\n2647: iParsers[i] = parser;\n2649: iParsedLengthEstimate = parseEst;\n2651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "548: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n549: if (fieldType == null) {\n552: return append0(new TextField(fieldType, true));\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "246: public void saveField(DateTimeFieldType fieldType, int value) {\n247: saveField(new SavedField(fieldType.getField(iChrono), value));\n248: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2758: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2759: int size = elementPairs.size();\n2760: for (int i=0; i<size; i+=2) {\n2761: Object element = elementPairs.get(i);\n2762: if (element instanceof Composite) {\n2763: addArrayToList(printerList, ((Composite)element).iPrinters);\n2765: printerList.add(element);\n2768: element = elementPairs.get(i + 1);\n2769: if (element instanceof Composite) {\n2770: addArrayToList(parserList, ((Composite)element).iParsers);\n2772: parserList.add(element);\n2775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "396: public DateTimeFormatterBuilder appendLiteral(char c) {\n397: return append0(new CharacterLiteral(c));\n398: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "951: public long convertUTCToLocal(long instantUTC) {\n952: int offset = getOffset(instantUTC);\n953: long instantLocal = instantUTC + offset;\n955: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n958: return instantLocal;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "975: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n976: return appendShortText(DateTimeFieldType.dayOfWeek());\n977: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1586: public long previousTransition(long instant) {\n1587: long[] transitions = iTransitions;\n1588: int i = Arrays.binarySearch(transitions, instant);\n1589: if (i >= 0) {\n1595: i = ~i;\n1596: if (i < transitions.length) {\n1605: if (iTailZone != null) {\n1611: long prev = transitions[i - 1];\n1612: if (prev > Long.MIN_VALUE) {\n1613: return prev - 1;\n1616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2777: private void addArrayToList(List<Object> list, Object[] array) {\n2778: if (array != null) {\n2779: for (int i=0; i<array.length; i++) {\n2780: list.add(array[i]);\n2783: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1211: public int estimatePrintedLength() {\n1212: return 1;\n1213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2273: public int estimateParsedLength() {\n2274: return estimatePrintedLength();\n2275: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1235: public int estimateParsedLength() {\n1236: return 1;\n1237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "203: public Locale getLocale() {\n204: return iLocale;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "700: public int parseInto(ReadWritableInstant instant, String text, int position) {\n701: DateTimeParser parser = requireParser();\n702: if (instant == null) {\n706: long instantMillis = instant.getMillis();\n707: Chronology chrono = instant.getChronology();\n708: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n709: chrono = selectChronology(chrono);\n710: int defaultYear = chrono.year().get(instantLocal);\n712: DateTimeParserBucket bucket = new DateTimeParserBucket(\n714: int newPos = parser.parseInto(bucket, text, position);\n715: instant.setMillis(bucket.computeMillis(false, text));\n716: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n728: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1329: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1330: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1332: boolean negative = false;\n1333: int length = 0;\n1334: while (length < limit) {\n1335: char c = text.charAt(position + length);\n1336: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1356: if (c < '0' || c > '9') {\n1359: length++;\n1360: }\n1362: if (length == 0) {\n1367: if (length >= 9) {\n1372: int i = position;\n1373: if (negative) {\n1377: value = text.charAt(i++) - '0';\n1380: }\n1381: position += length;\n1382: while (i < position) {\n1383: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1385: if (negative) {\n1390: bucket.saveField(iFieldType, value);\n1391: return position;\n1392: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "314: public DurationField getRangeDurationField() {\n315: return iChronology.years();\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "108: public DateTimeFormatter(\n110: super();\n111: iPrinter = printer;\n112: iParser = parser;\n113: iLocale = null;\n114: iOffsetParsed = false;\n115: iChrono = null;\n116: iZone = null;\n117: iPivotYear = null;\n118: iDefaultYear = 2000;\n119: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "583: int getDaysInMonthMax(long instant) {\n584: int thisYear = getYear(instant);\n585: int thisMonth = getMonthOfYear(instant, thisYear);\n586: return getDaysInYearMonth(thisYear, thisMonth);\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n306: thisDom = maxDom;\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2733: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2734: DateTimeParser[] elements = iParsers;\n2735: if (elements == null) {\n2739: int len = elements.length;\n2740: for (int i=0; i<len && position >= 0; i++) {\n2741: position = elements[i].parseInto(bucket, text, position);\n2743: return position;\n2744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "124: private DateTimeFormatter(\n129: super();\n130: iPrinter = printer;\n131: iParser = parser;\n132: iLocale = locale;\n133: iOffsetParsed = offsetParsed;\n134: iChrono = chrono;\n135: iZone = zone;\n136: iPivotYear = pivotYear;\n137: iDefaultYear = defaultYear;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1174: private boolean isParser(Object f) {\n1175: if (f instanceof DateTimeParser) {\n1176: if (f instanceof Composite) {\n1177: return ((Composite)f).isParser();\n1182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "189: public DateTimeFormatter withLocale(Locale locale) {\n190: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n193: return new DateTimeFormatter(iPrinter, iParser, locale,\n195: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1164: private boolean isPrinter(Object f) {\n1165: if (f instanceof DateTimePrinter) {\n1166: if (f instanceof Composite) {\n1167: return ((Composite)f).isPrinter();\n1172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "155: public DateTimePrinter getPrinter() {\n156: return iPrinter;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1759: public int estimatePrintedLength() {\n1760: return iShort ? 6 : 20;\n1761: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork_startOfYear",
                            "test_body": "929: public void testParseInto_monthDay_feb29_newYork_startOfYear() {\n930: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n931: MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);\n932: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n933: assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);\n934: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "381: private DateTimeFormatterBuilder append0(\n383: iFormatter = null;\n384: iElementPairs.add(printer);\n385: iElementPairs.add(parser);\n386: return this;\n387: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "908: public int getOffsetFromLocal(long instantLocal) {\n910: final int offsetLocal = getOffset(instantLocal);\n912: final long instantAdjusted = instantLocal - offsetLocal;\n913: final int offsetAdjusted = getOffset(instantAdjusted);\n915: if (offsetLocal != offsetAdjusted) {\n928: } else if (offsetLocal >= 0) {\n929: long prev = previousTransition(instantAdjusted);\n930: if (prev < instantAdjusted) {\n931: int offsetPrev = getOffset(prev);\n932: int diff = offsetPrev - offsetLocal;\n933: if (instantAdjusted - prev <= diff) {\n938: return offsetAdjusted;\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "402: int getYear(long instant) {\n408: long unitMillis = getAverageMillisPerYearDividedByTwo();\n409: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n410: if (i2 < 0) {\n413: int year = (int) (i2 / unitMillis);\n415: long yearStart = getYearMillis(year);\n416: long diff = instant - yearStart;\n418: if (diff < 0) {\n419: year--;\n420: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n423: if (isLeapYear(year)) {\n426: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n429: yearStart += oneYear;\n431: if (yearStart <= instant) {\n433: year++;\n437: return year;\n438: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1206: CharacterLiteral(char value) {\n1207: super();\n1208: iValue = value;\n1209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "927: private DateTimeParser requireParser() {\n928: DateTimeParser parser = iParser;\n929: if (parser == null) {\n932: return parser;\n933: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "708: abstract long getAverageMillisPerYear();\n747: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n748: if (info == null || info.iYear != year) {\n752: return info;\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "476: int getDayOfMonth(long millis, int year, int month) {\n477: long dateMillis = getYearMillis(year);\n478: dateMillis += getTotalMillisByYearMonth(year, month);\n479: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n480: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "216: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n217: if (formatter == null) {\n220: return append0(formatter.getPrinter(), formatter.getParser());\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "83: public DateTimeFormatterBuilder() {\n84: super();\n85: iElementPairs = new ArrayList<Object>();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "173: public DateTimeParser getParser() {\n174: return iParser;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "118: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n120: super();\n121: chrono = DateTimeUtils.getChronology(chrono);\n122: iMillis = instantLocal;\n123: iZone = chrono.getZone();\n124: iChrono = chrono.withUTC();\n125: iLocale = (locale == null ? Locale.getDefault() : locale);\n126: iPivotYear = pivotYear;\n127: iDefaultYear = defaultYear;\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "493: int getDayOfYear(long instant, int year) {\n494: long yearStart = getYearMillis(year);\n495: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n496: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "611: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n612: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n613: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n614: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n615: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1137: private Object getFormatter() {\n1138: Object f = iFormatter;\n1140: if (f == null) {\n1141: if (iElementPairs.size() == 2) {\n1154: if (f == null) {\n1155: f = new Composite(iElementPairs);\n1158: iFormatter = f;\n1161: return f;\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "373: private DateTimeFormatterBuilder append0(Object element) {\n374: iFormatter = null;\n376: iElementPairs.add(element);\n377: iElementPairs.add(element);\n378: return this;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "344: public long computeMillis(boolean resetFields, String text) {\n345: SavedField[] savedFields = iSavedFields;\n346: int count = iSavedFieldsCount;\n347: if (iSavedFieldsShared) {\n351: sort(savedFields, count);\n352: if (count > 0) {\n354: DurationField months = DurationFieldType.months().getField(iChrono);\n355: DurationField days = DurationFieldType.days().getField(iChrono);\n356: DurationField first = savedFields[0].iField.getDurationField();\n357: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n358: saveField(DateTimeFieldType.year(), iDefaultYear);\n359: return computeMillis(resetFields, text);\n363: long millis = iMillis;\n365: for (int i = 0; i < count; i++) {\n366: millis = savedFields[i].set(millis, resetFields);\n373: } catch (IllegalFieldValueException e) {\n374: if (text != null) {\n375: e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n377: throw e;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1753: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1754: super();\n1755: iFieldType = fieldType;\n1756: iShort = isShort;\n1757: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1239: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1240: if (position >= text.length()) {\n1244: char a = text.charAt(position);\n1245: char b = iValue;\n1247: if (a != b) {\n1259: return position + 1;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "104: public DateTimeFormatter toFormatter() {\n105: Object f = getFormatter();\n106: DateTimePrinter printer = null;\n107: if (isPrinter(f)) {\n108: printer = (DateTimePrinter) f;\n110: DateTimeParser parser = null;\n111: if (isParser(f)) {\n112: parser = (DateTimeParser) f;\n114: if (printer != null || parser != null) {\n115: return new DateTimeFormatter(printer, parser);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2750: boolean isParser() {\n2751: return iParsers != null;\n2752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "942: private Chronology selectChronology(Chronology chrono) {\n943: chrono = DateTimeUtils.getChronology(chrono);\n944: if (iChrono != null) {\n947: if (iZone != null) {\n950: return chrono;\n951: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "699: int getMaxMonth() {\n700: return 12;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2746: boolean isPrinter() {\n2747: return iPrinters != null;\n2748: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:prependMessage(Ljava/lang/String;)V",
                                    "method_body": "322: public void prependMessage(String message) {\n323: if (iMessage == null) {\n325: } else if (message != null) {\n326: iMessage = message + \": \" + iMessage;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "261: private void saveField(SavedField field) {\n262: SavedField[] savedFields = iSavedFields;\n263: int savedFieldsCount = iSavedFieldsCount;\n265: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n274: iSavedState = null;\n275: savedFields[savedFieldsCount] = field;\n276: iSavedFieldsCount = savedFieldsCount + 1;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "545: FixedMillisProvider(long fixedMillis) {\n546: iMillis = fixedMillis;\n547: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "466: int getDayOfMonth(long millis, int year) {\n467: int month = getMonthOfYear(millis, year);\n468: return getDayOfMonth(millis, year, month);\n469: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1325: public int estimateParsedLength() {\n1326: return iMaxParsedDigits;\n1327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1821: public int estimateParsedLength() {\n1822: return estimatePrintedLength();\n1823: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "137: private long localToUTC(long localInstant) {\n138: DateTimeZone zone = getZone();\n139: int offset = zone.getOffsetFromLocal(localInstant);\n140: localInstant -= offset;\n141: if (offset != zone.getOffset(localInstant)) {\n144: return localInstant;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "402: public int get(long instant) {\n403: long localInstant = iZone.convertUTCToLocal(instant);\n404: return iField.get(localInstant);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1467: public int estimatePrintedLength() {\n1468: return iMaxParsedDigits;\n1469: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2136: public int estimatePrintedLength() {\n2137: int est = 1 + iMinFields << 1;\n2138: if (iShowSeparators) {\n2139: est += iMinFields - 1;\n2141: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2144: return est;\n2145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2614: Composite(List<Object> elementPairs) {\n2615: super();\n2617: List<Object> printerList = new ArrayList<Object>();\n2618: List<Object> parserList = new ArrayList<Object>();\n2620: decompose(elementPairs, printerList, parserList);\n2622: if (printerList.contains(null) || printerList.isEmpty()) {\n2626: int size = printerList.size();\n2627: iPrinters = new DateTimePrinter[size];\n2628: int printEst = 0;\n2629: for (int i=0; i<size; i++) {\n2630: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2631: printEst += printer.estimatePrintedLength();\n2632: iPrinters[i] = printer;\n2634: iPrintedLengthEstimate = printEst;\n2637: if (parserList.contains(null) || parserList.isEmpty()) {\n2641: int size = parserList.size();\n2642: iParsers = new DateTimeParser[size];\n2643: int parseEst = 0;\n2644: for (int i=0; i<size; i++) {\n2645: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2646: parseEst += parser.estimateParsedLength();\n2647: iParsers[i] = parser;\n2649: iParsedLengthEstimate = parseEst;\n2651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "548: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n549: if (fieldType == null) {\n552: return append0(new TextField(fieldType, true));\n553: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "559: int getMillisOfDay(long instant) {\n560: if (instant >= 0) {\n561: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "246: public void saveField(DateTimeFieldType fieldType, int value) {\n247: saveField(new SavedField(fieldType.getField(iChrono), value));\n248: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "393: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n394: long millis = getYearMillis(year);\n395: millis += getTotalMillisByYearMonth(year, month);\n396: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n397: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2758: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2759: int size = elementPairs.size();\n2760: for (int i=0; i<size; i+=2) {\n2761: Object element = elementPairs.get(i);\n2762: if (element instanceof Composite) {\n2763: addArrayToList(printerList, ((Composite)element).iPrinters);\n2765: printerList.add(element);\n2768: element = elementPairs.get(i + 1);\n2769: if (element instanceof Composite) {\n2770: addArrayToList(parserList, ((Composite)element).iParsers);\n2772: parserList.add(element);\n2775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "396: public DateTimeFormatterBuilder appendLiteral(char c) {\n397: return append0(new CharacterLiteral(c));\n398: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "951: public long convertUTCToLocal(long instantUTC) {\n952: int offset = getOffset(instantUTC);\n953: long instantLocal = instantUTC + offset;\n955: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n958: return instantLocal;\n959: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "975: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n976: return appendShortText(DateTimeFieldType.dayOfWeek());\n977: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2777: private void addArrayToList(List<Object> list, Object[] array) {\n2778: if (array != null) {\n2779: for (int i=0; i<array.length; i++) {\n2780: list.add(array[i]);\n2783: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1211: public int estimatePrintedLength() {\n1212: return 1;\n1213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2273: public int estimateParsedLength() {\n2274: return estimatePrintedLength();\n2275: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1235: public int estimateParsedLength() {\n1236: return 1;\n1237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "203: public Locale getLocale() {\n204: return iLocale;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "700: public int parseInto(ReadWritableInstant instant, String text, int position) {\n701: DateTimeParser parser = requireParser();\n702: if (instant == null) {\n706: long instantMillis = instant.getMillis();\n707: Chronology chrono = instant.getChronology();\n708: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n709: chrono = selectChronology(chrono);\n710: int defaultYear = chrono.year().get(instantLocal);\n712: DateTimeParserBucket bucket = new DateTimeParserBucket(\n714: int newPos = parser.parseInto(bucket, text, position);\n715: instant.setMillis(bucket.computeMillis(false, text));\n716: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n728: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "368: long getYearMillis(int year) {\n369: return getYearInfo(year).iFirstDayMillis;\n370: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1329: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1330: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1332: boolean negative = false;\n1333: int length = 0;\n1334: while (length < limit) {\n1335: char c = text.charAt(position + length);\n1336: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1356: if (c < '0' || c > '9') {\n1359: length++;\n1360: }\n1362: if (length == 0) {\n1367: if (length >= 9) {\n1372: int i = position;\n1373: if (negative) {\n1377: value = text.charAt(i++) - '0';\n1380: }\n1381: position += length;\n1382: while (i < position) {\n1383: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1385: if (negative) {\n1390: bucket.saveField(iFieldType, value);\n1391: return position;\n1392: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "625: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n691: return getMaxMonth();\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "314: public DurationField getRangeDurationField() {\n315: return iChronology.years();\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "108: public DateTimeFormatter(\n110: super();\n111: iPrinter = printer;\n112: iParser = parser;\n113: iLocale = null;\n114: iOffsetParsed = false;\n115: iChrono = null;\n116: iZone = null;\n117: iPivotYear = null;\n118: iDefaultYear = 2000;\n119: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "583: int getDaysInMonthMax(long instant) {\n584: int thisYear = getYear(instant);\n585: int thisMonth = getMonthOfYear(instant, thisYear);\n586: return getDaysInYearMonth(thisYear, thisMonth);\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n306: thisDom = maxDom;\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2733: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2734: DateTimeParser[] elements = iParsers;\n2735: if (elements == null) {\n2739: int len = elements.length;\n2740: for (int i=0; i<len && position >= 0; i++) {\n2741: position = elements[i].parseInto(bucket, text, position);\n2743: return position;\n2744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "124: private DateTimeFormatter(\n129: super();\n130: iPrinter = printer;\n131: iParser = parser;\n132: iLocale = locale;\n133: iOffsetParsed = offsetParsed;\n134: iChrono = chrono;\n135: iZone = zone;\n136: iPivotYear = pivotYear;\n137: iDefaultYear = defaultYear;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1174: private boolean isParser(Object f) {\n1175: if (f instanceof DateTimeParser) {\n1176: if (f instanceof Composite) {\n1177: return ((Composite)f).isParser();\n1182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "189: public DateTimeFormatter withLocale(Locale locale) {\n190: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n193: return new DateTimeFormatter(iPrinter, iParser, locale,\n195: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1164: private boolean isPrinter(Object f) {\n1165: if (f instanceof DateTimePrinter) {\n1166: if (f instanceof Composite) {\n1167: return ((Composite)f).isPrinter();\n1172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: return localToUTC(getBase().getDateTimeMillis\n121: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "155: public DateTimePrinter getPrinter() {\n156: return iPrinter;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1759: public int estimatePrintedLength() {\n1760: return iShort ? 6 : 20;\n1761: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 8,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
                            "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: 307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\n308: assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\n309: try {\n310: DateTimeZone.forOffsetHoursMinutes(2, -15);\n311: fail();\n312: } catch (IllegalArgumentException ex) {}\n313: 314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\n315: assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\n316: assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n317: 318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n319: assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\n320: assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n321: 322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n323: try {\n324: DateTimeZone.forOffsetHoursMinutes(2, 60);\n325: fail();\n326: } catch (IllegalArgumentException ex) {}\n327: try {\n328: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n329: fail();\n330: } catch (IllegalArgumentException ex) {}\n331: try {\n332: DateTimeZone.forOffsetHoursMinutes(24, 0);\n333: fail();\n334: } catch (IllegalArgumentException ex) {}\n335: try {\n336: DateTimeZone.forOffsetHoursMinutes(-24, 0);\n337: fail();\n338: } catch (IllegalArgumentException ex) {}\n339: }        \n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "87: public boolean equals(Object obj) {\n88: if (this == obj) {\n89: return true;\n99: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2452: private int digitCount(String text, int position, int amount) {\n2453: int limit = Math.min(text.length() - position, amount);\n2454: amount = 0;\n2455: for (; limit > 0; limit--) {\n2456: char c = text.charAt(position + amount);\n2457: if (c < '0' || c > '9') {\n2460: amount++;\n2462: return amount;\n2463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "626: private static int parseOffset(String str) {\n629: Chronology chrono = new BaseChronology() {\n631: return null;\n634: return this;\n643: return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n644: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "739: public long parseMillis(String text) {\n740: DateTimeParser parser = requireParser();\n742: Chronology chrono = selectChronology(iChrono);\n743: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n744: int newPos = parser.parseInto(bucket, text, 0);\n745: if (newPos >= 0) {\n746: if (newPos >= text.length()) {\n747: return bucket.computeMillis(true, text);\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "272: public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n273: if (hoursOffset == 0 && minutesOffset == 0) {\n274: return DateTimeZone.UTC;\n276: if (hoursOffset < -23 || hoursOffset > 23) {\n279: if (minutesOffset < 0 || minutesOffset > 59) {\n280: throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n282: int offset = 0;\n284: int hoursInMinutes = hoursOffset * 60;\n285: if (hoursInMinutes < 0) {\n288: minutesOffset = hoursInMinutes + minutesOffset;\n290: offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n293: }\n294: return forOffsetMillis(offset);\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "714: protected DateTimeZone(String id) {\n715: if (id == null) {\n718: iID = id;\n719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "344: public long computeMillis(boolean resetFields, String text) {\n345: SavedField[] savedFields = iSavedFields;\n346: int count = iSavedFieldsCount;\n347: if (iSavedFieldsShared) {\n351: sort(savedFields, count);\n352: if (count > 0) {\n363: long millis = iMillis;\n365: for (int i = 0; i < count; i++) {\n368: if (resetFields) {\n369: for (int i = 0; i < count; i++) {\n378: }\n380: if (iOffset != null) {\n381: millis -= iOffset;\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "303: public static DateTimeZone forOffsetMillis(int millisOffset) {\n304: if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n307: String id = printOffset(millisOffset);\n308: return fixedOffsetZone(id, millisOffset);\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "133: public static DateTimeZone getDefault() {\n134: DateTimeZone zone = cDefault;\n135: if (zone == null) {\n162: return zone;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "174: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: SecurityManager sm = System.getSecurityManager();\n176: if (sm != null) {\n179: if (zone == null) {\n182: synchronized(DateTimeZone.class) {\n183: cDefault = zone;\n184: }\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "204: public static DateTimeZone forID(String id) {\n205: if (id == null) {\n208: if (id.equals(\"UTC\")) {\n211: DateTimeZone zone = cProvider.getZone(id);\n212: if (zone != null) {\n215: if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n216: int offset = parseOffset(id);\n217: if (offset == 0L) {\n218: return DateTimeZone.UTC;\n220: id = printOffset(offset);\n221: return fixedOffsetZone(id, offset);\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "626: private static int parseOffset(String str) {\n629: Chronology chrono = new BaseChronology() {\n631: return null;\n634: return this;\n643: return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n644: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "924: private DateTimeParser requireParser() {\n925: DateTimeParser parser = iParser;\n926: if (parser == null) {\n929: return parser;\n930: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "36: public FixedDateTimeZone(String id, String nameKey,\n38: super(id);\n39: iNameKey = nameKey;\n40: iWallOffset = wallOffset;\n41: iStandardOffset = standardOffset;\n42: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "256: public DateTimeFormatter withChronology(Chronology chrono) {\n257: if (iChrono == chrono) {\n260: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "123: private DateTimeFormatter(\n128: super();\n129: iPrinter = printer;\n130: iParser = parser;\n131: iLocale = locale;\n132: iOffsetParsed = offsetParsed;\n133: iChrono = chrono;\n134: iZone = zone;\n135: iPivotYear = pivotYear;\n136: iDefaultYear = defaultYear;\n137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:<init>()V",
                                    "method_body": "626: private static int parseOffset(String str) {\n629: Chronology chrono = new BaseChronology() {\n631: return null;\n634: return this;\n643: return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n644: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n142: return null;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "118: public static int safeMultiply(int val1, int val2) {\n119: long total = (long) val1 * (long) val2;\n120: if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n123: return (int) total;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "655: private static String printOffset(int offset) {\n656: StringBuffer buf = new StringBuffer();\n657: if (offset >= 0) {\n658: buf.append('+');\n660: buf.append('-');\n661: offset = -offset;\n664: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n665: FormatUtils.appendPaddedInteger(buf, hours, 2);\n666: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n668: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n669: buf.append(':');\n670: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n671: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n672: if (offset == 0) {\n673: return buf.toString();\n687: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2277: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2278: int limit = text.length() - position;\n2281: if (iZeroOffsetParseText != null) {\n2301: if (limit <= 1) {\n2306: char c = text.charAt(position);\n2307: if (c == '-') {\n2308: negative = true;\n2309: } else if (c == '+') {\n2310: negative = false;\n2315: limit--;\n2316: position++;\n2330: if (digitCount(text, position, 2) < 2) {\n2337: int hours = FormatUtils.parseTwoDigits(text, position);\n2338: if (hours > 23) {\n2341: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2342: limit -= 2;\n2343: position += 2;\n2349: if (limit <= 0) {\n2354: c = text.charAt(position);\n2355: if (c == ':') {\n2356: expectSeparators = true;\n2357: limit--;\n2358: position++;\n2367: int count = digitCount(text, position, 2);\n2368: if (count == 0 && !expectSeparators) {\n2370: } else if (count < 2) {\n2375: int minutes = FormatUtils.parseTwoDigits(text, position);\n2376: if (minutes > 59) {\n2379: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2380: limit -= 2;\n2381: position += 2;\n2385: if (limit <= 0) {\n2386: break parse;\n2444: bucket.setOffset(Integer.valueOf(negative ? -offset : offset));\n2445: return position;\n2446: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:parseOffset(Ljava/lang/String;)I",
                                    "method_body": "626: private static int parseOffset(String str) {\n629: Chronology chrono = new BaseChronology() {\n631: return null;\n634: return this;\n643: return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n644: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
                                    "method_body": "194: public void setOffset(Integer offset) {\n195: iSavedState = null;\n196: iOffset = offset;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "939: private Chronology selectChronology(Chronology chrono) {\n940: chrono = DateTimeUtils.getChronology(chrono);\n941: if (iChrono != null) {\n942: chrono = iChrono;\n944: if (iZone != null) {\n947: return chrono;\n948: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "373: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n374: if (offset == 0) {\n377: if (iFixedOffsetCache == null) {\n381: Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);\n382: if (ref != null) {\n383: zone = ref.get();\n384: if (zone != null) {\n385: return zone;\n388: zone = new FixedDateTimeZone(id, null, offset, offset);\n389: iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n390: return zone;\n391: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "694: private static synchronized DateTimeFormatter offsetFormatter() {\n695: if (cOffsetFormatter == null) {\n700: return cOffsetFormatter;\n701: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "118: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n120: super();\n121: chrono = DateTimeUtils.getChronology(chrono);\n122: iMillis = instantLocal;\n123: iZone = chrono.getZone();\n124: iChrono = chrono.withUTC();\n125: iLocale = (locale == null ? Locale.getDefault() : locale);\n126: iPivotYear = pivotYear;\n127: iDefaultYear = defaultYear;\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 9,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
                            "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n307: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n308: assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n309: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n310: try {\n311: DateTimeZone.forOffsetHoursMinutes(2, 60);\n312: fail();\n313: } catch (IllegalArgumentException ex) {}\n314: try {\n315: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n316: fail();\n317: } catch (IllegalArgumentException ex) {}\n318: try {\n319: DateTimeZone.forOffsetHoursMinutes(2, -1);\n320: fail();\n321: } catch (IllegalArgumentException ex) {}\n322: try {\n323: DateTimeZone.forOffsetHoursMinutes(-2, -1);\n324: fail();\n325: } catch (IllegalArgumentException ex) {}\n326: try {\n327: DateTimeZone.forOffsetHoursMinutes(24, 0);\n328: fail();\n329: } catch (IllegalArgumentException ex) {}\n330: try {\n331: DateTimeZone.forOffsetHoursMinutes(-24, 0);\n332: fail();\n333: } catch (IllegalArgumentException ex) {}\n334: }        \n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "87: public boolean equals(Object obj) {\n88: if (this == obj) {\n89: return true;\n99: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2452: private int digitCount(String text, int position, int amount) {\n2453: int limit = Math.min(text.length() - position, amount);\n2454: amount = 0;\n2455: for (; limit > 0; limit--) {\n2456: char c = text.charAt(position + amount);\n2457: if (c < '0' || c > '9') {\n2460: amount++;\n2462: return amount;\n2463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n134: if (zone == null) {\n135: synchronized(DateTimeZone.class) {\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "739: public long parseMillis(String text) {\n740: DateTimeParser parser = requireParser();\n742: Chronology chrono = selectChronology(iChrono);\n743: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n744: int newPos = parser.parseInto(bucket, text, 0);\n745: if (newPos >= 0) {\n746: if (newPos >= text.length()) {\n747: return bucket.computeMillis(true, text);\n753: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "630: private static String printOffset(int offset) {\n632: if (offset >= 0) {\n633: buf.append('+');\n634: } else {\n636: offset = -offset;\n637: }\n640: FormatUtils.appendPaddedInteger(buf, hours, 2);\n641: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: \n644: buf.append(':');\n645: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n646: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n647: if (offset == 0) {\n648: return buf.toString();\n649: }\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "689: protected DateTimeZone(String id) {\n690: if (id == null) {\n691: throw new IllegalArgumentException(\"Id must not be null\");\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n175: if (sm != null) {\n176: sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\n179: throw new IllegalArgumentException(\"The datetime zone must not be null\");\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n205: return getDefault();\n208: return DateTimeZone.UTC;\n211: if (zone != null) {\n212: return zone;\n215: int offset = parseOffset(id);\n216: if (offset == 0L) {\n217: return DateTimeZone.UTC;\n220: return fixedOffsetZone(id, offset);\n221: }\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "344: public long computeMillis(boolean resetFields, String text) {\n345: SavedField[] savedFields = iSavedFields;\n346: int count = iSavedFieldsCount;\n347: if (iSavedFieldsShared) {\n351: sort(savedFields, count);\n352: if (count > 0) {\n363: long millis = iMillis;\n365: for (int i = 0; i < count; i++) {\n368: if (resetFields) {\n369: for (int i = 0; i < count; i++) {\n378: }\n380: if (iOffset != null) {\n381: millis -= iOffset;\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "924: private DateTimeParser requireParser() {\n925: DateTimeParser parser = iParser;\n926: if (parser == null) {\n929: return parser;\n930: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "36: public FixedDateTimeZone(String id, String nameKey,\n38: super(id);\n39: iNameKey = nameKey;\n40: iWallOffset = wallOffset;\n41: iStandardOffset = standardOffset;\n42: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "256: public DateTimeFormatter withChronology(Chronology chrono) {\n257: if (iChrono == chrono) {\n260: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n262: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "123: private DateTimeFormatter(\n128: super();\n129: iPrinter = printer;\n130: iParser = parser;\n131: iLocale = locale;\n132: iOffsetParsed = offsetParsed;\n133: iChrono = chrono;\n134: iZone = zone;\n135: iPivotYear = pivotYear;\n136: iDefaultYear = defaultYear;\n137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "253: public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n255: return DateTimeZone.UTC;\n256: }\n258: throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n259: }\n261: try {\n263: if (hoursInMinutes < 0) {\n264: minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n265: } else {\n267: }\n269: } catch (ArithmeticException ex) {\n272: return forOffsetMillis(offset);\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "118: public static int safeMultiply(int val1, int val2) {\n119: long total = (long) val1 * (long) val2;\n120: if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n123: return (int) total;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2277: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2278: int limit = text.length() - position;\n2281: if (iZeroOffsetParseText != null) {\n2301: if (limit <= 1) {\n2306: char c = text.charAt(position);\n2307: if (c == '-') {\n2308: negative = true;\n2309: } else if (c == '+') {\n2310: negative = false;\n2315: limit--;\n2316: position++;\n2330: if (digitCount(text, position, 2) < 2) {\n2337: int hours = FormatUtils.parseTwoDigits(text, position);\n2338: if (hours > 23) {\n2341: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2342: limit -= 2;\n2343: position += 2;\n2349: if (limit <= 0) {\n2354: c = text.charAt(position);\n2355: if (c == ':') {\n2356: expectSeparators = true;\n2357: limit--;\n2358: position++;\n2367: int count = digitCount(text, position, 2);\n2368: if (count == 0 && !expectSeparators) {\n2370: } else if (count < 2) {\n2375: int minutes = FormatUtils.parseTwoDigits(text, position);\n2376: if (minutes > 59) {\n2379: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2380: limit -= 2;\n2381: position += 2;\n2385: if (limit <= 0) {\n2386: break parse;\n2444: bucket.setOffset(Integer.valueOf(negative ? -offset : offset));\n2445: return position;\n2446: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
                                    "method_body": "194: public void setOffset(Integer offset) {\n195: iSavedState = null;\n196: iOffset = offset;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "939: private Chronology selectChronology(Chronology chrono) {\n940: chrono = DateTimeUtils.getChronology(chrono);\n941: if (iChrono != null) {\n942: chrono = iChrono;\n944: if (iZone != null) {\n947: return chrono;\n948: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n350: return DateTimeZone.UTC;\n353: iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();\n357: if (ref != null) {\n358: zone = ref.get();\n359: if (zone != null) {\n360: return zone;\n361: }\n364: iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n365: return zone;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "669: private static synchronized DateTimeFormatter offsetFormatter() {\n671: cOffsetFormatter = new DateTimeFormatterBuilder()\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n142: return null;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "118: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n120: super();\n121: chrono = DateTimeUtils.getChronology(chrono);\n122: iMillis = instantLocal;\n123: iZone = chrono.getZone();\n124: iChrono = chrono.withUTC();\n125: iLocale = (locale == null ? Locale.getDefault() : locale);\n126: iPivotYear = pivotYear;\n127: iDefaultYear = defaultYear;\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 10,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay",
                            "test_body": "123: public void testFactory_daysBetween_RPartial_MonthDay() {\n124: MonthDay start1 = new MonthDay(2, 1);\n125: MonthDay start2 = new MonthDay(2, 28);\n126: MonthDay end1 = new MonthDay(2, 28);\n127: MonthDay end2 = new MonthDay(2, 29);\n128: 129: assertEquals(27, Days.daysBetween(start1, end1).getDays());\n130: assertEquals(28, Days.daysBetween(start1, end2).getDays());\n131: assertEquals(0, Days.daysBetween(start2, end1).getDays());\n132: assertEquals(1, Days.daysBetween(start2, end2).getDays());\n133: 134: assertEquals(-27, Days.daysBetween(end1, start1).getDays());\n135: assertEquals(-28, Days.daysBetween(end2, start1).getDays());\n136: assertEquals(0, Days.daysBetween(end1, start2).getDays());\n137: assertEquals(-1, Days.daysBetween(end2, start2).getDays());\n138: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "381: private DateTimeFormatterBuilder append0(\n383: iFormatter = null;\n384: iElementPairs.add(printer);\n385: iElementPairs.add(parser);\n386: return this;\n387: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1460: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1463: super(fieldType, maxParsedDigits, signed);\n1464: iMinPrintedDigits = minPrintedDigits;\n1465: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
                                    "method_body": "254: public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\n255: int size = period.size();\n256: int[] values = new int[size];\n257: if (startInstant != endInstant) {\n258: for (int i = 0; i < size; i++) {\n259: DurationField field = period.getFieldType(i).getField(this);\n260: int value = field.getDifference(endInstant, startInstant);\n261: startInstant = field.add(startInstant, value);\n262: values[i] = value;\n265: return values;\n266: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Days:<init>(I)V",
                                    "method_body": "215: private Days(int days) {\n216: super(days);\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Days:daysBetween(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;)Lorg/joda/time/Days;",
                                    "method_body": "134: public static Days daysBetween(ReadablePartial start, ReadablePartial end) {\n135: if (start instanceof LocalDate && end instanceof LocalDate)   {\n141: int amount = BaseSingleFieldPeriod.between(start, end, ZERO);\n142: return Days.days(amount);\n143: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "399: private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n400: int length = pattern.length();\n401: int[] indexRef = new int[1];\n403: for (int i=0; i<length; i++) {\n404: indexRef[0] = i;\n405: String token = parseToken(pattern, indexRef);\n406: i = indexRef[0];\n408: int tokenLen = token.length();\n409: if (tokenLen == 0) {\n412: char c = token.charAt(0);\n414: switch (c) {\n479: if (tokenLen >= 3) {\n486: builder.appendMonthOfYear(tokenLen);\n488: break;\n490: builder.appendDayOfMonth(tokenLen);\n491: break;\n549: String sub = token.substring(1);\n550: if (sub.length() == 1) {\n551: builder.appendLiteral(sub.charAt(0));\n555: builder.appendLiteral(new String(sub));\n557: break;\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:<init>(I)V",
                                    "method_body": "155: protected BaseSingleFieldPeriod(int period) {\n156: super();\n157: iPeriod = period;\n158: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "140: public int getDifference(long minuendInstant, long subtrahendInstant) {\n141: return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Days:days(I)Lorg/joda/time/Days;",
                                    "method_body": "79: public static Days days(int days) {\n80: switch (days) {\n102: return new Days(days);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1317: NumberFormatter(DateTimeFieldType fieldType,\n1319: super();\n1320: iFieldType = fieldType;\n1321: iMaxParsedDigits = maxParsedDigits;\n1322: iSigned = signed;\n1323: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "83: public DateTimeFormatterBuilder() {\n84: super();\n85: iElementPairs = new ArrayList<Object>();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2750: boolean isParser() {\n2751: return iParsers != null;\n2752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:localDateParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "594: public static DateTimeFormatter localDateParser() {\n595: if (ldp == null) {\n596: ldp = dateElementParser().withZoneUTC();\n598: return ldp;\n599: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "373: private DateTimeFormatterBuilder append0(Object element) {\n374: iFormatter = null;\n376: iElementPairs.add(element);\n377: iElementPairs.add(element);\n378: return this;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Days:getDays()I",
                                    "method_body": "342: public int getDays() {\n343: return getValue();\n344: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "320: public DateTimeFormatter withZone(DateTimeZone zone) {\n321: if (iZone == zone) {\n324: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n326: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1325: public int estimateParsedLength() {\n1326: return iMaxParsedDigits;\n1327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "774: public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n775: return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n776: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "573: private static String parseToken(String pattern, int[] indexRef) {\n574: StringBuilder buf = new StringBuilder();\n576: int i = indexRef[0];\n577: int length = pattern.length();\n579: char c = pattern.charAt(i);\n580: if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n583: buf.append(c);\n585: while (i + 1 < length) {\n586: char peek = pattern.charAt(i + 1);\n587: if (peek == c) {\n588: buf.append(c);\n589: i++;\n593: }\n596: buf.append('\\'');\n598: boolean inLiteral = false;\n600: for (; i < length; i++) {\n601: c = pattern.charAt(i);\n603: if (c == '\\'') {\n611: } else if (!inLiteral &&\n613: i--;\n614: break;\n616: buf.append(c);\n621: indexRef[0] = i;\n622: return buf.toString();\n623: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withZoneUTC()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "300: public DateTimeFormatter withZoneUTC() {\n301: return withZone(DateTimeZone.UTC);\n302: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "99: public static long safeSubtract(long val1, long val2) {\n100: long diff = val1 - val2;\n102: if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n106: return diff;\n107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(II)V",
                                    "method_body": "333: public MonthDay(int monthOfYear, int dayOfMonth) {\n334: this(monthOfYear, dayOfMonth, null);\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "104: public DateTimeFormatter toFormatter() {\n105: Object f = getFormatter();\n106: DateTimePrinter printer = null;\n107: if (isPrinter(f)) {\n108: printer = (DateTimePrinter) f;\n110: DateTimeParser parser = null;\n111: if (isParser(f)) {\n112: parser = (DateTimeParser) f;\n114: if (printer != null || parser != null) {\n115: return new DateTimeFormatter(printer, parser);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "186: public static int safeToInt(long value) {\n187: if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n188: return (int) value;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n283: return ISOChronology.getInstance();\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "215: public DurationFieldType getFieldType(int index) {\n216: if (index != 0) {\n219: return getFieldType();\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2746: boolean isPrinter() {\n2747: return iPrinters != null;\n2748: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "113: public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n114: long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n115: return difference / iUnitMillis;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "224: public int getValue(int index) {\n225: return iValues[index];\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getValue()I",
                                    "method_body": "166: protected int getValue() {\n167: return iPeriod;\n168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "816: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n817: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n818: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:estimatePrintedLength()I",
                                    "method_body": "1274: public int estimatePrintedLength() {\n1275: return iValue.length();\n1276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateElementParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "612: public static DateTimeFormatter dateElementParser() {\n613: if (dpe == null) {\n636: return dpe;\n637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "432: public DateTimeFormatterBuilder appendDecimal(\n434: if (fieldType == null) {\n437: if (maxDigits < minDigits) {\n440: if (minDigits < 0 || maxDigits <= 0) {\n443: if (minDigits <= 1) {\n446: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n448: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:<init>(Ljava/lang/String;)V",
                                    "method_body": "1269: StringLiteral(String value) {\n1270: super();\n1271: iValue = value;\n1272: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:estimateParsedLength()I",
                                    "method_body": "1298: public int estimateParsedLength() {\n1299: return iValue.length();\n1300: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Days:getFieldType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "234: public DurationFieldType getFieldType() {\n235: return DurationFieldType.days();\n236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimateParsedLength()I",
                                    "method_body": "2729: public int estimateParsedLength() {\n2730: return iParsedLengthEstimate;\n2731: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2614: Composite(List<Object> elementPairs) {\n2615: super();\n2617: List<Object> printerList = new ArrayList<Object>();\n2618: List<Object> parserList = new ArrayList<Object>();\n2620: decompose(elementPairs, printerList, parserList);\n2622: if (printerList.contains(null) || printerList.isEmpty()) {\n2623: iPrinters = null;\n2624: iPrintedLengthEstimate = 0;\n2626: int size = printerList.size();\n2627: iPrinters = new DateTimePrinter[size];\n2628: int printEst = 0;\n2629: for (int i=0; i<size; i++) {\n2630: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2631: printEst += printer.estimatePrintedLength();\n2632: iPrinters[i] = printer;\n2634: iPrintedLengthEstimate = printEst;\n2637: if (parserList.contains(null) || parserList.isEmpty()) {\n2641: int size = parserList.size();\n2642: iParsers = new DateTimeParser[size];\n2643: int parseEst = 0;\n2644: for (int i=0; i<size; i++) {\n2645: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2646: parseEst += parser.estimateParsedLength();\n2647: iParsers[i] = parser;\n2649: iParsedLengthEstimate = parseEst;\n2651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:size()I",
                                    "method_body": "186: public abstract DurationFieldType getFieldType();\n202: return 1;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1164: private boolean isPrinter(Object f) {\n1165: if (f instanceof DateTimePrinter) {\n1166: if (f instanceof Composite) {\n1167: return ((Composite)f).isPrinter();\n1172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:estimateParsedLength()I",
                                    "method_body": "2809: public int estimateParsedLength() {\n2810: return iParsedLengthEstimate;\n2811: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "338: public int getMinimumValue() {\n339: return MIN;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2758: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2759: int size = elementPairs.size();\n2760: for (int i=0; i<size; i+=2) {\n2761: Object element = elementPairs.get(i);\n2762: if (element instanceof Composite) {\n2765: printerList.add(element);\n2768: element = elementPairs.get(i + 1);\n2769: if (element instanceof Composite) {\n2772: parserList.add(element);\n2775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "396: public DateTimeFormatterBuilder appendLiteral(char c) {\n397: return append0(new CharacterLiteral(c));\n398: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendOptional(Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "344: public DateTimeFormatterBuilder appendOptional(DateTimeParser parser) {\n345: checkParser(parser);\n346: DateTimeParser[] parsers = new DateTimeParser[] {parser, null};\n347: return append0(null, new MatchingParser(parsers));\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:between(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I",
                                    "method_body": "88: protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\n89: if (start == null || end == null) {\n92: if (start.size() != end.size()) {\n95: for (int i = 0, isize = start.size(); i < isize; i++) {\n96: if (start.getFieldType(i) != end.getFieldType(i)) {\n100: if (DateTimeUtils.isContiguous(start) == false) {\n103: Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n104: int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n105: return values[0];\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1235: public int estimateParsedLength() {\n1236: return 1;\n1237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1467: public int estimatePrintedLength() {\n1468: return iMaxParsedDigits;\n1469: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:checkParser(Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "356: private void checkParser(DateTimeParser parser) {\n357: if (parser == null) {\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "363: public static final boolean isContiguous(ReadablePartial partial) {\n364: if (partial == null) {\n367: DurationFieldType lastType = null;\n368: for (int i = 0; i < partial.size(); i++) {\n369: DateTimeField loopField = partial.getField(i);\n370: if (i > 0) {\n371: if (loopField.getRangeDurationField().getType() != lastType) {\n375: lastType = loopField.getDurationField().getType();\n377: return true;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "107: public DateTimeFormatter(\n109: super();\n110: iPrinter = printer;\n111: iParser = parser;\n112: iLocale = null;\n113: iOffsetParsed = false;\n114: iChrono = null;\n115: iZone = null;\n116: iPivotYear = null;\n117: iDefaultYear = 2000;\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "343: public int getMaximumValue() {\n344: return iMax;\n345: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "123: private DateTimeFormatter(\n128: super();\n129: iPrinter = printer;\n130: iParser = parser;\n131: iLocale = locale;\n132: iOffsetParsed = offsetParsed;\n133: iChrono = chrono;\n134: iZone = zone;\n135: iPivotYear = pivotYear;\n136: iDefaultYear = defaultYear;\n137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1174: private boolean isParser(Object f) {\n1175: if (f instanceof DateTimeParser) {\n1176: if (f instanceof Composite) {\n1177: return ((Composite)f).isParser();\n1182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1137: private Object getFormatter() {\n1138: Object f = iFormatter;\n1140: if (f == null) {\n1141: if (iElementPairs.size() == 2) {\n1154: if (f == null) {\n1155: f = new Composite(iElementPairs);\n1158: iFormatter = f;\n1161: return f;\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:<init>([Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "2793: MatchingParser(DateTimeParser[] parsers) {\n2794: super();\n2795: iParsers = parsers;\n2796: int est = 0;\n2797: for (int i=parsers.length; --i>=0 ;) {\n2798: DateTimeParser parser = parsers[i];\n2799: if (parser != null) {\n2800: int len = parser.estimateParsedLength();\n2801: if (len > est) {\n2802: est = len;\n2805: }\n2806: iParsedLengthEstimate = est;\n2807: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "407: public DateTimeFormatterBuilder appendLiteral(String text) {\n408: if (text == null) {\n411: switch (text.length()) {\n417: return append0(new StringLiteral(text));\n419: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1211: public int estimatePrintedLength() {\n1212: return 1;\n1213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "172: public DateTimeParser getParser() {\n173: return iParser;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1206: CharacterLiteral(char value) {\n1207: super();\n1208: iValue = value;\n1209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay",
                            "test_body": "130: public void testFactory_monthsBetween_RPartial_MonthDay() {\n131: MonthDay start = new MonthDay(2, 1);\n132: MonthDay end1 = new MonthDay(2, 28);\n133: MonthDay end2 = new MonthDay(2, 29);\n134: MonthDay end3 = new MonthDay(3, 1);\n135: 136: assertEquals(0, Months.monthsBetween(start, end1).getMonths());\n137: assertEquals(0, Months.monthsBetween(start, end2).getMonths());\n138: assertEquals(1, Months.monthsBetween(start, end3).getMonths());\n139: 140: assertEquals(0, Months.monthsBetween(end1, start).getMonths());\n141: assertEquals(0, Months.monthsBetween(end2, start).getMonths());\n142: assertEquals(-1, Months.monthsBetween(end3, start).getMonths());\n143: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
                                    "method_body": "254: public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\n255: int size = period.size();\n256: int[] values = new int[size];\n257: if (startInstant != endInstant) {\n258: for (int i = 0; i < size; i++) {\n259: DurationField field = period.getFieldType(i).getField(this);\n260: int value = field.getDifference(endInstant, startInstant);\n261: startInstant = field.add(startInstant, value);\n262: values[i] = value;\n265: return values;\n266: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Months:monthsBetween(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;)Lorg/joda/time/Months;",
                                    "method_body": "154: public static Months monthsBetween(ReadablePartial start, ReadablePartial end) {\n155: if (start instanceof LocalDate && end instanceof LocalDate)   {\n161: int amount = BaseSingleFieldPeriod.between(start, end, ZERO);\n162: return Months.months(amount);\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuilder buf = new StringBuilder()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getDifferenceAsLong(JJ)J",
                                    "method_body": "242: public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n243: if (minuendInstant < subtrahendInstant) {\n247: int minuendYear = iChronology.getYear(minuendInstant);\n248: int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);\n249: int subtrahendYear = iChronology.getYear(subtrahendInstant);\n250: int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);\n252: long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;\n256: int minuendDom = iChronology.getDayOfMonth\n258: if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {\n260: int subtrahendDom = iChronology.getDayOfMonth\n262: if (subtrahendDom > minuendDom) {\n271: long minuendRem = minuendInstant\n273: long subtrahendRem = subtrahendInstant\n276: if (minuendRem < subtrahendRem) {\n280: return difference;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "84: public DateTimeZone getZone() {\n85: return (DateTimeZone)getParam();\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(II)V",
                                    "method_body": "333: public MonthDay(int monthOfYear, int dayOfMonth) {\n334: this(monthOfYear, dayOfMonth, null);\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "186: public static int safeToInt(long value) {\n187: if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n188: return (int) value;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Months:getFieldType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "229: public DurationFieldType getFieldType() {\n230: return DurationFieldType.months();\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n283: return ISOChronology.getInstance();\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "181: public long add(long instant, int value) {\n182: return ImpreciseDateTimeField.this.add(instant, value);\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "215: public DurationFieldType getFieldType(int index) {\n216: if (index != 0) {\n219: return getFieldType();\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "224: public int getValue(int index) {\n225: return iValues[index];\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDifference(JJ)I",
                                    "method_body": "60: public abstract int get(long instant);\n91: return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getValue()I",
                                    "method_body": "166: protected int getValue() {\n167: return iPeriod;\n168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:size()I",
                                    "method_body": "186: public abstract DurationFieldType getFieldType();\n202: return 1;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "338: public int getMinimumValue() {\n339: return MIN;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getDifference(JJ)I",
                                    "method_body": "189: public int getDifference(long minuendInstant, long subtrahendInstant) {\n190: return ImpreciseDateTimeField.this\n192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Months:months(I)Lorg/joda/time/Months;",
                                    "method_body": "89: public static Months months(int months) {\n90: switch (months) {\n92: return ZERO;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Months:getMonths()I",
                                    "method_body": "248: public int getMonths() {\n249: return getValue();\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n93: return instant; // the easy case\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:between(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I",
                                    "method_body": "88: protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\n89: if (start == null || end == null) {\n92: if (start.size() != end.size()) {\n95: for (int i = 0, isize = start.size(); i < isize; i++) {\n96: if (start.getFieldType(i) != end.getFieldType(i)) {\n100: if (DateTimeUtils.isContiguous(start) == false) {\n103: Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n104: int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n105: return values[0];\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "363: public static final boolean isContiguous(ReadablePartial partial) {\n364: if (partial == null) {\n367: DurationFieldType lastType = null;\n368: for (int i = 0; i < partial.size(); i++) {\n369: DateTimeField loopField = partial.getField(i);\n370: if (i > 0) {\n371: if (loopField.getRangeDurationField().getType() != lastType) {\n375: lastType = loopField.getDurationField().getType();\n377: return true;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "343: public int getMaximumValue() {\n344: return iMax;\n345: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 12,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1",
                            "test_body": "150: public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n151: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n152: cal.set(Calendar.ERA, GregorianCalendar.BC);\n153: cal.set(Calendar.MILLISECOND, 7);\n154: LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n155: assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n156: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "649: public Chronology getChronology() {\n650: return iChronology;\n651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "541: protected DateTimeField getField(int index, Chronology chrono) {\n542: switch (index) {\n544: return chrono.year();\n546: return chrono.monthOfYear();\n548: return chrono.dayOfMonth();\n550: return chrono.millisOfDay();\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1888: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1891: long millis = partial.getChronology().set(partial, 0L);\n1893: printTo(buf, null, millis, partial.getChronology());\n1896: }\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1990: private long[] getFractionData(long fraction, DateTimeField field) {\n1991: long rangeMillis = field.getDurationField().getUnitMillis();\n1993: int maxDigits = iMaxDigits;\n1995: switch (maxDigits) {\n2005: case 9:  scalar = 1000000000L; break;\n2016: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n2017: break;\n2023: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n2024: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "68: protected abstract DateTimeField getField(int index, Chronology chrono);\n79: return getField(index, getChronology()).getType();\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "490: public LocalDateTime(\n499: super();\n500: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n501: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n503: iChronology = chronology;\n504: iLocalMillis = instant;\n505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "463: public LocalDateTime(\n471: this(year, monthOfYear, dayOfMonth, hourOfDay,\n473: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n129: return (instant + 1) % iUnitMillis + iUnitMillis - 1;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "528: public int size() {\n529: return 4;\n530: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "596: public int get(DateTimeFieldType type) {\n597: if (type == null) {\n600: return type.getField(getChronology()).get(getLocalMillis());\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "2015: public String toString() {\n2016: return ISODateTimeFormat.dateTime().print(this);\n2017: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "232: public static LocalDateTime fromDateFields(Date date) {\n233: if (date == null) {\n237: return new LocalDateTime(\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "640: protected long getLocalMillis() {\n641: return iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n554: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "661: public boolean equals(Object partial) {\n663: if (this == partial) {\n666: if (partial instanceof LocalDateTime) {\n667: LocalDateTime other = (LocalDateTime) partial;\n668: if (iChronology.equals(other.iChronology)) {\n669: return iLocalMillis == other.iLocalMillis;\n673: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "611: public boolean isSupported(DateTimeFieldType type) {\n612: if (type == null) {\n615: return type.getField(getChronology()).isSupported();\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1906: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1909: DateTimeField field = iFieldType.getField(chrono);\n1910: int minDigits = iMinDigits;\n1914: fraction = field.remainder(instant);\n1922: }\n1924: if (fraction == 0) {\n1938: long[] fractionData = getFractionData(fraction, field);\n1939: long scaled = fractionData[0];\n1940: int maxDigits = (int) fractionData[1];\n1942: if ((scaled & 0x7fffffff) == scaled) {\n1943: str = Integer.toString((int) scaled);\n1948: int length = str.length();\n1949: int digits = maxDigits;\n1950: while (length < digits) {\n1951: if (buf != null) {\n1952: buf.append('0');\n1956: minDigits--;\n1957: digits--;\n1960: if (minDigits < digits) {\n1962: while (minDigits < digits) {\n1963: if (length <= 1 || str.charAt(length - 1) != '0') {\n1966: digits--;\n1967: length--;\n1969: if (length < str.length()) {\n1970: if (buf != null) {\n1971: for (int i=0; i<length; i++) {\n1972: buf.append(str.charAt(i));\n1979: return;\n1988: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "566: public int getValue(int index) {\n567: switch (index) {\n569: return getChronology().year().get(getLocalMillis());\n571: return getChronology().monthOfYear().get(getLocalMillis());\n573: return getChronology().dayOfMonth().get(getLocalMillis());\n575: return getChronology().millisOfDay().get(getLocalMillis());\n579: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3",
                            "test_body": "120: public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n121: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n122: cal.set(Calendar.ERA, GregorianCalendar.BC);\n123: cal.set(Calendar.MILLISECOND, 7);\n124: LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n125: assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n126: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "649: public Chronology getChronology() {\n650: return iChronology;\n651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "541: protected DateTimeField getField(int index, Chronology chrono) {\n542: switch (index) {\n544: return chrono.year();\n546: return chrono.monthOfYear();\n548: return chrono.dayOfMonth();\n550: return chrono.millisOfDay();\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1888: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1891: long millis = partial.getChronology().set(partial, 0L);\n1893: printTo(buf, null, millis, partial.getChronology());\n1896: }\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1990: private long[] getFractionData(long fraction, DateTimeField field) {\n1991: long rangeMillis = field.getDurationField().getUnitMillis();\n1993: int maxDigits = iMaxDigits;\n1995: switch (maxDigits) {\n2005: case 9:  scalar = 1000000000L; break;\n2016: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n2017: break;\n2023: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n2024: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "68: protected abstract DateTimeField getField(int index, Chronology chrono);\n79: return getField(index, getChronology()).getType();\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "490: public LocalDateTime(\n499: super();\n500: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n501: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n503: iChronology = chronology;\n504: iLocalMillis = instant;\n505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "195: public static LocalDateTime fromCalendarFields(Calendar calendar) {\n196: if (calendar == null) {\n199: int yearOfEra = calendar.get(Calendar.YEAR);\n200: return new LocalDateTime(\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n740: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n741: iYearInfoCache[year & CACHE_MASK] = info;\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "463: public LocalDateTime(\n471: this(year, monthOfYear, dayOfMonth, hourOfDay,\n473: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n129: return (instant + 1) % iUnitMillis + iUnitMillis - 1;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "528: public int size() {\n529: return 4;\n530: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "596: public int get(DateTimeFieldType type) {\n597: if (type == null) {\n600: return type.getField(getChronology()).get(getLocalMillis());\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "770: YearInfo(int year, long firstDayMillis) {\n771: iYear = year;\n772: iFirstDayMillis = firstDayMillis;\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "2015: public String toString() {\n2016: return ISODateTimeFormat.dateTime().print(this);\n2017: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "200: long calculateFirstDayOfYearMillis(int year) {\n202: int leapYears = year / 100;\n203: if (year < 0) {\n209: leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\n211: leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n212: if (isLeapYear(year)) {\n217: return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "640: protected long getLocalMillis() {\n641: return iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n554: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "661: public boolean equals(Object partial) {\n663: if (this == partial) {\n666: if (partial instanceof LocalDateTime) {\n667: LocalDateTime other = (LocalDateTime) partial;\n668: if (iChronology.equals(other.iChronology)) {\n669: return iLocalMillis == other.iLocalMillis;\n673: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "611: public boolean isSupported(DateTimeFieldType type) {\n612: if (type == null) {\n615: return type.getField(getChronology()).isSupported();\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1906: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1909: DateTimeField field = iFieldType.getField(chrono);\n1910: int minDigits = iMinDigits;\n1914: fraction = field.remainder(instant);\n1922: }\n1924: if (fraction == 0) {\n1938: long[] fractionData = getFractionData(fraction, field);\n1939: long scaled = fractionData[0];\n1940: int maxDigits = (int) fractionData[1];\n1942: if ((scaled & 0x7fffffff) == scaled) {\n1943: str = Integer.toString((int) scaled);\n1948: int length = str.length();\n1949: int digits = maxDigits;\n1950: while (length < digits) {\n1951: if (buf != null) {\n1952: buf.append('0');\n1956: minDigits--;\n1957: digits--;\n1960: if (minDigits < digits) {\n1962: while (minDigits < digits) {\n1963: if (length <= 1 || str.charAt(length - 1) != '0') {\n1966: digits--;\n1967: length--;\n1969: if (length < str.length()) {\n1970: if (buf != null) {\n1971: for (int i=0; i<length; i++) {\n1972: buf.append(str.charAt(i));\n1979: return;\n1988: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "566: public int getValue(int index) {\n567: switch (index) {\n569: return getChronology().year().get(getLocalMillis());\n571: return getChronology().monthOfYear().get(getLocalMillis());\n573: return getChronology().dayOfMonth().get(getLocalMillis());\n575: return getChronology().millisOfDay().get(getLocalMillis());\n579: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1",
                            "test_body": "112: public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n113: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n114: cal.set(Calendar.ERA, GregorianCalendar.BC);\n115: cal.set(Calendar.MILLISECOND, 7);\n116: LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n117: assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n118: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "649: public Chronology getChronology() {\n650: return iChronology;\n651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "541: protected DateTimeField getField(int index, Chronology chrono) {\n542: switch (index) {\n544: return chrono.year();\n546: return chrono.monthOfYear();\n548: return chrono.dayOfMonth();\n550: return chrono.millisOfDay();\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1888: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1891: long millis = partial.getChronology().set(partial, 0L);\n1893: printTo(buf, null, millis, partial.getChronology());\n1896: }\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1990: private long[] getFractionData(long fraction, DateTimeField field) {\n1991: long rangeMillis = field.getDurationField().getUnitMillis();\n1993: int maxDigits = iMaxDigits;\n1995: switch (maxDigits) {\n2005: case 9:  scalar = 1000000000L; break;\n2016: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n2017: break;\n2023: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n2024: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "68: protected abstract DateTimeField getField(int index, Chronology chrono);\n79: return getField(index, getChronology()).getType();\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "490: public LocalDateTime(\n499: super();\n500: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n501: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n503: iChronology = chronology;\n504: iLocalMillis = instant;\n505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "195: public static LocalDateTime fromCalendarFields(Calendar calendar) {\n196: if (calendar == null) {\n199: int yearOfEra = calendar.get(Calendar.YEAR);\n200: return new LocalDateTime(\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n740: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n741: iYearInfoCache[year & CACHE_MASK] = info;\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "463: public LocalDateTime(\n471: this(year, monthOfYear, dayOfMonth, hourOfDay,\n473: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n129: return (instant + 1) % iUnitMillis + iUnitMillis - 1;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "528: public int size() {\n529: return 4;\n530: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "596: public int get(DateTimeFieldType type) {\n597: if (type == null) {\n600: return type.getField(getChronology()).get(getLocalMillis());\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "770: YearInfo(int year, long firstDayMillis) {\n771: iYear = year;\n772: iFirstDayMillis = firstDayMillis;\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "2015: public String toString() {\n2016: return ISODateTimeFormat.dateTime().print(this);\n2017: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "200: long calculateFirstDayOfYearMillis(int year) {\n202: int leapYears = year / 100;\n203: if (year < 0) {\n209: leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\n211: leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n212: if (isLeapYear(year)) {\n217: return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "640: protected long getLocalMillis() {\n641: return iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n554: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "661: public boolean equals(Object partial) {\n663: if (this == partial) {\n666: if (partial instanceof LocalDateTime) {\n667: LocalDateTime other = (LocalDateTime) partial;\n668: if (iChronology.equals(other.iChronology)) {\n669: return iLocalMillis == other.iLocalMillis;\n673: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "611: public boolean isSupported(DateTimeFieldType type) {\n612: if (type == null) {\n615: return type.getField(getChronology()).isSupported();\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1906: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1909: DateTimeField field = iFieldType.getField(chrono);\n1910: int minDigits = iMinDigits;\n1914: fraction = field.remainder(instant);\n1922: }\n1924: if (fraction == 0) {\n1938: long[] fractionData = getFractionData(fraction, field);\n1939: long scaled = fractionData[0];\n1940: int maxDigits = (int) fractionData[1];\n1942: if ((scaled & 0x7fffffff) == scaled) {\n1943: str = Integer.toString((int) scaled);\n1948: int length = str.length();\n1949: int digits = maxDigits;\n1950: while (length < digits) {\n1951: if (buf != null) {\n1952: buf.append('0');\n1956: minDigits--;\n1957: digits--;\n1960: if (minDigits < digits) {\n1962: while (minDigits < digits) {\n1963: if (length <= 1 || str.charAt(length - 1) != '0') {\n1966: digits--;\n1967: length--;\n1969: if (length < str.length()) {\n1970: if (buf != null) {\n1971: for (int i=0; i<length; i++) {\n1972: buf.append(str.charAt(i));\n1979: return;\n1988: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "566: public int getValue(int index) {\n567: switch (index) {\n569: return getChronology().year().get(getLocalMillis());\n571: return getChronology().monthOfYear().get(getLocalMillis());\n573: return getChronology().dayOfMonth().get(getLocalMillis());\n575: return getChronology().millisOfDay().get(getLocalMillis());\n579: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1",
                            "test_body": "142: public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n143: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n144: cal.set(Calendar.ERA, GregorianCalendar.BC);\n145: cal.set(Calendar.MILLISECOND, 7);\n146: LocalDate expected = new LocalDate(0, 2, 3);\n147: assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n148: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "865: public static DateTimeFormatter date() {\n866: return yearMonthDay();\n867: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "599: protected long getLocalMillis() {\n600: return iLocalMillis;\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "620: public boolean equals(Object partial) {\n622: if (this == partial) {\n625: if (partial instanceof LocalDate) {\n626: LocalDate other = (LocalDate) partial;\n627: if (iChronology.equals(other.iChronology)) {\n628: return iLocalMillis == other.iLocalMillis;\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "608: public Chronology getChronology() {\n609: return iChronology;\n610: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: if ((base = iBase) != null && (iBaseFlags & 6) == 6) {\n120: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "440: public LocalDate(\n445: super();\n446: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n447: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n448: iChronology = chronology;\n449: iLocalMillis = instant;\n450: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "422: public LocalDate(\n426: this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1804: public String toString() {\n1805: return ISODateTimeFormat.date().print(this);\n1806: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "541: public int get(DateTimeFieldType fieldType) {\n542: if (fieldType == null) {\n545: if (isSupported(fieldType) == false) {\n548: return fieldType.getField(getChronology()).get(getLocalMillis());\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1357: public static DateTimeFormatter yearMonthDay() {\n1358: if (ymd == null) {\n1365: return ymd;\n1366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "559: public boolean isSupported(DateTimeFieldType type) {\n560: if (type == null) {\n563: DurationFieldType durType = type.getDurationType();\n564: if (DATE_DURATION_TYPES.contains(durType) ||\n567: return type.getField(getChronology()).isSupported();\n570: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDate;",
                                    "method_body": "239: public static LocalDate fromDateFields(Date date) {\n240: if (date == null) {\n244: return new LocalDate(\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1",
                            "test_body": "104: public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n105: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n106: cal.set(Calendar.ERA, GregorianCalendar.BC);\n107: cal.set(Calendar.MILLISECOND, 7);\n108: LocalDate expected = new LocalDate(0, 2, 3);\n109: assertEquals(expected, LocalDate.fromCalendarFields(cal));\n110: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "865: public static DateTimeFormatter date() {\n866: return yearMonthDay();\n867: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "599: protected long getLocalMillis() {\n600: return iLocalMillis;\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "620: public boolean equals(Object partial) {\n622: if (this == partial) {\n625: if (partial instanceof LocalDate) {\n626: LocalDate other = (LocalDate) partial;\n627: if (iChronology.equals(other.iChronology)) {\n628: return iLocalMillis == other.iLocalMillis;\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "608: public Chronology getChronology() {\n609: return iChronology;\n610: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: if ((base = iBase) != null && (iBaseFlags & 6) == 6) {\n120: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "440: public LocalDate(\n445: super();\n446: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n447: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n448: iChronology = chronology;\n449: iLocalMillis = instant;\n450: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "422: public LocalDate(\n426: this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1804: public String toString() {\n1805: return ISODateTimeFormat.date().print(this);\n1806: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "541: public int get(DateTimeFieldType fieldType) {\n542: if (fieldType == null) {\n545: if (isSupported(fieldType) == false) {\n548: return fieldType.getField(getChronology()).get(getLocalMillis());\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1357: public static DateTimeFormatter yearMonthDay() {\n1358: if (ymd == null) {\n1365: return ymd;\n1366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "559: public boolean isSupported(DateTimeFieldType type) {\n560: if (type == null) {\n563: DurationFieldType durType = type.getDurationType();\n564: if (DATE_DURATION_TYPES.contains(durType) ||\n567: return type.getField(getChronology()).isSupported();\n570: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDate;",
                                    "method_body": "206: public static LocalDate fromCalendarFields(Calendar calendar) {\n207: if (calendar == null) {\n210: int yearOfEra = calendar.get(Calendar.YEAR);\n211: return new LocalDate(\n216: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3",
                            "test_body": "150: public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n151: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n152: cal.set(Calendar.ERA, GregorianCalendar.BC);\n153: cal.set(Calendar.MILLISECOND, 7);\n154: LocalDate expected = new LocalDate(-2, 2, 3);\n155: assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n156: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "865: public static DateTimeFormatter date() {\n866: return yearMonthDay();\n867: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "599: protected long getLocalMillis() {\n600: return iLocalMillis;\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "620: public boolean equals(Object partial) {\n622: if (this == partial) {\n625: if (partial instanceof LocalDate) {\n626: LocalDate other = (LocalDate) partial;\n627: if (iChronology.equals(other.iChronology)) {\n628: return iLocalMillis == other.iLocalMillis;\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "608: public Chronology getChronology() {\n609: return iChronology;\n610: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: if ((base = iBase) != null && (iBaseFlags & 6) == 6) {\n120: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "440: public LocalDate(\n445: super();\n446: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n447: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n448: iChronology = chronology;\n449: iLocalMillis = instant;\n450: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "422: public LocalDate(\n426: this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1804: public String toString() {\n1805: return ISODateTimeFormat.date().print(this);\n1806: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "541: public int get(DateTimeFieldType fieldType) {\n542: if (fieldType == null) {\n545: if (isSupported(fieldType) == false) {\n548: return fieldType.getField(getChronology()).get(getLocalMillis());\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1357: public static DateTimeFormatter yearMonthDay() {\n1358: if (ymd == null) {\n1365: return ymd;\n1366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "559: public boolean isSupported(DateTimeFieldType type) {\n560: if (type == null) {\n563: DurationFieldType durType = type.getDurationType();\n564: if (DATE_DURATION_TYPES.contains(durType) ||\n567: return type.getField(getChronology()).isSupported();\n570: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDate;",
                                    "method_body": "239: public static LocalDate fromDateFields(Date date) {\n240: if (date == null) {\n244: return new LocalDate(\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3",
                            "test_body": "112: public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n113: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n114: cal.set(Calendar.ERA, GregorianCalendar.BC);\n115: cal.set(Calendar.MILLISECOND, 7);\n116: LocalDate expected = new LocalDate(-2, 2, 3);\n117: assertEquals(expected, LocalDate.fromCalendarFields(cal));\n118: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "865: public static DateTimeFormatter date() {\n866: return yearMonthDay();\n867: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "599: protected long getLocalMillis() {\n600: return iLocalMillis;\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "620: public boolean equals(Object partial) {\n622: if (this == partial) {\n625: if (partial instanceof LocalDate) {\n626: LocalDate other = (LocalDate) partial;\n627: if (iChronology.equals(other.iChronology)) {\n628: return iLocalMillis == other.iLocalMillis;\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "608: public Chronology getChronology() {\n609: return iChronology;\n610: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "113: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n118: if ((base = iBase) != null && (iBaseFlags & 6) == 6) {\n120: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "440: public LocalDate(\n445: super();\n446: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n447: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n448: iChronology = chronology;\n449: iLocalMillis = instant;\n450: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "422: public LocalDate(\n426: this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1804: public String toString() {\n1805: return ISODateTimeFormat.date().print(this);\n1806: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "541: public int get(DateTimeFieldType fieldType) {\n542: if (fieldType == null) {\n545: if (isSupported(fieldType) == false) {\n548: return fieldType.getField(getChronology()).get(getLocalMillis());\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1357: public static DateTimeFormatter yearMonthDay() {\n1358: if (ymd == null) {\n1365: return ymd;\n1366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "559: public boolean isSupported(DateTimeFieldType type) {\n560: if (type == null) {\n563: DurationFieldType durType = type.getDurationType();\n564: if (DATE_DURATION_TYPES.contains(durType) ||\n567: return type.getField(getChronology()).isSupported();\n570: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDate;",
                                    "method_body": "206: public static LocalDate fromCalendarFields(Calendar calendar) {\n207: if (calendar == null) {\n210: int yearOfEra = calendar.get(Calendar.YEAR);\n211: return new LocalDate(\n216: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3",
                            "test_body": "158: public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n159: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n160: cal.set(Calendar.ERA, GregorianCalendar.BC);\n161: cal.set(Calendar.MILLISECOND, 7);\n162: LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n163: assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n164: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "649: public Chronology getChronology() {\n650: return iChronology;\n651: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "541: protected DateTimeField getField(int index, Chronology chrono) {\n542: switch (index) {\n544: return chrono.year();\n546: return chrono.monthOfYear();\n548: return chrono.dayOfMonth();\n550: return chrono.millisOfDay();\n554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1888: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1891: long millis = partial.getChronology().set(partial, 0L);\n1893: printTo(buf, null, millis, partial.getChronology());\n1896: }\n1897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1990: private long[] getFractionData(long fraction, DateTimeField field) {\n1991: long rangeMillis = field.getDurationField().getUnitMillis();\n1993: int maxDigits = iMaxDigits;\n1995: switch (maxDigits) {\n2005: case 9:  scalar = 1000000000L; break;\n2016: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n2017: break;\n2023: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n2024: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2652: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2653: DateTimePrinter[] elements = iPrinters;\n2654: if (elements == null) {\n2658: if (locale == null) {\n2660: locale = Locale.getDefault();\n2663: int len = elements.length;\n2664: for (int i=0; i<len; i++) {\n2665: elements[i].printTo(buf, partial, locale);\n2667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "68: protected abstract DateTimeField getField(int index, Chronology chrono);\n79: return getField(index, getChronology()).getType();\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n526: return chronology.millisOfDay();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "490: public LocalDateTime(\n499: super();\n500: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n501: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n503: iChronology = chronology;\n504: iLocalMillis = instant;\n505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n82: return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "463: public LocalDateTime(\n471: this(year, monthOfYear, dayOfMonth, hourOfDay,\n473: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n51: buf.append('-');\n52: if (value != Integer.MIN_VALUE) {\n53: value = -value;\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n402: i2 = i2 - unitMillis + 1;\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n129: return (instant + 1) % iUnitMillis + iUnitMillis - 1;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "528: public int size() {\n529: return 4;\n530: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "596: public int get(DateTimeFieldType type) {\n597: if (type == null) {\n600: return type.getField(getChronology()).get(getLocalMillis());\n601: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "281: public static final Chronology getChronology(Chronology chrono) {\n282: if (chrono == null) {\n285: return chrono;\n286: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "2015: public String toString() {\n2016: return ISODateTimeFormat.dateTime().print(this);\n2017: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "232: public static LocalDateTime fromDateFields(Date date) {\n233: if (date == null) {\n237: return new LocalDateTime(\n246: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "640: protected long getLocalMillis() {\n641: return iLocalMillis;\n642: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "189: public boolean equals(Object obj) {\n190: return super.equals(obj);\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n554: return (DateTimeConstants.MILLIS_PER_DAY - 1)\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1456: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1457: if (partial.isSupported(iFieldType)) {\n1459: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1462: }\n1466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "297: public long set(long instant, int month) {\n298: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n300: int thisYear = iChronology.getYear(instant);\n302: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n303: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n304: if (thisDom > maxDom) {\n309: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2610: public int estimatePrintedLength() {\n2611: return iPrintedLengthEstimate;\n2612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "661: public boolean equals(Object partial) {\n663: if (this == partial) {\n666: if (partial instanceof LocalDateTime) {\n667: LocalDateTime other = (LocalDateTime) partial;\n668: if (iChronology.equals(other.iChronology)) {\n669: return iLocalMillis == other.iLocalMillis;\n673: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "611: public boolean isSupported(DateTimeFieldType type) {\n612: if (type == null) {\n615: return type.getField(getChronology()).isSupported();\n616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "238: public long set(ReadablePartial partial, long instant) {\n239: for (int i = 0, isize = partial.size(); i < isize; i++) {\n240: instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\n242: return instant;\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1906: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1909: DateTimeField field = iFieldType.getField(chrono);\n1910: int minDigits = iMinDigits;\n1914: fraction = field.remainder(instant);\n1922: }\n1924: if (fraction == 0) {\n1938: long[] fractionData = getFractionData(fraction, field);\n1939: long scaled = fractionData[0];\n1940: int maxDigits = (int) fractionData[1];\n1942: if ((scaled & 0x7fffffff) == scaled) {\n1943: str = Integer.toString((int) scaled);\n1948: int length = str.length();\n1949: int digits = maxDigits;\n1950: while (length < digits) {\n1951: if (buf != null) {\n1952: buf.append('0');\n1956: minDigits--;\n1957: digits--;\n1960: if (minDigits < digits) {\n1962: while (minDigits < digits) {\n1963: if (length <= 1 || str.charAt(length - 1) != '0') {\n1966: digits--;\n1967: length--;\n1969: if (length < str.length()) {\n1970: if (buf != null) {\n1971: for (int i=0; i<length; i++) {\n1972: buf.append(str.charAt(i));\n1979: return;\n1988: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "233: public static void verifyValueBounds(DateTimeFieldType fieldType,\n235: if ((value < lowerBound) || (value > upperBound)) {\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "566: public int getValue(int index) {\n567: switch (index) {\n569: return getChronology().year().get(getLocalMillis());\n571: return getChronology().monthOfYear().get(getLocalMillis());\n573: return getChronology().dayOfMonth().get(getLocalMillis());\n575: return getChronology().millisOfDay().get(getLocalMillis());\n579: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1190: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1191: buf.append(iValue);\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 13,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative",
                            "test_body": "118: public void testFormatStandard_negative() {\n119: Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n120: assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n121: 122: p = Period.years(-54);\n123: assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n124: 125: p = Period.seconds(4).withMillis(-8);\n126: assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n127: 128: p = Period.seconds(-4).withMillis(8);\n129: assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n130: 131: p = Period.seconds(-23);\n132: assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n133: 134: p = Period.millis(-8);\n135: assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n136: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldValue(Lorg/joda/time/ReadablePeriod;)J",
                                    "method_body": "1380: long getFieldValue(ReadablePeriod period) {\n1382: if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {\n1385: type = period.getPeriodType();\n1387: if (type != null && isSupported(type, iFieldType) == false) {\n1393: switch (iFieldType) {\n1397: value = period.get(DurationFieldType.years());\n1398: break;\n1400: value = period.get(DurationFieldType.months());\n1401: break;\n1403: value = period.get(DurationFieldType.weeks());\n1404: break;\n1406: value = period.get(DurationFieldType.days());\n1407: break;\n1409: value = period.get(DurationFieldType.hours());\n1410: break;\n1412: value = period.get(DurationFieldType.minutes());\n1413: break;\n1422: int seconds = period.get(DurationFieldType.seconds());\n1423: int millis = period.get(DurationFieldType.millis());\n1424: value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;\n1429: if (value == 0) {\n1430: switch (iPrintZeroSetting) {\n1434: if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n1441: return Long.MAX_VALUE;\n1460: return value;\n1461: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:millis(I)Lorg/joda/time/Period;",
                                    "method_body": "225: public static Period millis(int millis) {\n226: return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n227: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:printTo(Ljava/lang/StringBuffer;I)V",
                                    "method_body": "835: int calculatePrintedLength(int value);\n864: return iText.length();\n868: buf.append(iText);\n869: }\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isZero(Lorg/joda/time/ReadablePeriod;)Z",
                                    "method_body": "1463: boolean isZero(ReadablePeriod period) {\n1464: for (int i = 0, isize = period.size(); i < isize; i++) {\n1465: if (period.getValue(i) != 0) {\n1466: return false;\n1470: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:years(I)Lorg/joda/time/Period;",
                                    "method_body": "109: public static Period years(int years) {\n110: return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "328: public int getValue(int index) {\n329: return iValues[index];\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "1805: public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n1806: PeriodPrinter[] printers = iPrinters;\n1807: int len = printers.length;\n1808: for (int i=0; i<len; i++) {\n1809: printers[i].printTo(buf, period, locale);\n1811: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkPrinter()V",
                                    "method_body": "250: private void checkPrinter() {\n251: if (iPrinter == null) {\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "186: public static DurationFieldType years() {\n187: return YEARS_TYPE;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "94: public int[] getValues() {\n95: int[] result = new int[size()];\n96: for (int i = 0; i < result.length; i++) {\n97: result[i] = getValue(i);\n99: return result;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "64: public static PeriodFormatter standard() {\n65: if (cStandard == null) {\n85: return cStandard;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:calculateDigitCount(J)I",
                                    "method_body": "335: public static int calculateDigitCount(long value) {\n336: if (value < 0) {\n337: if (value != Long.MIN_VALUE) {\n338: return calculateDigitCount(-value) + 1;\n343: return\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "389: private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n390: int index = indexOf(type);\n391: if (index == -1) {\n397: values[index] = newValue;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getPrinter()Lorg/joda/time/format/PeriodPrinter;",
                                    "method_body": "127: public PeriodPrinter getPrinter() {\n128: return iPrinter;\n129: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:countFieldsToPrint(Lorg/joda/time/ReadablePeriod;ILjava/util/Locale;)I",
                                    "method_body": "1078: public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n1079: if (stopAt <= 0) {\n1082: if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {\n1083: return 1;\n1085: return 0;\n1086: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "451: private int[] setPeriodInternal(int years, int months, int weeks, int days,\n453: int[] newValues = new int[size()];\n454: checkAndUpdate(DurationFieldType.years(), newValues, years);\n455: checkAndUpdate(DurationFieldType.months(), newValues, months);\n456: checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);\n457: checkAndUpdate(DurationFieldType.days(), newValues, days);\n458: checkAndUpdate(DurationFieldType.hours(), newValues, hours);\n459: checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);\n460: checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);\n461: checkAndUpdate(DurationFieldType.millis(), newValues, millis);\n462: return newValues;\n463: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:calculatePrintedLength(I)I",
                                    "method_body": "835: int calculatePrintedLength(int value);\n864: return iText.length();\n868: buf.append(iText);\n869: }\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isSupported(Lorg/joda/time/PeriodType;I)Z",
                                    "method_body": "1472: boolean isSupported(PeriodType type, int field) {\n1473: switch (field) {\n1477: return type.isSupported(DurationFieldType.years());\n1479: return type.isSupported(DurationFieldType.months());\n1481: return type.isSupported(DurationFieldType.weeks());\n1483: return type.isSupported(DurationFieldType.days());\n1485: return type.isSupported(DurationFieldType.hours());\n1487: return type.isSupported(DurationFieldType.minutes());\n1494: return type.isSupported(DurationFieldType.seconds()) ||\n1497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "327: public Period(int years, int months, int weeks, int days,\n329: super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n80: if (value < 1000) {\n81: digits = 3;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>([ILorg/joda/time/PeriodType;)V",
                                    "method_body": "682: private Period(int[] values, PeriodType type) {\n683: super(values, type);\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "647: public int indexOf(DurationFieldType type) {\n648: for (int i = 0, isize = size(); i < isize; i++) {\n649: if (iTypes[i] == type) {\n650: return i;\n654: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>([ILorg/joda/time/PeriodType;)V",
                                    "method_body": "292: protected BasePeriod(int[] values, PeriodType type) {\n293: super();\n294: iType = type;\n295: iValues = values;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "307: protected PeriodType checkPeriodType(PeriodType type) {\n308: return DateTimeUtils.getPeriodType(type);\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "122: public static DurationFieldType minutes() {\n123: return MINUTES_TYPE;\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "317: public PeriodType getPeriodType() {\n318: return iType;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "687: boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n688: int realIndex = iIndices[index];\n689: if (realIndex == -1) {\n692: values[realIndex] = newValue;\n693: return true;\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "1657: public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n1658: PeriodPrinter before = iBeforePrinter;\n1659: PeriodPrinter after = iAfterPrinter;\n1661: before.printTo(buf, period, locale);\n1662: if (iUseBefore) {\n1673: } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n1674: buf.append(iText);\n1676: after.printTo(buf, period, locale);\n1677: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "55: public int size() {\n56: return getPeriodType().size();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "530: FixedMillisProvider(long fixedMillis) {\n531: iMillis = fixedMillis;\n532: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "111: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n112: checkPermission();\n113: cMillisProvider = new FixedMillisProvider(fixedMillis);\n114: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "158: private static void checkPermission() throws SecurityException {\n159: SecurityManager sm = System.getSecurityManager();\n160: if (sm != null) {\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "113: public static DurationFieldType seconds() {\n114: return SECONDS_TYPE;\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "1632: public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n1633: PeriodPrinter before = iBeforePrinter;\n1634: PeriodPrinter after = iAfterPrinter;\n1636: int sum = before.calculatePrintedLength(period, locale)\n1639: if (iUseBefore) {\n1650: } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n1651: sum += iText.length();\n1654: return sum;\n1655: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:get(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "112: public int get(DurationFieldType type) {\n113: int index = indexOf(type);\n114: if (index == -1) {\n117: return getValue(index);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "315: public static final PeriodType getPeriodType(PeriodType type) {\n316: if (type == null) {\n319: return type;\n320: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "131: public static DurationFieldType hours() {\n132: return HOURS_TYPE;\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:seconds(I)Lorg/joda/time/Period;",
                                    "method_body": "211: public static Period seconds(int seconds) {\n212: return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "1556: public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n1557: buf.append(iText);\n1558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "97: public static final void setCurrentMillisSystem() throws SecurityException {\n98: checkPermission();\n99: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "1120: public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n1121: long valueLong = getFieldValue(period);\n1122: if (valueLong == Long.MAX_VALUE) {\n1123: return;\n1125: int value = (int) valueLong;\n1126: if (iFieldType >= SECONDS_MILLIS) {\n1127: value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n1130: if (iPrefix != null) {\n1133: int minDigits = iMinPrintedDigits;\n1134: if (minDigits <= 1) {\n1135: FormatUtils.appendUnpaddedInteger(buf, value);\n1139: if (iFieldType >= SECONDS_MILLIS) {\n1140: int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n1141: if (iFieldType == SECONDS_MILLIS || dp > 0) {\n1142: buf.append('.');\n1143: FormatUtils.appendPaddedInteger(buf, dp, 3);\n1146: if (iSuffix != null) {\n1147: iSuffix.printTo(buf, value);\n1149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "159: public static DurationFieldType weeks() {\n160: return WEEKS_TYPE;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:isSupported(Lorg/joda/time/DurationFieldType;)Z",
                                    "method_body": "637: public boolean isSupported(DurationFieldType type) {\n638: return (indexOf(type) >= 0);\n639: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:print(Lorg/joda/time/ReadablePeriod;)Ljava/lang/String;",
                                    "method_body": "235: public String print(ReadablePeriod period) {\n236: checkPrinter();\n237: checkPeriod(period);\n239: PeriodPrinter printer = getPrinter();\n240: StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\n241: printer.printTo(buf, period, iLocale);\n242: return buf.toString();\n243: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "1088: public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n1089: long valueLong = getFieldValue(period);\n1090: if (valueLong == Long.MAX_VALUE) {\n1091: return 0;\n1094: int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n1095: if (iFieldType >= SECONDS_MILLIS) {\n1098: sum = Math.max(sum, 4);\n1100: sum++;\n1101: if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n1103: sum -= 4; // remove three digits and decimal point\n1106: valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n1108: int value = (int) valueLong;\n1110: if (iPrefix != null) {\n1113: if (iSuffix != null) {\n1114: sum += iSuffix.calculatePrintedLength(value);\n1117: return sum;\n1118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:countFieldsToPrint(Lorg/joda/time/ReadablePeriod;ILjava/util/Locale;)I",
                                    "method_body": "1787: public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n1788: int sum = 0;\n1789: PeriodPrinter[] printers = iPrinters;\n1790: for (int i=printers.length; sum < stopAt && --i>=0; ) {\n1791: sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);\n1793: return sum;\n1794: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "261: private void checkPeriod(ReadablePeriod period) {\n262: if (period == null) {\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:withMillis(I)Lorg/joda/time/Period;",
                                    "method_body": "966: public Period withMillis(int millis) {\n967: int[] values = getValues();  // cloned\n968: getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n969: return new Period(values, getPeriodType());\n970: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "1552: public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n1553: return iText.length();\n1554: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "136: public int indexOf(DurationFieldType type) {\n137: return getPeriodType().indexOf(type);\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendUnpaddedInteger(Ljava/lang/StringBuffer;I)V",
                                    "method_body": "235: public static void appendUnpaddedInteger(StringBuffer buf, int value) {\n236: if (value < 0) {\n237: buf.append('-');\n238: if (value != Integer.MIN_VALUE) {\n239: value = -value;\n245: if (value < 10) {\n246: buf.append((char)(value + '0'));\n247: } else if (value < 100) {\n251: int d = ((value + 1) * 13421772) >> 27;\n252: buf.append((char) (d + '0'));\n254: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n255: } else {\n258: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "1796: public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n1797: int sum = 0;\n1798: PeriodPrinter[] printers = iPrinters;\n1799: for (int i=printers.length; --i>=0; ) {\n1800: sum += printers[i].calculatePrintedLength(period, locale);\n1802: return sum;\n1803: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "87: protected BasePeriod(int years, int months, int weeks, int days,\n90: super();\n91: type = checkPeriodType(type);\n92: iType = type;\n93: iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n94: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 14,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust",
                            "test_body": "559: public void testMinusMonths_int_endOfMonthAdjust() {\n560: MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n561: MonthDay result = test.minusMonths(1);\n562: MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n563: assertEquals(expected, result);\n564: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "48: public static int safeNegate(int value) {\n49: if (value == Integer.MIN_VALUE) {\n52: return -value;\n53: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:toString()Ljava/lang/String;",
                                    "method_body": "779: public String toString() {\n780: List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\n781: fields.add(DateTimeFieldType.monthOfYear());\n782: fields.add(DateTimeFieldType.dayOfMonth());\n783: return ISODateTimeFormat.forFields(fields, true, true).print(this);\n784: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
                                    "method_body": "222: public int[] get(ReadablePartial partial, long instant) {\n223: int size = partial.size();\n224: int[] values = new int[size];\n225: for (int i = 0; i < size; i++) {\n226: values[i] = partial.getFieldType(i).getField(this).get(instant);\n228: return values;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1279: NumberFormatter(DateTimeFieldType fieldType,\n1281: super();\n1282: iFieldType = fieldType;\n1283: iMaxParsedDigits = maxParsedDigits;\n1284: iSigned = signed;\n1285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:forFields(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "225: public static DateTimeFormatter forFields(\n230: if (fields == null || fields.size() == 0) {\n233: Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);\n234: int inputSize = workingFields.size();\n235: boolean reducedPrec = false;\n236: DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n238: if (workingFields.contains(DateTimeFieldType.monthOfYear())) {\n239: reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);\n255: boolean datePresent = (workingFields.size() < inputSize);\n258: time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);\n261: if (bld.canBuildFormatter() == false) {\n268: fields.retainAll(workingFields);\n271: }\n272: return bld.toFormatter();\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:hashCode()I",
                                    "method_body": "474: public int hashCode() {\n475: return (1 << iOrdinal);\n476: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>(Lorg/joda/time/base/BasePartial;[I)V",
                                    "method_body": "195: protected BasePartial(BasePartial base, int[] values) {\n196: super();\n197: iChronology = base.iChronology;\n198: iValues = values;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
                                    "method_body": "361: MonthDay(MonthDay partial, int[] values) {\n362: super(partial, values);\n363: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "736: public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n737: return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "203: public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n206: if (valueToAdd == 0) {\n210: if (DateTimeUtils.isContiguous(partial)) {\n211: long instant = 0L;\n212: for (int i = 0, isize = partial.size(); i < isize; i++) {\n213: instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n215: instant = add(instant, valueToAdd);\n216: return iChronology.get(partial, instant);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "651: public MonthDay minusMonths(int months) {\n652: return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n653: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "149: public int get(DateTimeFieldType type) {\n150: return getValue(indexOfSupported(type));\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:appendSeparator(Lorg/joda/time/format/DateTimeFormatterBuilder;Z)V",
                                    "method_body": "548: private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\n549: if (extended) {\n550: bld.appendLiteral('-');\n552: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2649: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2650: DateTimePrinter[] elements = iPrinters;\n2651: if (elements == null) {\n2655: if (locale == null) {\n2657: locale = Locale.getDefault();\n2660: int len = elements.length;\n2661: for (int i=0; i<len; i++) {\n2662: elements[i].printTo(buf, partial, locale);\n2664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "224: public int getValue(int index) {\n225: return iValues[index];\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1189: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1190: buf.append(iValue);\n1191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n408: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:equals(Ljava/lang/Object;)Z",
                                    "method_body": "254: public boolean equals(Object partial) {\n255: if (this == partial) {\n258: if (partial instanceof ReadablePartial == false) {\n261: ReadablePartial other = (ReadablePartial) partial;\n262: if (size() != other.size()) {\n265: for (int i = 0, isize = size(); i < isize; i++) {\n266: if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {\n267: return false;\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "159: public boolean isSupported(DateTimeFieldType type) {\n160: return (indexOf(type) != -1);\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateByMonth(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZ)Z",
                                    "method_body": "287: private static boolean dateByMonth(\n293: boolean reducedPrec = false;\n294: if (fields.remove(DateTimeFieldType.year())) {\n322: } else if (fields.remove(DateTimeFieldType.monthOfYear())) {\n323: bld.appendLiteral('-');\n324: bld.appendLiteral('-');\n325: bld.appendMonthOfYear(2);\n326: if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n328: appendSeparator(bld, extended);\n329: bld.appendDayOfMonth(2);\n341: return reducedPrec;\n342: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1455: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1456: if (partial.isSupported(iFieldType)) {\n1458: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1461: }\n1465: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:time(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZZZ)V",
                                    "method_body": "462: private static void time(\n470: boolean hour = fields.remove(DateTimeFieldType.hourOfDay());\n471: boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());\n472: boolean second = fields.remove(DateTimeFieldType.secondOfMinute());\n473: boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());\n474: if (!hour && !minute && !second && !milli) {\n475: return;\n524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "169: public int indexOf(DateTimeFieldType type) {\n170: for (int i = 0, isize = size(); i < isize; i++) {\n171: if (getFieldType(i) == type) {\n172: return i;\n176: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n139: dayToUse = maxDay;\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1422: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1425: super(fieldType, maxParsedDigits, signed);\n1426: iMinPrintedDigits = minPrintedDigits;\n1427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "186: protected int indexOfSupported(DateTimeFieldType type) {\n187: int index = indexOf(type);\n188: if (index == -1) {\n191: return index;\n192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
                                    "method_body": "1146: private boolean isFormatter(Object f) {\n1147: return (isPrinter(f) || isParser(f));\n1148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:canBuildFormatter()Z",
                                    "method_body": "166: public boolean canBuildFormatter() {\n167: return isFormatter(getFormatter());\n168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust",
                            "test_body": "472: public void testPlusMonths_int_negativeEndOfMonthAdjust() {\n473: MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n474: MonthDay result = test.plusMonths(-1);\n475: MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n476: assertEquals(expected, result);\n477: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "611: public String print(ReadablePartial partial) {\n612: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n613: printTo(buf, partial);\n614: return buf.toString();\n615: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:toString()Ljava/lang/String;",
                                    "method_body": "779: public String toString() {\n780: List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\n781: fields.add(DateTimeFieldType.monthOfYear());\n782: fields.add(DateTimeFieldType.dayOfMonth());\n783: return ISODateTimeFormat.forFields(fields, true, true).print(this);\n784: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
                                    "method_body": "222: public int[] get(ReadablePartial partial, long instant) {\n223: int size = partial.size();\n224: int[] values = new int[size];\n225: for (int i = 0; i < size; i++) {\n226: values[i] = partial.getFieldType(i).getField(this).get(instant);\n228: return values;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1279: NumberFormatter(DateTimeFieldType fieldType,\n1281: super();\n1282: iFieldType = fieldType;\n1283: iMaxParsedDigits = maxParsedDigits;\n1284: iSigned = signed;\n1285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "591: public MonthDay plusMonths(int months) {\n592: return withFieldAdded(DurationFieldType.months(), months);\n593: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:forFields(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "225: public static DateTimeFormatter forFields(\n230: if (fields == null || fields.size() == 0) {\n233: Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);\n234: int inputSize = workingFields.size();\n235: boolean reducedPrec = false;\n236: DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n238: if (workingFields.contains(DateTimeFieldType.monthOfYear())) {\n239: reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);\n255: boolean datePresent = (workingFields.size() < inputSize);\n258: time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);\n261: if (bld.canBuildFormatter() == false) {\n268: fields.retainAll(workingFields);\n271: }\n272: return bld.toFormatter();\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:hashCode()I",
                                    "method_body": "474: public int hashCode() {\n475: return (1 << iOrdinal);\n476: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>(Lorg/joda/time/base/BasePartial;[I)V",
                                    "method_body": "195: protected BasePartial(BasePartial base, int[] values) {\n196: super();\n197: iChronology = base.iChronology;\n198: iValues = values;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
                                    "method_body": "361: MonthDay(MonthDay partial, int[] values) {\n362: super(partial, values);\n363: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "736: public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n737: return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "203: public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n206: if (valueToAdd == 0) {\n210: if (DateTimeUtils.isContiguous(partial)) {\n211: long instant = 0L;\n212: for (int i = 0, isize = partial.size(); i < isize; i++) {\n213: instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n215: instant = add(instant, valueToAdd);\n216: return iChronology.get(partial, instant);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "149: public int get(DateTimeFieldType type) {\n150: return getValue(indexOfSupported(type));\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "532: public void printTo(StringBuffer buf, ReadablePartial partial) {\n533: DateTimePrinter printer = requirePrinter();\n534: if (partial == null) {\n537: printer.printTo(buf, partial, iLocale);\n538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:appendSeparator(Lorg/joda/time/format/DateTimeFormatterBuilder;Z)V",
                                    "method_body": "548: private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\n549: if (extended) {\n550: bld.appendLiteral('-');\n552: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2649: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2650: DateTimePrinter[] elements = iPrinters;\n2651: if (elements == null) {\n2655: if (locale == null) {\n2657: locale = Locale.getDefault();\n2660: int len = elements.length;\n2661: for (int i=0; i<len; i++) {\n2662: elements[i].printTo(buf, partial, locale);\n2664: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "224: public int getValue(int index) {\n225: return iValues[index];\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1189: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1190: buf.append(iValue);\n1191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n408: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:equals(Ljava/lang/Object;)Z",
                                    "method_body": "254: public boolean equals(Object partial) {\n255: if (this == partial) {\n258: if (partial instanceof ReadablePartial == false) {\n261: ReadablePartial other = (ReadablePartial) partial;\n262: if (size() != other.size()) {\n265: for (int i = 0, isize = size(); i < isize; i++) {\n266: if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {\n267: return false;\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "159: public boolean isSupported(DateTimeFieldType type) {\n160: return (indexOf(type) != -1);\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateByMonth(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZ)Z",
                                    "method_body": "287: private static boolean dateByMonth(\n293: boolean reducedPrec = false;\n294: if (fields.remove(DateTimeFieldType.year())) {\n322: } else if (fields.remove(DateTimeFieldType.monthOfYear())) {\n323: bld.appendLiteral('-');\n324: bld.appendLiteral('-');\n325: bld.appendMonthOfYear(2);\n326: if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n328: appendSeparator(bld, extended);\n329: bld.appendDayOfMonth(2);\n341: return reducedPrec;\n342: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1455: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1456: if (partial.isSupported(iFieldType)) {\n1458: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1461: }\n1465: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:time(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZZZ)V",
                                    "method_body": "462: private static void time(\n470: boolean hour = fields.remove(DateTimeFieldType.hourOfDay());\n471: boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());\n472: boolean second = fields.remove(DateTimeFieldType.secondOfMinute());\n473: boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());\n474: if (!hour && !minute && !second && !milli) {\n475: return;\n524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "169: public int indexOf(DateTimeFieldType type) {\n170: for (int i = 0, isize = size(); i < isize; i++) {\n171: if (getFieldType(i) == type) {\n172: return i;\n176: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n139: dayToUse = maxDay;\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1422: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1425: super(fieldType, maxParsedDigits, signed);\n1426: iMinPrintedDigits = minPrintedDigits;\n1427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "186: protected int indexOfSupported(DateTimeFieldType type) {\n187: int index = indexOf(type);\n188: if (index == -1) {\n191: return index;\n192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
                                    "method_body": "1146: private boolean isFormatter(Object f) {\n1147: return (isPrinter(f) || isParser(f));\n1148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:canBuildFormatter()Z",
                                    "method_body": "166: public boolean canBuildFormatter() {\n167: return isFormatter(getFormatter());\n168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap",
                            "test_body": "458: public void testPlusMonths_int_negativeFromLeap() {\n459: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n460: MonthDay result = test.plusMonths(-1);\n461: MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n462: assertEquals(expected, result);\n463: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "591: public MonthDay plusMonths(int months) {\n592: return withFieldAdded(DurationFieldType.months(), months);\n593: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap",
                            "test_body": "451: public void testPlusMonths_int_fromLeap() {\n452: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n453: MonthDay result = test.plusMonths(1);\n454: MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n455: assertEquals(expected, result);\n456: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "591: public MonthDay plusMonths(int months) {\n592: return withFieldAdded(DurationFieldType.months(), months);\n593: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap",
                            "test_body": "608: public void testMinusDays_int_negativeFromLeap() {\n609: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n610: MonthDay result = test.minusDays(-1);\n611: MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n612: assertEquals(expected, result);\n613: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "297: public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n298: if (valueToAdd == 0) {\n304: DateTimeField nextField = null;\n306: while (valueToAdd > 0) {\n307: int max = getMaximumValue(instant, values);\n308: long proposed = values[fieldIndex] + valueToAdd;\n309: if (proposed <= max) {\n313: if (nextField == null) {\n314: if (fieldIndex == 0) {\n317: nextField = instant.getField(fieldIndex - 1);\n319: if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {\n323: valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add\n324: values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n325: values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero\n326: }\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "48: public static int safeNegate(int value) {\n49: if (value == Integer.MIN_VALUE) {\n52: return -value;\n53: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusDays(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "671: public MonthDay minusDays(int days) {\n672: return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n673: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap",
                            "test_body": "552: public void testMinusMonths_int_negativeFromLeap() {\n553: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n554: MonthDay result = test.minusMonths(-1);\n555: MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n556: assertEquals(expected, result);\n557: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "48: public static int safeNegate(int value) {\n49: if (value == Integer.MIN_VALUE) {\n52: return -value;\n53: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "651: public MonthDay minusMonths(int months) {\n652: return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n653: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap",
                            "test_body": "507: public void testPlusDays_int_fromLeap() {\n508: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n509: MonthDay result = test.plusDays(1);\n510: MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n511: assertEquals(expected, result);\n512: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "297: public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n298: if (valueToAdd == 0) {\n304: DateTimeField nextField = null;\n306: while (valueToAdd > 0) {\n307: int max = getMaximumValue(instant, values);\n308: long proposed = values[fieldIndex] + valueToAdd;\n309: if (proposed <= max) {\n313: if (nextField == null) {\n314: if (fieldIndex == 0) {\n317: nextField = instant.getField(fieldIndex - 1);\n319: if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {\n323: valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add\n324: values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\n325: values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero\n326: }\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusDays(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "611: public MonthDay plusDays(int days) {\n612: return withFieldAdded(DurationFieldType.days(), days);\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap",
                            "test_body": "545: public void testMinusMonths_int_fromLeap() {\n546: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n547: MonthDay result = test.minusMonths(1);\n548: MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n549: assertEquals(expected, result);\n550: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "757: public int getMinimumValue(ReadablePartial instant) {\n758: return getMinimumValue();\n759: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "48: public static int safeNegate(int value) {\n49: if (value == Integer.MIN_VALUE) {\n52: return -value;\n53: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "564: int getDaysInMonthMax() {\n565: return 31;\n566: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "425: public DateTimeFieldType getFieldType(int index) {\n426: return FIELD_TYPES[index];\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "394: public int size() {\n395: return 2;\n396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "78: public int getMaximumValue(ReadablePartial partial, int[] values) {\n79: int size = partial.size();\n80: for (int i = 0; i < size; i++) {\n81: if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n82: int month = values[i];\n83: for (int j = 0; j < size; j++) {\n84: if (partial.getFieldType(j) == DateTimeFieldType.year()) {\n89: return iChronology.getDaysInMonthMax(month);\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "218: protected int indexOfSupported(DurationFieldType type) {\n219: int index = indexOf(type);\n220: if (index == -1) {\n223: return index;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "333: public int getMinimumValue() {\n334: return MIN;\n335: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "351: public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\n352: super(new int[] {monthOfYear, dayOfMonth}, chronology);\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "407: protected DateTimeField getField(int index, Chronology chrono) {\n408: switch (index) {\n410: return chrono.monthOfYear();\n412: return chrono.dayOfMonth();\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "58: public int getMaximumValue() {\n59: return iChronology.getDaysInMonthMax();\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "651: public MonthDay minusMonths(int months) {\n652: return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n653: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "104: public DateTimeField getField(int index) {\n105: return getField(index, getChronology());\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "128: int getDaysInMonthMax(int month) {\n129: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n130: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "248: public Chronology getChronology() {\n249: return iChronology;\n250: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "338: public int getMaximumValue() {\n339: return iMax;\n340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "179: protected BasePartial(int[] values, Chronology chronology) {\n180: super();\n181: chronology = DateTimeUtils.getChronology(chronology);\n182: iChronology = chronology.withUTC();\n183: chronology.validate(this, values);\n184: iValues = values;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "236: public int[] getValues() {\n237: return (int[]) iValues.clone();\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "803: public int getMaximumValue(ReadablePartial instant) {\n804: return getMaximumValue();\n805: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "513: public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\n514: int index = indexOfSupported(fieldType);\n515: if (amount == 0) {\n518: int[] newValues = getValues();\n519: newValues = getField(index).add(this, index, newValues, amount);\n520: return new MonthDay(this, newValues);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "771: public int getMinimumValue(ReadablePartial instant, int[] values) {\n772: return getMinimumValue(instant);\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "180: public void validate(ReadablePartial partial, int[] values) {\n183: int size = partial.size();\n184: for (int i = 0; i < size; i++) {\n185: int value = values[i];\n186: DateTimeField field = partial.getField(i);\n187: if (value < field.getMinimumValue()) {\n192: if (value > field.getMaximumValue()) {\n199: for (int i = 0; i < size; i++) {\n200: int value = values[i];\n201: DateTimeField field = partial.getField(i);\n202: if (value < field.getMinimumValue(partial, values)) {\n207: if (value > field.getMaximumValue(partial, values)) {\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "215: public static void verifyValueBounds(DateTimeField field,\n217: if ((value < lowerBound) || (value > upperBound)) {\n218: throw new IllegalFieldValueException\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "333: public static final boolean isContiguous(ReadablePartial partial) {\n334: if (partial == null) {\n337: DurationFieldType lastType = null;\n338: for (int i = 0; i < partial.size(); i++) {\n339: DateTimeField loopField = partial.getField(i);\n340: if (i > 0) {\n341: if (loopField.getRangeDurationField().getType() != lastType) {\n345: lastType = loopField.getDurationField().getType();\n347: return true;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "817: public int getMaximumValue(ReadablePartial instant, int[] values) {\n818: return getMaximumValue(instant);\n819: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "292: public long set(long instant, int month) {\n293: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n295: int thisYear = iChronology.getYear(instant);\n297: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n298: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n299: if (thisDom > maxDom) {\n304: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n306: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "201: protected int indexOf(DurationFieldType type) {\n202: for (int i = 0, isize = size(); i < isize; i++) {\n203: if (getFieldType(i).getDurationType() == type) {\n204: return i;\n208: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 15,
                    "tests": [
                        {
                            "test_name": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt",
                            "test_body": "241: public void testSafeMultiplyLongInt() {\n242: assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n243: 244: assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n245: assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n246: assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n247: 248: assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n249: assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n250: assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n251: assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n252: 253: assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n254: 255: assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n256: assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n257: assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n258: 259: try {\n260: FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n261: fail();\n262: } catch (ArithmeticException e) {\n263: }\n264: 265: try {\n266: FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n267: fail();\n268: } catch (ArithmeticException e) {\n269: }\n270: 271: try {\n272: FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n273: fail();\n274: } catch (ArithmeticException e) {\n275: }\n276: 277: try {\n278: FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n279: fail();\n280: } catch (ArithmeticException e) {\n281: }\n282: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(JI)J",
                                    "method_body": "135: public static long safeMultiply(long val1, int val2) {\n136: switch (val2) {\n138: return -val1;\n140: return 0L;\n142: return val1;\n144: long total = val1 * val2;\n145: if (total / val2 != val1) {\n148: return total;\n149: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 16,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseEndYear",
                            "test_body": "887: public void testParseInto_monthOnly_baseEndYear() {\n888: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n889: MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO);\n890: assertEquals(1, f.parseInto(result, \"5\", 0));\n891: assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);\n892: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1541: return iWallOffsets[i - 1];\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseStartYear",
                            "test_body": "880: public void testParseInto_monthOnly_parseStartYear() {\n881: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n882: MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO);\n883: assertEquals(1, f.parseInto(result, \"1\", 0));\n884: assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);\n885: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1541: return iWallOffsets[i - 1];\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly",
                            "test_body": "866: public void testParseInto_monthOnly() {\n867: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n868: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n869: assertEquals(1, f.parseInto(result, \"5\", 0));\n870: assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);\n871: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1586: public long previousTransition(long instant) {\n1587: long[] transitions = iTransitions;\n1588: int i = Arrays.binarySearch(transitions, instant);\n1589: if (i >= 0) {\n1595: i = ~i;\n1596: if (i < transitions.length) {\n1605: if (iTailZone != null) {\n1606: long prev = iTailZone.previousTransition(instant);\n1607: if (prev < instant) {\n1608: return prev;\n1611: long prev = transitions[i - 1];\n1612: if (prev > Long.MIN_VALUE) {\n1613: return prev - 1;\n1616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1238: public long previousTransition(long instant) {\n1241: instant++;\n1243: int standardOffset = iStandardOffset;\n1244: Recurrence startRecurrence = iStartRecurrence;\n1245: Recurrence endRecurrence = iEndRecurrence;\n1250: start = startRecurrence.previous\n1252: if (instant < 0 && start > 0) {\n1262: }\n1265: end = endRecurrence.previous\n1267: if (instant < 0 && end > 0) {\n1277: }\n1279: return ((start > end) ? start : end) - 1;\n1280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n617: prev = chrono.year().add(prev, -1);\n618: prev = chrono.monthOfYear().set(prev, iMonthOfYear);\n619: prev = setDayOfMonthPrevious(chrono, prev);\n620: prev = setDayOfWeek(chrono, prev);\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29",
                            "test_body": "901: public void testParseInto_monthDay_feb29() {\n902: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n903: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n904: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n905: assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n906: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1586: public long previousTransition(long instant) {\n1587: long[] transitions = iTransitions;\n1588: int i = Arrays.binarySearch(transitions, instant);\n1589: if (i >= 0) {\n1595: i = ~i;\n1596: if (i < transitions.length) {\n1605: if (iTailZone != null) {\n1606: long prev = iTailZone.previousTransition(instant);\n1607: if (prev < instant) {\n1608: return prev;\n1611: long prev = transitions[i - 1];\n1612: if (prev > Long.MIN_VALUE) {\n1613: return prev - 1;\n1616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "399: private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n400: int length = pattern.length();\n401: int[] indexRef = new int[1];\n403: for (int i=0; i<length; i++) {\n404: indexRef[0] = i;\n405: String token = parseToken(pattern, indexRef);\n406: i = indexRef[0];\n408: int tokenLen = token.length();\n409: if (tokenLen == 0) {\n412: char c = token.charAt(0);\n414: switch (c) {\n479: if (tokenLen >= 3) {\n486: builder.appendMonthOfYear(tokenLen);\n488: break;\n490: builder.appendDayOfMonth(tokenLen);\n491: break;\n549: String sub = token.substring(1);\n550: if (sub.length() == 1) {\n551: builder.appendLiteral(sub.charAt(0));\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1366: public int estimatePrintedLength() {\n1367: return iMaxParsedDigits;\n1368: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1279: NumberFormatter(DateTimeFieldType fieldType,\n1281: super();\n1282: iFieldType = fieldType;\n1283: iMaxParsedDigits = maxParsedDigits;\n1284: iSigned = signed;\n1285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2687: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2688: DateTimeParser[] elements = iParsers;\n2689: if (elements == null) {\n2693: int len = elements.length;\n2694: for (int i=0; i<len && position >= 0; i++) {\n2695: position = elements[i].parseInto(bucket, text, position);\n2697: return position;\n2698: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "736: public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n737: return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "573: private static String parseToken(String pattern, int[] indexRef) {\n574: StringBuffer buf = new StringBuffer();\n576: int i = indexRef[0];\n577: int length = pattern.length();\n579: char c = pattern.charAt(i);\n580: if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n583: buf.append(c);\n585: while (i + 1 < length) {\n586: char peek = pattern.charAt(i + 1);\n587: if (peek == c) {\n596: buf.append('\\'');\n598: boolean inLiteral = false;\n600: for (; i < length; i++) {\n601: c = pattern.charAt(i);\n603: if (c == '\\'') {\n611: } else if (!inLiteral &&\n613: i--;\n614: break;\n616: buf.append(c);\n621: indexRef[0] = i;\n622: return buf.toString();\n623: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1238: public long previousTransition(long instant) {\n1241: instant++;\n1243: int standardOffset = iStandardOffset;\n1244: Recurrence startRecurrence = iStartRecurrence;\n1245: Recurrence endRecurrence = iEndRecurrence;\n1250: start = startRecurrence.previous\n1252: if (instant < 0 && start > 0) {\n1262: }\n1265: end = endRecurrence.previous\n1267: if (instant < 0 && end > 0) {\n1277: }\n1279: return ((start > end) ? start : end) - 1;\n1280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n617: prev = chrono.year().add(prev, -1);\n618: prev = chrono.monthOfYear().set(prev, iMonthOfYear);\n619: prev = setDayOfMonthPrevious(chrono, prev);\n620: prev = setDayOfWeek(chrono, prev);\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2109: public void printTo(\n2112: if (displayZone == null) {\n2115: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2116: buf.append(iZeroOffsetPrintText);\n2117: return;\n2119: if (displayOffset >= 0) {\n2120: buf.append('+');\n2126: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2127: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2128: if (iMaxFields == 1) {\n2131: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2132: if (displayOffset == 0 && iMinFields <= 1) {\n2136: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2137: if (iShowSeparators) {\n2138: buf.append(':');\n2140: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2141: if (iMaxFields == 2) {\n2144: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2145: if (displayOffset == 0 && iMinFields <= 2) {\n2146: return;\n2166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n406: return append0(new UnpaddedNumber(fieldType, maxDigits, false));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1360: protected UnpaddedNumber(DateTimeFieldType fieldType,\n1363: super(fieldType, maxParsedDigits, signed);\n1364: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1201: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1202: if (position >= text.length()) {\n1206: char a = text.charAt(position);\n1207: char b = iValue;\n1209: if (a != b) {\n1221: return position + 1;\n1222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29",
                            "test_body": "908: public void testParseInto_monthDay_withDefaultYear_feb29() {\n909: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withDefaultYear(2012);\n910: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n911: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n912: assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n913: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "689: private long setDayOfMonthPrevious(Chronology chrono, long prev) {\n691: prev = setDayOfMonth(chrono, prev);\n701: }\n702: return prev;\n703: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "1586: public long previousTransition(long instant) {\n1587: long[] transitions = iTransitions;\n1588: int i = Arrays.binarySearch(transitions, instant);\n1589: if (i >= 0) {\n1595: i = ~i;\n1596: if (i < transitions.length) {\n1605: if (iTailZone != null) {\n1606: long prev = iTailZone.previousTransition(instant);\n1607: if (prev < instant) {\n1608: return prev;\n1611: long prev = transitions[i - 1];\n1612: if (prev > Long.MIN_VALUE) {\n1613: return prev - 1;\n1616: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "767: public long previous(long instant, int standardOffset, int saveMillis) {\n768: return iOfYear.previous(instant, standardOffset, saveMillis);\n769: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2687: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2688: DateTimeParser[] elements = iParsers;\n2689: if (elements == null) {\n2693: int len = elements.length;\n2694: for (int i=0; i<len && position >= 0; i++) {\n2695: position = elements[i].parseInto(bucket, text, position);\n2697: return position;\n2698: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withDefaultYear(I)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "436: public DateTimeFormatter withDefaultYear(int defaultYear) {\n437: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n439: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "1238: public long previousTransition(long instant) {\n1241: instant++;\n1243: int standardOffset = iStandardOffset;\n1244: Recurrence startRecurrence = iStartRecurrence;\n1245: Recurrence endRecurrence = iEndRecurrence;\n1250: start = startRecurrence.previous\n1252: if (instant < 0 && start > 0) {\n1262: }\n1265: end = endRecurrence.previous\n1267: if (instant < 0 && end > 0) {\n1277: }\n1279: return ((start > end) ? start : end) - 1;\n1280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "589: public long previous(long instant, int standardOffset, int saveMillis) {\n591: if (iMode == 'w') {\n593: } else if (iMode == 's') {\n596: offset = 0;\n600: instant += offset;\n602: Chronology chrono = ISOChronology.getInstanceUTC();\n603: long prev = chrono.monthOfYear().set(instant, iMonthOfYear);\n605: prev = chrono.millisOfDay().set(prev, 0);\n606: prev = chrono.millisOfDay().add(prev, iMillisOfDay);\n607: prev = setDayOfMonthPrevious(chrono, prev);\n609: if (iDayOfWeek == 0) {\n615: prev = setDayOfWeek(chrono, prev);\n616: if (prev >= instant) {\n617: prev = chrono.year().add(prev, -1);\n618: prev = chrono.monthOfYear().set(prev, iMonthOfYear);\n619: prev = setDayOfMonthPrevious(chrono, prev);\n620: prev = setDayOfWeek(chrono, prev);\n625: return prev - offset;\n626: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2109: public void printTo(\n2112: if (displayZone == null) {\n2115: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2116: buf.append(iZeroOffsetPrintText);\n2117: return;\n2119: if (displayOffset >= 0) {\n2120: buf.append('+');\n2126: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2127: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2128: if (iMaxFields == 1) {\n2131: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2132: if (displayOffset == 0 && iMinFields <= 1) {\n2136: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2137: if (iShowSeparators) {\n2138: buf.append(':');\n2140: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2141: if (iMaxFields == 2) {\n2144: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2145: if (displayOffset == 0 && iMinFields <= 2) {\n2146: return;\n2166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1201: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1202: if (position >= text.length()) {\n1206: char a = text.charAt(position);\n1207: char b = iValue;\n1209: if (a != b) {\n1221: return position + 1;\n1222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseEndYear",
                            "test_body": "894: public void testParseInto_monthOnly_parseEndYear() {\n895: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n896: MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0,TOKYO);\n897: assertEquals(2, f.parseInto(result, \"12\", 0));\n898: assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);\n899: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1541: return iWallOffsets[i - 1];\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseStartYear",
                            "test_body": "873: public void testParseInto_monthOnly_baseStartYear() {\n874: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n875: MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);\n876: assertEquals(1, f.parseInto(result, \"5\", 0));\n877: assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);\n878: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n410: year--;\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n415: oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "510: static int compareReverse(DurationField a, DurationField b) {\n511: if (a == null || !a.isSupported()) {\n517: if (b == null || !b.isSupported()) {\n518: return 1;\n520: return -a.compareTo(b);\n521: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "481: long set(long millis, boolean reset) {\n482: if (iText == null) {\n483: millis = iField.set(millis, iValue);\n487: if (reset) {\n490: return millis;\n491: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "281: public DurationField getField(Chronology chronology) {\n282: chronology = DateTimeUtils.getChronology(chronology);\n284: switch (iOrdinal) {\n294: return chronology.months();\n298: return chronology.days();\n313: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1783: public int estimateParsedLength() {\n1784: return estimatePrintedLength();\n1785: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2098: public int estimatePrintedLength() {\n2099: int est = 1 + iMinFields << 1;\n2100: if (iShowSeparators) {\n2101: est += iMinFields - 1;\n2103: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2106: return est;\n2107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "563: public void setChronology(Chronology chronology) {\n564: super.setChronology(chronology);\n565: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "142: public Chronology withZone(DateTimeZone zone) {\n143: if (zone == null) {\n146: if (zone == getZone()) {\n147: return this;\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "923: private DateTimeParser requireParser() {\n924: DateTimeParser parser = iParser;\n925: if (parser == null) {\n928: return parser;\n929: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "316: protected void setMillis(long instant) {\n317: iMillis = checkInstant(instant, iChronology);\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "214: public static void verifyValueBounds(DateTimeField field,\n216: if ((value < lowerBound) || (value > upperBound)) {\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "201: public Locale getLocale() {\n202: return iLocale;\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "122: private DateTimeFormatter(\n127: super();\n128: iPrinter = printer;\n129: iParser = parser;\n130: iLocale = locale;\n131: iOffsetParsed = offsetParsed;\n132: iChrono = chrono;\n133: iZone = zone;\n134: iPivotYear = pivotYear;\n135: iDefaultYear = defaultYear;\n136: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "232: public static void verifyValueBounds(DateTimeFieldType fieldType,\n234: if ((value < lowerBound) || (value > upperBound)) {\n239: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1721: public int estimatePrintedLength() {\n1722: return iShort ? 6 : 20;\n1723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n901: long prev = previousTransition(instantAdjusted);\n902: if (prev < instantAdjusted) {\n903: int offsetPrev = getOffset(prev);\n904: int diff = offsetPrev - offsetLocal;\n905: if (instantAdjusted - prev <= diff) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "415: private static void sort(SavedField[] array, int high) {\n416: if (high > 10) {\n419: for (int i=0; i<high; i++) {\n420: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n421: SavedField t = array[j];\n422: array[j] = array[j-1];\n423: array[j-1] = t;\n427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "453: public void setMillis(long instant) {\n454: switch (iRoundingMode) {\n456: break;\n474: super.setMillis(instant);\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "171: public DateTimeParser getParser() {\n172: return iParser;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "458: public void printTo(StringBuffer buf, ReadableInstant instant) {\n459: long millis = DateTimeUtils.getInstantMillis(instant);\n460: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n461: printTo(buf, millis, chrono);\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "617: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n618: DateTimePrinter printer = requirePrinter();\n619: chrono = selectChronology(chrono);\n622: DateTimeZone zone = chrono.getZone();\n623: int offset = zone.getOffset(instant);\n624: long adjustedInstant = instant + offset;\n625: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n631: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n632: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2704: boolean isParser() {\n2705: return iParsers != null;\n2706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "118: public long previousTransition(long instant) {\n119: return iZone.previousTransition(instant);\n120: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1541: return iWallOffsets[i - 1];\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "938: private Chronology selectChronology(Chronology chrono) {\n939: chrono = DateTimeUtils.getChronology(chrono);\n940: if (iChrono != null) {\n943: if (iZone != null) {\n946: return chrono;\n947: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2700: boolean isPrinter() {\n2701: return iPrinters != null;\n2702: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1715: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1716: super();\n1717: iFieldType = fieldType;\n1718: iShort = isShort;\n1719: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "498: public int compareTo(SavedField obj) {\n499: DateTimeField other = obj.iField;\n500: int result = compareReverse\n502: if (result != 0) {\n503: return result;\n507: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2568: Composite(List<Object> elementPairs) {\n2569: super();\n2571: List<Object> printerList = new ArrayList<Object>();\n2572: List<Object> parserList = new ArrayList<Object>();\n2574: decompose(elementPairs, printerList, parserList);\n2576: if (printerList.size() <= 0) {\n2580: int size = printerList.size();\n2581: iPrinters = new DateTimePrinter[size];\n2582: int printEst = 0;\n2583: for (int i=0; i<size; i++) {\n2584: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2585: printEst += printer.estimatePrintedLength();\n2586: iPrinters[i] = printer;\n2588: iPrintedLengthEstimate = printEst;\n2591: if (parserList.size() <= 0) {\n2595: int size = parserList.size();\n2596: iParsers = new DateTimeParser[size];\n2597: int parseEst = 0;\n2598: for (int i=0; i<size; i++) {\n2599: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2600: parseEst += parser.estimateParsedLength();\n2601: iParsers[i] = parser;\n2603: iParsedLengthEstimate = parseEst;\n2605: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "581: public String print(ReadableInstant instant) {\n582: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n583: printTo(buf, instant);\n584: return buf.toString();\n585: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2712: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2713: int size = elementPairs.size();\n2714: for (int i=0; i<size; i+=2) {\n2715: Object element = elementPairs.get(i);\n2716: if (element instanceof DateTimePrinter) {\n2717: if (element instanceof Composite) {\n2718: addArrayToList(printerList, ((Composite)element).iPrinters);\n2720: printerList.add(element);\n2724: element = elementPairs.get(i + 1);\n2725: if (element instanceof DateTimeParser) {\n2726: if (element instanceof Composite) {\n2727: addArrayToList(parserList, ((Composite)element).iParsers);\n2729: parserList.add(element);\n2733: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2735: private void addArrayToList(List<Object> list, Object[] array) {\n2736: if (array != null) {\n2737: for (int i=0; i<array.length; i++) {\n2738: list.add(array[i]);\n2741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "970: public static DateTimeFormatter dateTimeNoMillis() {\n971: if (dtx == null) {\n977: return dtx;\n978: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2235: public int estimateParsedLength() {\n2236: return estimatePrintedLength();\n2237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "697: public int parseInto(ReadWritableInstant instant, String text, int position) {\n698: DateTimeParser parser = requireParser();\n699: if (instant == null) {\n703: long instantMillis = instant.getMillis();\n704: Chronology chrono = instant.getChronology();\n705: long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n706: chrono = selectChronology(chrono);\n708: DateTimeParserBucket bucket = new DateTimeParserBucket(\n710: int newPos = parser.parseInto(bucket, text, position);\n711: instant.setMillis(bucket.computeMillis(false, text));\n712: if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n716: } else if (bucket.getZone() != null) {\n717: chrono = chrono.withZone(bucket.getZone());\n719: instant.setChronology(chrono);\n720: if (iZone != null) {\n723: return newPos;\n724: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "1223: public String toString() {\n1224: return ISODateTimeFormat.dateTime().print(this);\n1225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "656: private DateTimePrinter requirePrinter() {\n657: DateTimePrinter printer = iPrinter;\n658: if (printer == null) {\n661: return printer;\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "343: public long computeMillis(boolean resetFields, String text) {\n344: SavedField[] savedFields = iSavedFields;\n345: int count = iSavedFieldsCount;\n346: if (iSavedFieldsShared) {\n350: sort(savedFields, count);\n351: if (count > 0) {\n353: DurationField months = DurationFieldType.months().getField(iChrono);\n354: DurationField days = DurationFieldType.days().getField(iChrono);\n355: DurationField first = savedFields[0].iField.getDurationField();\n356: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n357: saveField(DateTimeFieldType.year(), iDefaultYear);\n358: return computeMillis(resetFields, text);\n362: long millis = iMillis;\n364: for (int i = 0; i < count; i++) {\n365: millis = savedFields[i].set(millis, resetFields);\n367: if (resetFields) {\n377: }\n379: if (iOffset != null) {\n381: } else if (iZone != null) {\n382: int offset = iZone.getOffsetFromLocal(millis);\n383: millis -= offset;\n384: if (offset != iZone.getOffset(millis)) {\n394: return millis;\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "106: public DateTimeFormatter(\n108: super();\n109: iPrinter = printer;\n110: iParser = parser;\n111: iLocale = null;\n112: iOffsetParsed = false;\n113: iChrono = null;\n114: iZone = null;\n115: iPivotYear = null;\n116: iDefaultYear = 2000;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "328: protected void setChronology(Chronology chronology) {\n329: iChronology = checkChronology(chronology);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "187: public DateTimeFormatter withLocale(Locale locale) {\n188: if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n191: return new DateTimeFormatter(iPrinter, iParser, locale,\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "153: public DateTimePrinter getPrinter() {\n154: return iPrinter;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "342: public MutableDateTime(\n351: super(year, monthOfYear, dayOfMonth,\n353: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 17,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset",
                            "test_body": "1249: public void testBug3476684_adjustOffset() {\n1250: final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n1251: DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n1252: DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n1253: DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n1254: 1255: assertSame(base, base.withEarlierOffsetAtOverlap());\n1256: assertSame(base, base.withLaterOffsetAtOverlap());\n1257: 1258: assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\n1259: assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n1260: 1261: assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n1262: assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n1263: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZJ)J",
                                    "method_body": "950: public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n951: int offsetOriginal = getOffset(originalInstantUTC);\n952: long instantUTC = instantLocal - offsetOriginal;\n953: int offsetLocalFromOriginal = getOffset(instantUTC);\n954: if (offsetLocalFromOriginal == offsetOriginal) {\n955: return instantUTC;\n958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "689: protected DateTimeZone(String id) {\n690: if (id == null) {\n693: iID = id;\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "739: static Recurrence readFrom(DataInput in) throws IOException {\n740: return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n740: info = new YearInfo(year, calculateFirstDayOfYearMillis(year));\n741: iYearInfoCache[year & CACHE_MASK] = info;\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "182: static long readMillis(DataInput in) throws IOException {\n183: int v = in.readUnsignedByte();\n184: switch (v >> 6) {\n187: v = (v << (32 - 6)) >> (32 - 6);\n188: return v * (30 * 60000L);\n192: v = (v << (32 - 6)) >> (32 - 30);\n193: v |= (in.readUnsignedByte()) << 16;\n194: v |= (in.readUnsignedByte()) << 8;\n195: v |= (in.readUnsignedByte());\n196: return v * 60000L;\n200: long w = (((long)v) << (64 - 6)) >> (64 - 38);\n201: w |= (in.readUnsignedByte()) << 24;\n202: w |= (in.readUnsignedByte()) << 16;\n203: w |= (in.readUnsignedByte()) << 8;\n204: w |= (in.readUnsignedByte());\n205: return w * 1000L;\n209: return in.readLong();\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "86: private CachedDateTimeZone(DateTimeZone zone) {\n87: super(zone.getID());\n88: iZone = zone;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n147: return loadZoneData(id);\n150: if (obj instanceof SoftReference<?>) {\n152: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n153: DateTimeZone tz = ref.get();\n154: if (tz != null) {\n155: return tz;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "705: public final String getID() {\n706: return iID;\n707: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "277: public int hashCode() {\n278: return (1 << iOrdinal);\n279: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "168: protected void assemble(Fields fields) {\n169: if (getBase().getZone() == DateTimeZone.UTC) {\n180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1229: public abstract boolean equals(Object object);\n1237: return 57 + getID().hashCode();\n1238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "747: Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n748: iOfYear = ofYear;\n749: iNameKey = nameKey;\n750: iSaveMillis = saveMillis;\n751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "200: long calculateFirstDayOfYearMillis(int year) {\n202: int leapYears = year / 100;\n203: if (year < 0) {\n211: leapYears = (year >> 2) - leapYears + (leapYears >> 2);\n212: if (isLeapYear(year)) {\n213: leapYears--;\n217: return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "122: public int hashCode() {\n123: return iZone.hashCode();\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "102: public int getOffset(long instant) {\n103: return getInfo(instant).getOffset(instant);\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withLaterOffsetAtOverlap()Lorg/joda/time/DateTime;",
                                    "method_body": "684: public DateTime withLaterOffsetAtOverlap() {\n685: long newMillis = getZone().adjustOffset(getMillis(), true);\n686: return withMillis(newMillis);\n687: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "1165: static DSTZone readFrom(DataInput in, String id) throws IOException {\n1166: return new DSTZone(id, (int)readMillis(in),\n1168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "317: public long add(long instant, int value) {\n318: int offset = getOffsetToAdd(instant);\n319: instant = iField.add(instant + offset, value);\n320: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n321: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "1174: DSTZone(String id, int standardOffset,\n1176: super(id);\n1177: iStandardOffset = standardOffset;\n1178: iStartRecurrence = startRecurrence;\n1179: iEndRecurrence = endRecurrence;\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "109: public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n110: switch (in.readUnsignedByte()) {\n119: return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "343: private int getOffsetToAdd(long instant) {\n344: int offset = this.iZone.getOffset(instant);\n345: long sum = instant + offset;\n347: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n350: return offset;\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "223: private DateTimeZone loadZoneData(String id) {\n224: InputStream in = null;\n226: in = openResource(id);\n227: DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n228: iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n229: return tz;\n236: if (in != null) {\n237: in.close();\n240: }\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
                                    "method_body": "154: public int hashCode() {\n155: return (int) getUnitMillis();\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "70: public DateTimeZone getZone() {\n71: return getChronology().getZone();\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal >= 0) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:plusHours(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1097: public DateTime plusHours(int hours) {\n1098: if (hours == 0) {\n1101: long instant = getChronology().hours().add(getMillis(), hours);\n1102: return withMillis(instant);\n1103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "324: public DateTime(\n331: super(year, monthOfYear, dayOfMonth,\n333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "219: public DateTime(long instant, Chronology chronology) {\n220: super(instant, chronology);\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n204: if (id == null) {\n207: if (id.equals(\"UTC\")) {\n210: DateTimeZone zone = cProvider.getZone(id);\n211: if (zone != null) {\n212: return zone;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "616: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n617: DateTimePrinter printer = requirePrinter();\n618: chrono = selectChronology(chrono);\n621: DateTimeZone zone = chrono.getZone();\n622: int offset = zone.getOffset(instant);\n623: long adjustedInstant = instant + offset;\n624: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n630: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n631: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1574: return transitions[i];\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "121: private ISOChronology(Chronology base) {\n122: super(base, null);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "195: public int getOffset(long millis) {\n196: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n197: if (iOffset == Integer.MIN_VALUE) {\n198: iOffset = iZoneRef.getOffset(iPeriodStart);\n200: return iOffset;\n202: return iNextInfo.getOffset(millis);\n203: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1531: return iWallOffsets[i];\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1535: if (i > 0) {\n1536: return iWallOffsets[i - 1];\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "67: public static CachedDateTimeZone forZone(DateTimeZone zone) {\n68: if (zone instanceof CachedDateTimeZone) {\n71: return new CachedDateTimeZone(zone);\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "180: Info(DateTimeZone zone, long periodStart) {\n181: iPeriodStart = periodStart;\n182: iZoneRef = zone;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withEarlierOffsetAtOverlap()Lorg/joda/time/DateTime;",
                                    "method_body": "664: public DateTime withEarlierOffsetAtOverlap() {\n665: long newMillis = getZone().adjustOffset(getMillis(), false);\n666: return withMillis(newMillis);\n667: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "770: YearInfo(int year, long firstDayMillis) {\n771: iYear = year;\n772: iFirstDayMillis = firstDayMillis;\n773: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "934: private Chronology selectChronology(Chronology chrono) {\n935: chrono = DateTimeUtils.getChronology(chrono);\n936: if (iChrono != null) {\n939: if (iZone != null) {\n942: return chrono;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "94: public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n95: if (in instanceof DataInput) {\n98: return readFrom((DataInput)new DataInputStream(in), id);\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "457: public void printTo(StringBuffer buf, ReadableInstant instant) {\n458: long millis = DateTimeUtils.getInstantMillis(instant);\n459: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n460: printTo(buf, millis, chrono);\n461: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "481: static OfYear readFrom(DataInput in) throws IOException {\n482: return new OfYear((char)in.readUnsignedByte(),\n488: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2109: public void printTo(\n2112: if (displayZone == null) {\n2115: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2119: if (displayOffset >= 0) {\n2122: buf.append('-');\n2123: displayOffset = -displayOffset;\n2126: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2127: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2128: if (iMaxFields == 1) {\n2131: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2132: if (displayOffset == 0 && iMinFields <= 1) {\n2136: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2137: if (iShowSeparators) {\n2138: buf.append(':');\n2140: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2141: if (iMaxFields == 2) {\n2144: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2145: if (displayOffset == 0 && iMinFields <= 2) {\n2146: return;\n2166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "580: public String print(ReadableInstant instant) {\n581: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n582: printTo(buf, instant);\n583: return buf.toString();\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "1339: static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n1341: int poolSize = in.readUnsignedShort();\n1342: String[] pool = new String[poolSize];\n1343: for (int i=0; i<poolSize; i++) {\n1344: pool[i] = in.readUTF();\n1347: int size = in.readInt();\n1348: long[] transitions = new long[size];\n1349: int[] wallOffsets = new int[size];\n1350: int[] standardOffsets = new int[size];\n1351: String[] nameKeys = new String[size];\n1353: for (int i=0; i<size; i++) {\n1354: transitions[i] = readMillis(in);\n1355: wallOffsets[i] = (int)readMillis(in);\n1356: standardOffsets[i] = (int)readMillis(in);\n1359: if (poolSize < 256) {\n1360: index = in.readUnsignedByte();\n1364: nameKeys[i] = pool[index];\n1367: }\n1370: DSTZone tailZone = null;\n1371: if (in.readBoolean()) {\n1372: tailZone = DSTZone.readFrom(in, id);\n1375: return new PrecalculatedZone\n1377: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "194: private InputStream openResource(String name) throws IOException {\n196: if (iFileDir != null) {\n199: String path = iResourcePath.concat(name);\n200: if (iLoader != null) {\n201: in = iLoader.getResourceAsStream(path);\n205: if (in == null) {\n214: return in;\n215: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:adjustOffset(JZ)J",
                                    "method_body": "1163: public long adjustOffset(long instant, boolean earlierOrLater) {\n1167: long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n1168: long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n1169: if (instantBefore == instantAfter) {\n1174: long local = convertUTCToLocal(instant);\n1175: return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "923: public long convertUTCToLocal(long instantUTC) {\n924: int offset = getOffset(instantUTC);\n925: long instantLocal = instantUTC + offset;\n927: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n930: return instantLocal;\n931: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "1497: private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n1500: super(id);\n1501: iTransitions = transitions;\n1502: iWallOffsets = wallOffsets;\n1503: iStandardOffsets = standardOffsets;\n1504: iNameKeys = nameKeys;\n1505: iTailZone = tailZone;\n1506: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "499: OfYear(char mode,\n504: {\n505: if (mode != 'u' && mode != 'w' && mode != 's') {\n509: iMode = mode;\n510: iMonthOfYear = monthOfYear;\n511: iDayOfMonth = dayOfMonth;\n512: iDayOfWeek = dayOfWeek;\n513: iAdvance = advanceDayOfWeek;\n514: iMillisOfDay = millisOfDay;\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "655: private DateTimePrinter requirePrinter() {\n656: DateTimePrinter printer = iPrinter;\n657: if (printer == null) {\n660: return printer;\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "139: private Info getInfo(long millis) {\n140: int period = (int)(millis >> 32);\n141: Info[] cache = iInfoCache;\n142: int index = period & cInfoCacheMask;\n143: Info info = cache[index];\n144: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n145: info = createInfo(millis);\n146: cache[index] = info;\n148: return info;\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "151: private Info createInfo(long millis) {\n152: long periodStart = millis & (0xffffffffL << 32);\n153: Info info = new Info(iZone, periodStart);\n155: long end = periodStart | 0xffffffffL;\n156: Info chain = info;\n158: long next = iZone.nextTransition(periodStart);\n159: if (next == periodStart || next > end) {\n160: break;\n162: periodStart = next;\n163: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n164: }\n166: return info;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "581: public DateTime withMillis(long newMillis) {\n582: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 18,
                    "tests": [
                        {
                            "test_name": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction",
                            "test_body": "494: public void testLeapYearRulesConstruction() {\n495: // 1500 not leap in Gregorian, but is leap in Julian\n496: DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n497: assertEquals(dt.getYear(), 1500);\n498: assertEquals(dt.getMonthOfYear(), 2);\n499: assertEquals(dt.getDayOfMonth(), 29);\n500: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "255: public long getMillis() {\n256: return iMillis;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateMidnight:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "342: public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\n343: super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);\n344: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "143: public Instant toInstant() {\n144: return this;\n145: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "106: public IllegalFieldValueException(DateTimeFieldType fieldType,\n108: super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\n109: iDateTimeFieldType = fieldType;\n110: iDurationFieldType = null;\n111: iFieldName = fieldType.getName();\n112: iNumberValue = value;\n113: iStringValue = null;\n114: iLowerBound = lowerBound;\n115: iUpperBound = upperBound;\n116: iMessage = super.getMessage();\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "39: private static String createMessage(String fieldName, Number value,\n41: StringBuffer buf = new StringBuffer()\n44: if (lowerBound == null) {\n50: } else if (upperBound == null) {\n53: buf.append(\"must be in the range [\")\n59: if (explain != null) {\n63: return buf.toString();\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "705: public final String getID() {\n706: return iID;\n707: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "393: public int getMinimumDaysInFirstWeek() {\n394: return iGregorianChronology.getMinimumDaysInFirstWeek();\n395: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "377: public String getName() {\n378: return iName;\n379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "350: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n356: if ((base = getBase()) != null) {\n364: instant = iGregorianChronology.getDateTimeMillis\n367: if (instant < iCutoverMillis) {\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n233: throw new IllegalFieldValueException\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "384: public Instant getGregorianCutover() {\n385: return iCutoverInstant;\n386: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 19,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_london",
                            "test_body": "1263: public void testDateTimeCreation_london() {\n1264: DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n1265: DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);\n1266: assertEquals(\"2011-10-30T01:15:00.000+01:00\", base.toString());\n1267: assertEquals(\"2011-10-30T01:15:00.000Z\", base.plusHours(1).toString());\n1268: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal > 0) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "689: protected DateTimeZone(String id) {\n690: if (id == null) {\n693: iID = id;\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "324: public DateTime(\n331: super(year, monthOfYear, dayOfMonth,\n333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "1174: DSTZone(String id, int standardOffset,\n1176: super(id);\n1177: iStandardOffset = standardOffset;\n1178: iStartRecurrence = startRecurrence;\n1179: iEndRecurrence = endRecurrence;\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "457: public void printTo(StringBuffer buf, ReadableInstant instant) {\n458: long millis = DateTimeUtils.getInstantMillis(instant);\n459: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n460: printTo(buf, millis, chrono);\n461: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n204: if (id == null) {\n207: if (id.equals(\"UTC\")) {\n210: DateTimeZone zone = cProvider.getZone(id);\n211: if (zone != null) {\n212: return zone;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n522: return chronology.secondOfDay();\n524: return chronology.secondOfMinute();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "616: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n617: DateTimePrinter printer = requirePrinter();\n618: chrono = selectChronology(chrono);\n621: DateTimeZone zone = chrono.getZone();\n622: int offset = zone.getOffset(instant);\n623: long adjustedInstant = instant + offset;\n624: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n630: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n631: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "739: static Recurrence readFrom(DataInput in) throws IOException {\n740: return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "182: static long readMillis(DataInput in) throws IOException {\n183: int v = in.readUnsignedByte();\n184: switch (v >> 6) {\n187: v = (v << (32 - 6)) >> (32 - 6);\n188: return v * (30 * 60000L);\n192: v = (v << (32 - 6)) >> (32 - 30);\n193: v |= (in.readUnsignedByte()) << 16;\n194: v |= (in.readUnsignedByte()) << 8;\n195: v |= (in.readUnsignedByte());\n196: return v * 60000L;\n200: long w = (((long)v) << (64 - 6)) >> (64 - 38);\n201: w |= (in.readUnsignedByte()) << 24;\n202: w |= (in.readUnsignedByte()) << 16;\n203: w |= (in.readUnsignedByte()) << 8;\n204: w |= (in.readUnsignedByte());\n205: return w * 1000L;\n209: return in.readLong();\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "86: private CachedDateTimeZone(DateTimeZone zone) {\n87: super(zone.getID());\n88: iZone = zone;\n89: iInfoCache = new Info[cInfoCacheMask + 1];\n90: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1282: public boolean equals(Object obj) {\n1283: if (this == obj) {\n1286: if (obj instanceof DSTZone) {\n1287: DSTZone other = (DSTZone)obj;\n1288: return\n1295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n147: return loadZoneData(id);\n150: if (obj instanceof SoftReference<?>) {\n152: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n153: DateTimeZone tz = ref.get();\n154: if (tz != null) {\n155: return tz;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "705: public final String getID() {\n706: return iID;\n707: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "67: public static CachedDateTimeZone forZone(DateTimeZone zone) {\n68: if (zone instanceof CachedDateTimeZone) {\n71: return new CachedDateTimeZone(zone);\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1905: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1908: DateTimeField field = iFieldType.getField(chrono);\n1909: int minDigits = iMinDigits;\n1913: fraction = field.remainder(instant);\n1921: }\n1923: if (fraction == 0) {\n1924: if (buf != null) {\n1925: while (--minDigits >= 0) {\n1926: buf.append('0');\n1933: return;\n1987: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "779: public boolean equals(Object obj) {\n780: if (this == obj) {\n783: if (obj instanceof Recurrence) {\n784: Recurrence other = (Recurrence)obj;\n785: return\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "628: public boolean equals(Object obj) {\n629: if (this == obj) {\n632: if (obj instanceof OfYear) {\n633: OfYear other = (OfYear)obj;\n634: return\n643: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2607: public int estimatePrintedLength() {\n2608: return iPrintedLengthEstimate;\n2609: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1219: public abstract boolean equals(Object object);\n1227: return 57 + getID().hashCode();\n1228: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "934: private Chronology selectChronology(Chronology chrono) {\n935: chrono = DateTimeUtils.getChronology(chrono);\n936: if (iChrono != null) {\n939: if (iZone != null) {\n942: return chrono;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "747: Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n748: iOfYear = ofYear;\n749: iNameKey = nameKey;\n750: iSaveMillis = saveMillis;\n751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "94: public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n95: if (in instanceof DataInput) {\n98: return readFrom((DataInput)new DataInputStream(in), id);\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1871: public void printTo(\n1875: printTo(buf, null, instant, chrono);\n1878: }\n1879: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "134: public boolean equals(Object obj) {\n135: if (this == obj) {\n138: if (obj instanceof CachedDateTimeZone) {\n139: return iZone.equals(((CachedDateTimeZone)obj).iZone);\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2109: public void printTo(\n2112: if (displayZone == null) {\n2115: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2116: buf.append(iZeroOffsetPrintText);\n2117: return;\n2166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "481: static OfYear readFrom(DataInput in) throws IOException {\n482: return new OfYear((char)in.readUnsignedByte(),\n488: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "655: private DateTimePrinter requirePrinter() {\n656: DateTimePrinter printer = iPrinter;\n657: if (printer == null) {\n660: return printer;\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n168: break;\n170: periodStart = next;\n171: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n172: }\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "580: public String print(ReadableInstant instant) {\n581: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n582: printTo(buf, instant);\n583: return buf.toString();\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "1339: static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n1341: int poolSize = in.readUnsignedShort();\n1342: String[] pool = new String[poolSize];\n1343: for (int i=0; i<poolSize; i++) {\n1344: pool[i] = in.readUTF();\n1347: int size = in.readInt();\n1348: long[] transitions = new long[size];\n1349: int[] wallOffsets = new int[size];\n1350: int[] standardOffsets = new int[size];\n1351: String[] nameKeys = new String[size];\n1353: for (int i=0; i<size; i++) {\n1354: transitions[i] = readMillis(in);\n1355: wallOffsets[i] = (int)readMillis(in);\n1356: standardOffsets[i] = (int)readMillis(in);\n1359: if (poolSize < 256) {\n1360: index = in.readUnsignedByte();\n1364: nameKeys[i] = pool[index];\n1367: }\n1370: DSTZone tailZone = null;\n1371: if (in.readBoolean()) {\n1372: tailZone = DSTZone.readFrom(in, id);\n1375: return new PrecalculatedZone\n1377: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTime() {\n953: if (dt == null) {\n959: return dt;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "194: private InputStream openResource(String name) throws IOException {\n196: if (iFileDir != null) {\n199: String path = iResourcePath.concat(name);\n200: if (iLoader != null) {\n201: in = iLoader.getResourceAsStream(path);\n205: if (in == null) {\n214: return in;\n215: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "1165: static DSTZone readFrom(DataInput in, String id) throws IOException {\n1166: return new DSTZone(id, (int)readMillis(in),\n1168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "109: public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n110: switch (in.readUnsignedByte()) {\n119: return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "1497: private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n1500: super(id);\n1501: iTransitions = transitions;\n1502: iWallOffsets = wallOffsets;\n1503: iStandardOffsets = standardOffsets;\n1504: iNameKeys = nameKeys;\n1505: iTailZone = tailZone;\n1506: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "499: OfYear(char mode,\n504: {\n505: if (mode != 'u' && mode != 'w' && mode != 's') {\n509: iMode = mode;\n510: iMonthOfYear = monthOfYear;\n511: iDayOfMonth = dayOfMonth;\n512: iDayOfWeek = dayOfWeek;\n513: iAdvance = advanceDayOfWeek;\n514: iMillisOfDay = millisOfDay;\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "223: private DateTimeZone loadZoneData(String id) {\n224: InputStream in = null;\n226: in = openResource(id);\n227: DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n228: iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n229: return tz;\n236: if (in != null) {\n237: in.close();\n240: }\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "1618: public boolean equals(Object obj) {\n1619: if (this == obj) {\n1622: if (obj instanceof PrecalculatedZone) {\n1623: PrecalculatedZone other = (PrecalculatedZone)obj;\n1624: return\n1635: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2611: public void printTo(\n2614: DateTimePrinter[] elements = iPrinters;\n2615: if (elements == null) {\n2619: if (locale == null) {\n2621: locale = Locale.getDefault();\n2624: int len = elements.length;\n2625: for (int i = 0; i < len; i++) {\n2626: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2628: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 20,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneDawsonCreek",
                            "test_body": "255: public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson\n256: DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n257: .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n258: DateTimeFormatter f = bld.toFormatter();\n259: 260: DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n261: assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));\n262: assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));\n263: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "467: SavedField(DateTimeField field, int value) {\n468: iField = field;\n469: iValue = value;\n470: iText = null;\n471: iLocale = null;\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;",
                                    "method_body": "841: public DateTime parseDateTime(String text) {\n842: DateTimeParser parser = requireParser();\n844: Chronology chrono = selectChronology(null);\n845: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n846: int newPos = parser.parseInto(bucket, text, 0);\n847: if (newPos >= 0) {\n848: if (newPos >= text.length()) {\n866: throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n867: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2540: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2541: String str = text.substring(position);\n2542: for (String id : ALL_IDS) {\n2543: if (str.startsWith(id)) {\n2544: bucket.setZone(DateTimeZone.forID(id));\n2545: return position + id.length();\n2547: }\n2549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "689: protected DateTimeZone(String id) {\n690: if (id == null) {\n693: iID = id;\n694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "739: static Recurrence readFrom(DataInput in) throws IOException {\n740: return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:estimatePrintedLength()I",
                                    "method_body": "2512: public int estimatePrintedLength() {\n2513: return MAX_LENGTH;\n2514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "217: public static DateTimeFieldType hourOfDay() {\n218: return HOUR_OF_DAY_TYPE;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "117: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n119: super();\n120: chrono = DateTimeUtils.getChronology(chrono);\n121: iMillis = instantLocal;\n122: iZone = chrono.getZone();\n123: iChrono = chrono.withUTC();\n124: iLocale = (locale == null ? Locale.getDefault() : locale);\n125: iPivotYear = pivotYear;\n126: iDefaultYear = defaultYear;\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "631: private static boolean isNumericToken(String token) {\n632: int tokenLen = token.length();\n633: if (tokenLen > 0) {\n634: char c = token.charAt(0);\n635: switch (c) {\n662: return false;\n663: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "86: private CachedDateTimeZone(DateTimeZone zone) {\n87: super(zone.getID());\n88: iZone = zone;\n89: iInfoCache = new Info[cInfoCacheMask + 1];\n90: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n147: return loadZoneData(id);\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "705: public final String getID() {\n706: return iID;\n707: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2601: public int estimatePrintedLength() {\n2602: return iPrintedLengthEstimate;\n2603: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendTimeZoneId()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "1029: public DateTimeFormatterBuilder appendTimeZoneId() {\n1030: return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);\n1031: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "168: protected void assemble(Fields fields) {\n169: if (getBase().getZone() == DateTimeZone.UTC) {\n180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "181: public static DateTimeFieldType secondOfMinute() {\n182: return SECOND_OF_MINUTE_TYPE;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1219: public abstract boolean equals(Object object);\n1227: return 57 + getID().hashCode();\n1228: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "158: public void setZone(DateTimeZone zone) {\n159: iSavedState = null;\n160: iZone = zone;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "655: private DateTimePrinter requirePrinter() {\n656: DateTimePrinter printer = iPrinter;\n657: if (printer == null) {\n660: return printer;\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "919: private DateTimeParser requireParser() {\n920: DateTimeParser parser = iParser;\n921: if (parser == null) {\n924: return parser;\n925: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "1165: static DSTZone readFrom(DataInput in, String id) throws IOException {\n1166: return new DSTZone(id, (int)readMillis(in),\n1168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "1174: DSTZone(String id, int standardOffset,\n1176: super(id);\n1177: iStandardOffset = standardOffset;\n1178: iStartRecurrence = startRecurrence;\n1179: iEndRecurrence = endRecurrence;\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "109: public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n110: switch (in.readUnsignedByte()) {\n119: return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1197: public int estimateParsedLength() {\n1198: return 1;\n1199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1422: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1425: super(fieldType, maxParsedDigits, signed);\n1426: iMinPrintedDigits = minPrintedDigits;\n1427: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "399: private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n400: int length = pattern.length();\n401: int[] indexRef = new int[1];\n403: for (int i=0; i<length; i++) {\n404: indexRef[0] = i;\n405: String token = parseToken(pattern, indexRef);\n406: i = indexRef[0];\n408: int tokenLen = token.length();\n409: if (tokenLen == 0) {\n412: char c = token.charAt(0);\n414: switch (c) {\n424: if (tokenLen == 2) {\n453: int maxDigits = 9;\n456: if (i + 1 < length) {\n457: indexRef[0]++;\n458: if (isNumericToken(parseToken(pattern, indexRef))) {\n462: indexRef[0]--;\n465: switch (c) {\n470: builder.appendYear(tokenLen, maxDigits);\n471: break;\n477: break;\n479: if (tokenLen >= 3) {\n486: builder.appendMonthOfYear(tokenLen);\n488: break;\n490: builder.appendDayOfMonth(tokenLen);\n491: break;\n499: builder.appendHourOfDay(tokenLen);\n500: break;\n508: builder.appendMinuteOfHour(tokenLen);\n509: break;\n549: String sub = token.substring(1);\n550: if (sub.length() == 1) {\n551: builder.appendLiteral(sub.charAt(0));\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "223: private DateTimeZone loadZoneData(String id) {\n224: InputStream in = null;\n226: in = openResource(id);\n227: DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n228: iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n229: return tz;\n236: if (in != null) {\n237: in.close();\n240: }\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
                                    "method_body": "356: static String createErrorMessage(final String text, final int errorPos) {\n357: int sampleLen = errorPos + 32;\n359: if (text.length() <= sampleLen + 3) {\n360: sampleText = text;\n365: if (errorPos <= 0) {\n369: if (errorPos >= text.length()) {\n373: return \"Invalid format: \\\"\" + sampleText + \"\\\" is malformed at \\\"\" +\n375: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1433: public void printTo(\n1437: DateTimeField field = iFieldType.getField(chrono);\n1438: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1441: }\n1442: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2605: public void printTo(\n2608: DateTimePrinter[] elements = iPrinters;\n2609: if (elements == null) {\n2613: if (locale == null) {\n2615: locale = Locale.getDefault();\n2618: int len = elements.length;\n2619: for (int i = 0; i < len; i++) {\n2620: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2622: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "880: public int getOffsetFromLocal(long instantLocal) {\n882: final int offsetLocal = getOffset(instantLocal);\n884: final long instantAdjusted = instantLocal - offsetLocal;\n885: final int offsetAdjusted = getOffset(instantAdjusted);\n887: if (offsetLocal != offsetAdjusted) {\n900: } else if (offsetLocal > 0) {\n910: return offsetAdjusted;\n911: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "399: public DateTime(\n407: super(year, monthOfYear, dayOfMonth,\n409: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1291: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1292: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1294: boolean negative = false;\n1295: int length = 0;\n1296: while (length < limit) {\n1297: char c = text.charAt(position + length);\n1298: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1318: if (c < '0' || c > '9') {\n1321: length++;\n1322: }\n1324: if (length == 0) {\n1329: if (length >= 9) {\n1334: int i = position;\n1335: if (negative) {\n1339: value = text.charAt(i++) - '0';\n1342: }\n1343: position += length;\n1344: while (i < position) {\n1345: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1347: if (negative) {\n1352: bucket.saveField(iFieldType, value);\n1353: return position;\n1354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "1093: public DateTimeFormatterBuilder appendPattern(String pattern) {\n1094: DateTimeFormat.appendPatternTo(this, pattern);\n1095: return this;\n1096: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "446: public DateTimeFormatterBuilder appendSignedDecimal(\n448: if (fieldType == null) {\n451: if (maxDigits < minDigits) {\n454: if (minDigits < 0 || maxDigits <= 0) {\n457: if (minDigits <= 1) {\n460: return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n204: if (id == null) {\n207: if (id.equals(\"UTC\")) {\n210: DateTimeZone zone = cProvider.getZone(id);\n211: if (zone != null) {\n212: return zone;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n516: return chronology.hourOfDay();\n520: return chronology.minuteOfHour();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "616: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n617: DateTimePrinter printer = requirePrinter();\n618: chrono = selectChronology(chrono);\n621: DateTimeZone zone = chrono.getZone();\n622: int offset = zone.getOffset(instant);\n623: long adjustedInstant = instant + offset;\n624: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n630: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n631: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:appendPatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "376: static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {\n377: parsePatternTo(builder, pattern);\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1279: NumberFormatter(DateTimeFieldType fieldType,\n1281: super();\n1282: iFieldType = fieldType;\n1283: iMaxParsedDigits = maxParsedDigits;\n1284: iSigned = signed;\n1285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendYear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "790: public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {\n791: return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);\n792: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1577: return instant;\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2698: boolean isParser() {\n2699: return iParsers != null;\n2700: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "121: private ISOChronology(Chronology base) {\n122: super(base, null);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2681: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2682: DateTimeParser[] elements = iParsers;\n2683: if (elements == null) {\n2687: int len = elements.length;\n2688: for (int i=0; i<len && position >= 0; i++) {\n2689: position = elements[i].parseInto(bucket, text, position);\n2691: return position;\n2692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "245: public void saveField(DateTimeFieldType fieldType, int value) {\n246: saveField(new SavedField(fieldType.getField(iChrono), value));\n247: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1541: return iWallOffsets[i - 1];\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1287: public int estimateParsedLength() {\n1288: return iMaxParsedDigits;\n1289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "736: public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\n737: return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n738: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "573: private static String parseToken(String pattern, int[] indexRef) {\n574: StringBuffer buf = new StringBuffer();\n576: int i = indexRef[0];\n577: int length = pattern.length();\n579: char c = pattern.charAt(i);\n580: if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n583: buf.append(c);\n585: while (i + 1 < length) {\n586: char peek = pattern.charAt(i + 1);\n587: if (peek == c) {\n588: buf.append(c);\n589: i++;\n593: }\n596: buf.append('\\'');\n598: boolean inLiteral = false;\n600: for (; i < length; i++) {\n601: c = pattern.charAt(i);\n603: if (c == '\\'') {\n611: } else if (!inLiteral &&\n613: i--;\n614: break;\n616: buf.append(c);\n621: indexRef[0] = i;\n622: return buf.toString();\n623: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendHourOfDay(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "686: public DateTimeFormatterBuilder appendHourOfDay(int minDigits) {\n687: return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);\n688: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "747: Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n748: iOfYear = ofYear;\n749: iNameKey = nameKey;\n750: iSaveMillis = saveMillis;\n751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "934: private Chronology selectChronology(Chronology chrono) {\n935: chrono = DateTimeUtils.getChronology(chrono);\n936: if (iChrono != null) {\n939: if (iZone != null) {\n942: return chrono;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2694: boolean isPrinter() {\n2695: return iPrinters != null;\n2696: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "94: public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n95: if (in instanceof DataInput) {\n98: return readFrom((DataInput)new DataInputStream(in), id);\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "260: private void saveField(SavedField field) {\n261: SavedField[] savedFields = iSavedFields;\n262: int savedFieldsCount = iSavedFieldsCount;\n264: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n273: iSavedState = null;\n274: savedFields[savedFieldsCount] = field;\n275: iSavedFieldsCount = savedFieldsCount + 1;\n276: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "457: public void printTo(StringBuffer buf, ReadableInstant instant) {\n458: long millis = DateTimeUtils.getInstantMillis(instant);\n459: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n460: printTo(buf, millis, chrono);\n461: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "481: static OfYear readFrom(DataInput in) throws IOException {\n482: return new OfYear((char)in.readUnsignedByte(),\n488: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1173: public int estimatePrintedLength() {\n1174: return 1;\n1175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n408: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "163: public static DateTimeFieldType millisOfSecond() {\n164: return MILLIS_OF_SECOND_TYPE;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2562: Composite(List<Object> elementPairs) {\n2563: super();\n2565: List<Object> printerList = new ArrayList<Object>();\n2566: List<Object> parserList = new ArrayList<Object>();\n2568: decompose(elementPairs, printerList, parserList);\n2570: if (printerList.size() <= 0) {\n2574: int size = printerList.size();\n2575: iPrinters = new DateTimePrinter[size];\n2576: int printEst = 0;\n2577: for (int i=0; i<size; i++) {\n2578: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2579: printEst += printer.estimatePrintedLength();\n2580: iPrinters[i] = printer;\n2582: iPrintedLengthEstimate = printEst;\n2585: if (parserList.size() <= 0) {\n2589: int size = parserList.size();\n2590: iParsers = new DateTimeParser[size];\n2591: int parseEst = 0;\n2592: for (int i=0; i<size; i++) {\n2593: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2594: parseEst += parser.estimateParsedLength();\n2595: iParsers[i] = parser;\n2597: iParsedLengthEstimate = parseEst;\n2599: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
                                    "method_body": "154: public int hashCode() {\n155: return (int) getUnitMillis();\n156: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1126: private boolean isPrinter(Object f) {\n1127: if (f instanceof DateTimePrinter) {\n1128: if (f instanceof Composite) {\n1129: return ((Composite)f).isPrinter();\n1134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "1339: static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n1341: int poolSize = in.readUnsignedShort();\n1342: String[] pool = new String[poolSize];\n1343: for (int i=0; i<poolSize; i++) {\n1344: pool[i] = in.readUTF();\n1347: int size = in.readInt();\n1348: long[] transitions = new long[size];\n1349: int[] wallOffsets = new int[size];\n1350: int[] standardOffsets = new int[size];\n1351: String[] nameKeys = new String[size];\n1353: for (int i=0; i<size; i++) {\n1354: transitions[i] = readMillis(in);\n1355: wallOffsets[i] = (int)readMillis(in);\n1356: standardOffsets[i] = (int)readMillis(in);\n1359: if (poolSize < 256) {\n1360: index = in.readUnsignedByte();\n1364: nameKeys[i] = pool[index];\n1367: }\n1370: DSTZone tailZone = null;\n1371: if (in.readBoolean()) {\n1372: tailZone = DSTZone.readFrom(in, id);\n1375: return new PrecalculatedZone\n1377: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "194: private InputStream openResource(String name) throws IOException {\n196: if (iFileDir != null) {\n199: String path = iResourcePath.concat(name);\n200: if (iLoader != null) {\n201: in = iLoader.getResourceAsStream(path);\n205: if (in == null) {\n214: return in;\n215: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2516: public void printTo(\n2519: buf.append(displayZone != null ? displayZone.getID() : \"\");\n2520: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2706: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2707: int size = elementPairs.size();\n2708: for (int i=0; i<size; i+=2) {\n2709: Object element = elementPairs.get(i);\n2710: if (element instanceof DateTimePrinter) {\n2711: if (element instanceof Composite) {\n2714: printerList.add(element);\n2718: element = elementPairs.get(i + 1);\n2719: if (element instanceof DateTimeParser) {\n2720: if (element instanceof Composite) {\n2723: parserList.add(element);\n2727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "1497: private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n1500: super(id);\n1501: iTransitions = transitions;\n1502: iWallOffsets = wallOffsets;\n1503: iStandardOffsets = standardOffsets;\n1504: iNameKeys = nameKeys;\n1505: iTailZone = tailZone;\n1506: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "199: public static DateTimeFieldType minuteOfHour() {\n200: return MINUTE_OF_HOUR_TYPE;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "182: static long readMillis(DataInput in) throws IOException {\n183: int v = in.readUnsignedByte();\n184: switch (v >> 6) {\n187: v = (v << (32 - 6)) >> (32 - 6);\n188: return v * (30 * 60000L);\n192: v = (v << (32 - 6)) >> (32 - 30);\n193: v |= (in.readUnsignedByte()) << 16;\n194: v |= (in.readUnsignedByte()) << 8;\n195: v |= (in.readUnsignedByte());\n196: return v * 60000L;\n200: long w = (((long)v) << (64 - 6)) >> (64 - 38);\n201: w |= (in.readUnsignedByte()) << 24;\n202: w |= (in.readUnsignedByte()) << 16;\n203: w |= (in.readUnsignedByte()) << 8;\n204: w |= (in.readUnsignedByte());\n205: return w * 1000L;\n209: return in.readLong();\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1429: public int estimatePrintedLength() {\n1430: return iMaxParsedDigits;\n1431: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "499: OfYear(char mode,\n504: {\n505: if (mode != 'u' && mode != 'w' && mode != 's') {\n509: iMode = mode;\n510: iMonthOfYear = monthOfYear;\n511: iDayOfMonth = dayOfMonth;\n512: iDayOfWeek = dayOfWeek;\n513: iAdvance = advanceDayOfWeek;\n514: iMillisOfDay = millisOfDay;\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMinuteOfHour(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "666: public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits) {\n667: return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);\n668: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1177: public void printTo(\n1180: buf.append(iValue);\n1181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1136: private boolean isParser(Object f) {\n1137: if (f instanceof DateTimeParser) {\n1138: if (f instanceof Composite) {\n1139: return ((Composite)f).isParser();\n1144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1201: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1202: if (position >= text.length()) {\n1206: char a = text.charAt(position);\n1207: char b = iValue;\n1209: if (a != b) {\n1221: return position + 1;\n1222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "67: public static CachedDateTimeZone forZone(DateTimeZone zone) {\n68: if (zone instanceof CachedDateTimeZone) {\n71: return new CachedDateTimeZone(zone);\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:estimateParsedLength()I",
                                    "method_body": "2536: public int estimateParsedLength() {\n2537: return MAX_LENGTH;\n2538: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "580: public String print(ReadableInstant instant) {\n581: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n582: printTo(buf, instant);\n583: return buf.toString();\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1099: private Object getFormatter() {\n1100: Object f = iFormatter;\n1102: if (f == null) {\n1103: if (iElementPairs.size() == 2) {\n1116: if (f == null) {\n1117: f = new Composite(iElementPairs);\n1120: iFormatter = f;\n1123: return f;\n1124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1168: CharacterLiteral(char value) {\n1169: super();\n1170: iValue = value;\n1171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 22,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone",
                            "test_body": "174: public void testConstructor_long_fixedZone() throws Throwable {\n175: DateTimeZone zone = DateTimeZone.getDefault();\n176: try {\n177: DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n178: long length =\n179: (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n180: 5L * DateTimeConstants.MILLIS_PER_HOUR +\n181: 6L * DateTimeConstants.MILLIS_PER_MINUTE +\n182: 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n183: Period test = new Period(length);\n184: assertEquals(PeriodType.standard(), test.getPeriodType());\n185: // only time fields are precise in AllType\n186: assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n187: assertEquals(0, test.getMonths());\n188: assertEquals(0, test.getWeeks());\n189: assertEquals(0, test.getDays());\n190: assertEquals((450 * 24) + 5, test.getHours());\n191: assertEquals(6, test.getMinutes());\n192: assertEquals(7, test.getSeconds());\n193: assertEquals(8, test.getMillis());\n194: } finally {\n195: DateTimeZone.setDefault(zone);\n196: }\n197: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "627: public DurationFieldType getFieldType(int index) {\n628: return iTypes[index];\n629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "712: public int getMonths() {\n713: return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "238: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n239: super();\n240: type = checkPeriodType(type);\n241: chrono = DateTimeUtils.getChronology(chrono);\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "56: public int getOffsetFromLocal(long instantLocal) {\n57: return iWallOffset;\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n274: return chronology.years();\n276: return chronology.months();\n278: return chronology.weeks();\n280: return chronology.days();\n284: return chronology.hours();\n286: return chronology.minutes();\n288: return chronology.seconds();\n290: return chronology.millis();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
                                    "method_body": "329: public int getDifference(long minuendInstant, long subtrahendInstant) {\n330: int offset = getOffsetToAdd(subtrahendInstant);\n331: return iField.getDifference\n334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(J)V",
                                    "method_body": "381: public Period(long duration) {\n382: super(duration);\n383: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "118: public static int safeMultiply(int val1, int val2) {\n119: long total = (long) val1 * (long) val2;\n120: if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n124: return (int) total;\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "140: public int getDifference(long minuendInstant, long subtrahendInstant) {\n141: return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "630: private static String printOffset(int offset) {\n631: StringBuffer buf = new StringBuffer();\n632: if (offset >= 0) {\n633: buf.append('+');\n639: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n640: FormatUtils.appendPaddedInteger(buf, hours, 2);\n641: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n643: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n644: buf.append(':');\n645: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n646: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n647: if (offset == 0) {\n648: return buf.toString();\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "275: public int[] get(ReadablePeriod period, long duration) {\n276: int size = period.size();\n277: int[] values = new int[size];\n278: if (duration != 0) {\n279: long current = 0;\n280: for (int i = 0; i < size; i++) {\n281: DurationField field = period.getFieldType(i).getField(this);\n282: if (field.isPrecise()) {\n283: int value = field.getDifference(duration, current);\n284: current = field.add(current, value);\n285: values[i] = value;\n289: return values;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n352: if (iFixedOffsetCache == null) {\n356: Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);\n357: if (ref != null) {\n358: zone = ref.get();\n359: if (zone != null) {\n360: return zone;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHours(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "236: public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {\n237: return forOffsetHoursMinutes(hoursOffset, 0);\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "317: public long add(long instant, int value) {\n318: int offset = getOffsetToAdd(instant);\n319: instant = iField.add(instant + offset, value);\n320: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n321: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getDifference(JJ)I",
                                    "method_body": "124: public int getDifference(long minuendInstant, long subtrahendInstant) {\n125: return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "343: private int getOffsetToAdd(long instant) {\n344: int offset = this.iZone.getOffset(instant);\n345: long sum = instant + offset;\n347: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n350: return offset;\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:isPrecise()Z",
                                    "method_body": "293: public boolean isPrecise() {\n294: return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "353: private int getOffsetFromLocalToSubtract(long instant) {\n354: int offset = this.iZone.getOffsetFromLocal(instant);\n355: long diff = instant - offset;\n357: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n360: return offset;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "703: public int getYears() {\n704: return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n705: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "48: public int getOffset(long instant) {\n49: return iWallOffset;\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "253: public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n254: if (hoursOffset == 0 && minutesOffset == 0) {\n257: if (minutesOffset < 0 || minutesOffset > 59) {\n260: int offset = 0;\n262: int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n263: if (hoursInMinutes < 0) {\n266: minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n268: offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n271: }\n272: return forOffsetMillis(offset);\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "285: public static final PeriodType getPeriodType(PeriodType type) {\n286: if (type == null) {\n287: return PeriodType.standard();\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "721: public int getWeeks() {\n722: return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "155: public boolean isPrecise() {\n156: return false;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:isFixed()Z",
                                    "method_body": "60: public boolean isFixed() {\n61: return true;\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "99: public static long safeSubtract(long val1, long val2) {\n100: long diff = val1 - val2;\n102: if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n106: return diff;\n107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "183: public static int safeToInt(long value) {\n184: if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n185: return (int) value;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "834: public boolean equals(Object obj) {\n835: if (this == obj) {\n836: return true;\n843: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "673: int getIndexedField(ReadablePeriod period, int index) {\n674: int realIndex = iIndices[index];\n675: return (realIndex == -1 ? 0 : period.getValue(realIndex));\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "113: public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n114: long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n115: return difference / iUnitMillis;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDuration_Basics.testToPeriod_fixedZone",
                            "test_body": "470: public void testToPeriod_fixedZone() throws Throwable {\n471: DateTimeZone zone = DateTimeZone.getDefault();\n472: try {\n473: DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n474: long length =\n475: (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n476: 5L * DateTimeConstants.MILLIS_PER_HOUR +\n477: 6L * DateTimeConstants.MILLIS_PER_MINUTE +\n478: 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n479: Duration dur = new Duration(length);\n480: Period test = dur.toPeriod();\n481: assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n482: assertEquals(0, test.getMonths());\n483: assertEquals(0, test.getWeeks());\n484: assertEquals(0, test.getDays());\n485: assertEquals((450 * 24) + 5, test.getHours());\n486: assertEquals(6, test.getMinutes());\n487: assertEquals(7, test.getSeconds());\n488: assertEquals(8, test.getMillis());\n489: } finally {\n490: DateTimeZone.setDefault(zone);\n491: }\n492: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "627: public DurationFieldType getFieldType(int index) {\n628: return iTypes[index];\n629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "712: public int getMonths() {\n713: return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "238: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n239: super();\n240: type = checkPeriodType(type);\n241: chrono = DateTimeUtils.getChronology(chrono);\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "56: public int getOffsetFromLocal(long instantLocal) {\n57: return iWallOffset;\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n274: return chronology.years();\n276: return chronology.months();\n278: return chronology.weeks();\n280: return chronology.days();\n284: return chronology.hours();\n286: return chronology.minutes();\n288: return chronology.seconds();\n290: return chronology.millis();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
                                    "method_body": "329: public int getDifference(long minuendInstant, long subtrahendInstant) {\n330: int offset = getOffsetToAdd(subtrahendInstant);\n331: return iField.getDifference\n334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDuration:<init>()V",
                                    "method_body": "43: protected AbstractDuration() {\n44: super();\n45: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(J)V",
                                    "method_body": "381: public Period(long duration) {\n382: super(duration);\n383: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "118: public static int safeMultiply(int val1, int val2) {\n119: long total = (long) val1 * (long) val2;\n120: if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n124: return (int) total;\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "140: public int getDifference(long minuendInstant, long subtrahendInstant) {\n141: return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDuration:getMillis()J",
                                    "method_body": "114: public long getMillis() {\n115: return iMillis;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "630: private static String printOffset(int offset) {\n631: StringBuffer buf = new StringBuffer();\n632: if (offset >= 0) {\n633: buf.append('+');\n639: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n640: FormatUtils.appendPaddedInteger(buf, hours, 2);\n641: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n643: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n644: buf.append(':');\n645: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n646: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n647: if (offset == 0) {\n648: return buf.toString();\n662: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "275: public int[] get(ReadablePeriod period, long duration) {\n276: int size = period.size();\n277: int[] values = new int[size];\n278: if (duration != 0) {\n279: long current = 0;\n280: for (int i = 0; i < size; i++) {\n281: DurationField field = period.getFieldType(i).getField(this);\n282: if (field.isPrecise()) {\n283: int value = field.getDifference(duration, current);\n284: current = field.add(current, value);\n285: values[i] = value;\n289: return values;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n352: if (iFixedOffsetCache == null) {\n356: Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);\n357: if (ref != null) {\n358: zone = ref.get();\n359: if (zone != null) {\n360: return zone;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHours(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "236: public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {\n237: return forOffsetHoursMinutes(hoursOffset, 0);\n238: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "317: public long add(long instant, int value) {\n318: int offset = getOffsetToAdd(instant);\n319: instant = iField.add(instant + offset, value);\n320: return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n321: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getDifference(JJ)I",
                                    "method_body": "124: public int getDifference(long minuendInstant, long subtrahendInstant) {\n125: return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "343: private int getOffsetToAdd(long instant) {\n344: int offset = this.iZone.getOffset(instant);\n345: long sum = instant + offset;\n347: if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n350: return offset;\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:isPrecise()Z",
                                    "method_body": "293: public boolean isPrecise() {\n294: return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "353: private int getOffsetFromLocalToSubtract(long instant) {\n354: int offset = this.iZone.getOffsetFromLocal(instant);\n355: long diff = instant - offset;\n357: if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n360: return offset;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "703: public int getYears() {\n704: return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n705: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "48: public int getOffset(long instant) {\n49: return iWallOffset;\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "253: public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n254: if (hoursOffset == 0 && minutesOffset == 0) {\n257: if (minutesOffset < 0 || minutesOffset > 59) {\n260: int offset = 0;\n262: int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n263: if (hoursInMinutes < 0) {\n266: minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n268: offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n271: }\n272: return forOffsetMillis(offset);\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "285: public static final PeriodType getPeriodType(PeriodType type) {\n286: if (type == null) {\n287: return PeriodType.standard();\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "721: public int getWeeks() {\n722: return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n723: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "155: public boolean isPrecise() {\n156: return false;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDuration:<init>(J)V",
                                    "method_body": "60: protected BaseDuration(long duration) {\n61: super();\n62: iMillis = duration;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:isFixed()Z",
                                    "method_body": "60: public boolean isFixed() {\n61: return true;\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "99: public static long safeSubtract(long val1, long val2) {\n100: long diff = val1 - val2;\n102: if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n106: return diff;\n107: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "183: public static int safeToInt(long value) {\n184: if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n185: return (int) value;\n188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDuration:toPeriod()Lorg/joda/time/Period;",
                                    "method_body": "79: public Period toPeriod() {\n80: return new Period(getMillis());\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "44: protected AbstractPeriod() {\n45: super();\n46: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Duration:<init>(J)V",
                                    "method_body": "175: public Duration(long duration) {\n176: super(duration);\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "673: int getIndexedField(ReadablePeriod period, int index) {\n674: int realIndex = iIndices[index];\n675: return (realIndex == -1 ? 0 : period.getValue(realIndex));\n676: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "113: public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n114: long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n115: return difference / iUnitMillis;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 23,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForID_String_old",
                            "test_body": "243: public void testForID_String_old() {\n244: Map<String, String> map = new LinkedHashMap<String, String>();\n245: map.put(\"GMT\", \"UTC\");\n246: map.put(\"WET\", \"WET\");\n247: map.put(\"CET\", \"CET\");\n248: map.put(\"MET\", \"CET\");\n249: map.put(\"ECT\", \"CET\");\n250: map.put(\"EET\", \"EET\");\n251: map.put(\"MIT\", \"Pacific/Apia\");\n252: map.put(\"HST\", \"Pacific/Honolulu\");\n253: map.put(\"AST\", \"America/Anchorage\");\n254: map.put(\"PST\", \"America/Los_Angeles\");\n255: map.put(\"MST\", \"America/Denver\");\n256: map.put(\"PNT\", \"America/Phoenix\");\n257: map.put(\"CST\", \"America/Chicago\");\n258: map.put(\"EST\", \"America/New_York\");\n259: map.put(\"IET\", \"America/Indiana/Indianapolis\");\n260: map.put(\"PRT\", \"America/Puerto_Rico\");\n261: map.put(\"CNT\", \"America/St_Johns\");\n262: map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n263: map.put(\"BET\", \"America/Sao_Paulo\");\n264: map.put(\"ART\", \"Africa/Cairo\");\n265: map.put(\"CAT\", \"Africa/Harare\");\n266: map.put(\"EAT\", \"Africa/Addis_Ababa\");\n267: map.put(\"NET\", \"Asia/Yerevan\");\n268: map.put(\"PLT\", \"Asia/Karachi\");\n269: map.put(\"IST\", \"Asia/Kolkata\");\n270: map.put(\"BST\", \"Asia/Dhaka\");\n271: map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n272: map.put(\"CTT\", \"Asia/Shanghai\");\n273: map.put(\"JST\", \"Asia/Tokyo\");\n274: map.put(\"ACT\", \"Australia/Darwin\");\n275: map.put(\"AET\", \"Australia/Sydney\");\n276: map.put(\"SST\", \"Pacific/Guadalcanal\");\n277: map.put(\"NST\", \"Pacific/Auckland\");\n278: for (String key : map.keySet()) {\n279: String value = map.get(key);\n280: TimeZone juZone = TimeZone.getTimeZone(key);\n281: DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n282: assertEquals(value, zone.getID());\n283: //            System.out.println(juZone);\n284: //            System.out.println(juZone.getDisplayName());\n285: //            System.out.println(zone);\n286: //            System.out.println(\"------\");\n287: }\n288: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n150: if (obj instanceof SoftReference<?>) {\n152: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n153: DateTimeZone tz = ref.get();\n154: if (tz != null) {\n155: return tz;\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "558: private static synchronized String getConvertedId(String id) {\n559: Map<String, String> map = cZoneIdConversion;\n560: if (map == null) {\n597: return map.get(id);\n598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "301: public static DateTimeZone forTimeZone(TimeZone zone) {\n302: if (zone == null) {\n305: final String id = zone.getID();\n306: if (id.equals(\"UTC\")) {\n311: DateTimeZone dtz = null;\n312: String convId = getConvertedId(id);\n313: if (convId != null) {\n314: dtz = cProvider.getZone(convId);\n316: if (dtz == null) {\n319: if (dtz != null) {\n320: return dtz;\n338: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 24,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016",
                            "test_body": "487: public void testParseLocalDate_year_month_week_2016() {\n488: Chronology chrono = GJChronology.getInstanceUTC();\n489: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n490: assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(\"2016-01-01\"));\n491: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010",
                            "test_body": "425: public void testParseLocalDate_weekyear_month_week_2010() {\n426: Chronology chrono = GJChronology.getInstanceUTC();\n427: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n428: assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n429: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekyear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "768: public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits) {\n769: return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);\n770: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "631: private static boolean isNumericToken(String token) {\n632: int tokenLen = token.length();\n633: if (tokenLen > 0) {\n634: char c = token.charAt(0);\n635: switch (c) {\n662: return false;\n663: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekOfWeekyear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "756: public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {\n757: return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);\n758: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "492: int getWeekyear(long instant) {\n493: int year = getYear(instant);\n494: int week = getWeekOfWeekyear(instant, year);\n495: if (week == 1) {\n496: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n497: } else if (week > 51) {\n498: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n502: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "231: public long roundFloor(long instant) {\n234: instant = iChronology.weekOfWeekyear().roundFloor(instant);\n235: int wow = iChronology.getWeekOfWeekyear(instant);\n236: if (wow > 1) {\n239: return instant;\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "515: int getWeekOfWeekyear(long instant, int year) {\n516: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n517: if (instant < firstWeekMillis1) {\n518: return getWeeksInYear(year - 1);\n520: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n521: if (instant >= firstWeekMillis2) {\n524: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n525: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "290: public static DateTimeFieldType weekOfWeekyear() {\n291: return WEEK_OF_WEEKYEAR_TYPE;\n292: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n180: workInstant += DateTimeConstants.MILLIS_PER_WEEK;\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n408: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1393: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1396: super(fieldType, maxParsedDigits, signed);\n1397: iMinPrintedDigits = minPrintedDigits;\n1398: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "399: private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n400: int length = pattern.length();\n401: int[] indexRef = new int[1];\n403: for (int i=0; i<length; i++) {\n404: indexRef[0] = i;\n405: String token = parseToken(pattern, indexRef);\n406: i = indexRef[0];\n408: int tokenLen = token.length();\n409: if (tokenLen == 0) {\n412: char c = token.charAt(0);\n414: switch (c) {\n424: if (tokenLen == 2) {\n453: int maxDigits = 9;\n456: if (i + 1 < length) {\n457: indexRef[0]++;\n458: if (isNumericToken(parseToken(pattern, indexRef))) {\n462: indexRef[0]--;\n465: switch (c) {\n467: builder.appendWeekyear(tokenLen, maxDigits);\n468: break;\n470: builder.appendYear(tokenLen, maxDigits);\n471: break;\n477: break;\n479: if (tokenLen >= 3) {\n486: builder.appendMonthOfYear(tokenLen);\n488: break;\n530: builder.appendWeekOfWeekyear(tokenLen);\n531: break;\n549: String sub = token.substring(1);\n550: if (sub.length() == 1) {\n551: builder.appendLiteral(sub.charAt(0));\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "446: public DateTimeFormatterBuilder appendSignedDecimal(\n448: if (fieldType == null) {\n451: if (maxDigits < minDigits) {\n454: if (minDigits < 0 || maxDigits <= 0) {\n457: if (minDigits <= 1) {\n460: return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1250: NumberFormatter(DateTimeFieldType fieldType,\n1252: super();\n1253: iFieldType = fieldType;\n1254: iMaxParsedDigits = maxParsedDigits;\n1255: iSigned = signed;\n1256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "573: private static String parseToken(String pattern, int[] indexRef) {\n574: StringBuffer buf = new StringBuffer();\n576: int i = indexRef[0];\n577: int length = pattern.length();\n579: char c = pattern.charAt(i);\n580: if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n583: buf.append(c);\n585: while (i + 1 < length) {\n586: char peek = pattern.charAt(i + 1);\n587: if (peek == c) {\n588: buf.append(c);\n589: i++;\n593: }\n596: buf.append('\\'');\n598: boolean inLiteral = false;\n600: for (; i < length; i++) {\n601: c = pattern.charAt(i);\n603: if (c == '\\'') {\n611: } else if (!inLiteral &&\n613: i--;\n614: break;\n616: buf.append(c);\n621: indexRef[0] = i;\n622: return buf.toString();\n623: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "299: public static DateTimeFieldType weekyear() {\n300: return WEEKYEAR_TYPE;\n301: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011",
                            "test_body": "431: public void testParseLocalDate_weekyear_month_week_2011() {\n432: Chronology chrono = GJChronology.getInstanceUTC();\n433: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n434: assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n435: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "492: int getWeekyear(long instant) {\n493: int year = getYear(instant);\n494: int week = getWeekOfWeekyear(instant, year);\n495: if (week == 1) {\n496: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n497: } else if (week > 51) {\n498: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n502: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "231: public long roundFloor(long instant) {\n234: instant = iChronology.weekOfWeekyear().roundFloor(instant);\n235: int wow = iChronology.getWeekOfWeekyear(instant);\n236: if (wow > 1) {\n239: return instant;\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "515: int getWeekOfWeekyear(long instant, int year) {\n516: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n517: if (instant < firstWeekMillis1) {\n518: return getWeeksInYear(year - 1);\n520: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n521: if (instant >= firstWeekMillis2) {\n524: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n525: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n180: workInstant += DateTimeConstants.MILLIS_PER_WEEK;\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2010",
                            "test_body": "451: public void testParseLocalDate_year_month_week_2010() {\n452: Chronology chrono = GJChronology.getInstanceUTC();\n453: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n454: assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n455: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "631: private static boolean isNumericToken(String token) {\n632: int tokenLen = token.length();\n633: if (tokenLen > 0) {\n634: char c = token.charAt(0);\n635: switch (c) {\n662: return false;\n663: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "673: private static DateTimeFormatter createFormatterForPattern(String pattern) {\n674: if (pattern == null || pattern.length() == 0) {\n677: DateTimeFormatter formatter = null;\n678: synchronized (cPatternedCache) {\n679: formatter = cPatternedCache.get(pattern);\n680: if (formatter == null) {\n681: DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n682: parsePatternTo(builder, pattern);\n683: formatter = builder.toFormatter();\n685: cPatternedCache.put(pattern, formatter);\n687: }\n688: return formatter;\n689: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekOfWeekyear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "756: public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {\n757: return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);\n758: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "290: public static DateTimeFieldType weekOfWeekyear() {\n291: return WEEK_OF_WEEKYEAR_TYPE;\n292: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "778: public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\n779: return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n780: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "394: public DateTimeFormatterBuilder appendDecimal(\n396: if (fieldType == null) {\n399: if (maxDigits < minDigits) {\n402: if (minDigits < 0 || maxDigits <= 0) {\n405: if (minDigits <= 1) {\n408: return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "1393: protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n1396: super(fieldType, maxParsedDigits, signed);\n1397: iMinPrintedDigits = minPrintedDigits;\n1398: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "399: private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\n400: int length = pattern.length();\n401: int[] indexRef = new int[1];\n403: for (int i=0; i<length; i++) {\n404: indexRef[0] = i;\n405: String token = parseToken(pattern, indexRef);\n406: i = indexRef[0];\n408: int tokenLen = token.length();\n409: if (tokenLen == 0) {\n412: char c = token.charAt(0);\n414: switch (c) {\n424: if (tokenLen == 2) {\n453: int maxDigits = 9;\n456: if (i + 1 < length) {\n457: indexRef[0]++;\n458: if (isNumericToken(parseToken(pattern, indexRef))) {\n462: indexRef[0]--;\n465: switch (c) {\n467: builder.appendWeekyear(tokenLen, maxDigits);\n468: break;\n470: builder.appendYear(tokenLen, maxDigits);\n471: break;\n477: break;\n479: if (tokenLen >= 3) {\n486: builder.appendMonthOfYear(tokenLen);\n488: break;\n530: builder.appendWeekOfWeekyear(tokenLen);\n531: break;\n549: String sub = token.substring(1);\n550: if (sub.length() == 1) {\n551: builder.appendLiteral(sub.charAt(0));\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "446: public DateTimeFormatterBuilder appendSignedDecimal(\n448: if (fieldType == null) {\n451: if (maxDigits < minDigits) {\n454: if (minDigits < 0 || maxDigits <= 0) {\n457: if (minDigits <= 1) {\n460: return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n462: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "1250: NumberFormatter(DateTimeFieldType fieldType,\n1252: super();\n1253: iFieldType = fieldType;\n1254: iMaxParsedDigits = maxParsedDigits;\n1255: iSigned = signed;\n1256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendYear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "790: public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {\n791: return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);\n792: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "573: private static String parseToken(String pattern, int[] indexRef) {\n574: StringBuffer buf = new StringBuffer();\n576: int i = indexRef[0];\n577: int length = pattern.length();\n579: char c = pattern.charAt(i);\n580: if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n583: buf.append(c);\n585: while (i + 1 < length) {\n586: char peek = pattern.charAt(i + 1);\n587: if (peek == c) {\n588: buf.append(c);\n589: i++;\n593: }\n596: buf.append('\\'');\n598: boolean inLiteral = false;\n600: for (; i < length; i++) {\n601: c = pattern.charAt(i);\n603: if (c == '\\'') {\n611: } else if (!inLiteral &&\n613: i--;\n614: break;\n616: buf.append(c);\n621: indexRef[0] = i;\n622: return buf.toString();\n623: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2012",
                            "test_body": "437: public void testParseLocalDate_weekyear_month_week_2012() {\n438: Chronology chrono = GJChronology.getInstanceUTC();\n439: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n440: assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n441: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "791: public int getMaximumValue(long instant) {\n792: return getMaximumValue();\n793: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "492: int getWeekyear(long instant) {\n493: int year = getYear(instant);\n494: int week = getWeekOfWeekyear(instant, year);\n495: if (week == 1) {\n496: return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n497: } else if (week > 51) {\n498: return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n502: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "231: public long roundFloor(long instant) {\n234: instant = iChronology.weekOfWeekyear().roundFloor(instant);\n235: int wow = iChronology.getWeekOfWeekyear(instant);\n236: if (wow > 1) {\n239: return instant;\n240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "515: int getWeekOfWeekyear(long instant, int year) {\n516: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n517: if (instant < firstWeekMillis1) {\n518: return getWeeksInYear(year - 1);\n520: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n521: if (instant >= firstWeekMillis2) {\n524: return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n525: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "127: public long set(long instant, int year) {\n128: FieldUtils.verifyValueBounds(this, Math.abs(year),\n133: int thisWeekyear = get( instant );\n134: if ( thisWeekyear == year ) {\n140: int thisDow = iChronology.getDayOfWeek(instant);\n144: int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\n145: int weeksInToYear = iChronology.getWeeksInYear( year );\n146: int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\n154: int setToWeek = iChronology.getWeekOfWeekyear(instant);\n155: if ( setToWeek > maxOutWeeks ) {\n162: long workInstant = instant; // Get a copy\n168: workInstant = iChronology.setYear( workInstant, year );\n173: int workWoyYear = get( workInstant );\n179: if ( workWoyYear < year ) {\n180: workInstant += DateTimeConstants.MILLIS_PER_WEEK;\n189: int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\n191: workInstant = workInstant + (setToWeek - currentWoyWeek)\n200: workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\n204: return workInstant;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "102: public int getMinimumValue() {\n103: return DateTimeConstants.MONDAY;\n104: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "162: protected int getMaximumValueForSet(long instant, int value) {\n163: return getMaximumValue(instant);\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "59: public int get(long instant) {\n60: return iChronology.getWeekyear(instant);\n61: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "111: public int getMaximumValue() {\n112: return DateTimeConstants.SUNDAY;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2012",
                            "test_body": "463: public void testParseLocalDate_year_month_week_2012() {\n464: Chronology chrono = GJChronology.getInstanceUTC();\n465: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n466: assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n467: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2011",
                            "test_body": "457: public void testParseLocalDate_year_month_week_2011() {\n458: Chronology chrono = GJChronology.getInstanceUTC();\n459: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n460: assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n461: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "306: public Chronology withUTC() {\n307: return withZone(DateTimeZone.UTC);\n308: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "547: protected long getLocalMillis() {\n548: return iLocalMillis;\n549: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n414: if (isLeapYear(year)) {\n417: oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\n420: yearStart += oneYear;\n422: if (yearStart <= instant) {\n424: year++;\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "268: public static final DateTimeZone getZone(DateTimeZone zone) {\n269: if (zone == null) {\n272: return zone;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "758: public LocalDate parseLocalDate(String text) {\n759: return parseLocalDateTime(text).toLocalDate();\n760: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "2545: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n2546: DateTimePrinter[] elements = iPrinters;\n2547: if (elements == null) {\n2551: if (locale == null) {\n2553: locale = Locale.getDefault();\n2556: int len = elements.length;\n2557: for (int i=0; i<len; i++) {\n2558: elements[i].printTo(buf, partial, locale);\n2560: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "697: public LocalDate toLocalDate() {\n698: return new LocalDate(getLocalMillis(), getChronology());\n699: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "151: public DateTimeZone getZone() {\n152: return iZone;\n153: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "172: public int getOffset() {\n173: return iOffset;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "568: public boolean equals(Object partial) {\n570: if (this == partial) {\n573: if (partial instanceof LocalDate) {\n574: LocalDate other = (LocalDate) partial;\n575: if (iChronology.equals(other.iChronology)) {\n576: return iLocalMillis == other.iLocalMillis;\n580: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "208: public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\n209: if (formatter == null) {\n212: return append0(formatter.getPrinter(), formatter.getParser());\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "392: public int getMinimumDaysInFirstWeek() {\n393: return iGregorianChronology.getMinimumDaysInFirstWeek();\n394: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "338: long getFirstWeekOfYearMillis(int year) {\n339: long jan1millis = getYearMillis(year);\n340: int jan1dayOfWeek = getDayOfWeek(jan1millis);\n342: if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\n344: return jan1millis + (8 - jan1dayOfWeek)\n348: return jan1millis - (jan1dayOfWeek - 1)\n351: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "750: public DurationField getDurationField() {\n751: return iDurationField;\n752: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "696: public long set(long instant, int value) {\n697: if (instant >= iCutover) {\n698: instant = iGregorianField.set(instant, value);\n699: if (instant < iCutover) {\n724: return instant;\n725: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "1734: public String toString() {\n1735: return ISODateTimeFormat.date().print(this);\n1736: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "1258: public int estimateParsedLength() {\n1259: return iMaxParsedDigits;\n1260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "1754: public int estimateParsedLength() {\n1755: return estimatePrintedLength();\n1756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "1325: public static DateTimeFormatter yearMonthDay() {\n1326: if (ymd == null) {\n1333: return ymd;\n1334: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "2069: public int estimatePrintedLength() {\n2070: int est = 1 + iMinFields << 1;\n2071: if (iShowSeparators) {\n2072: est += iMinFields - 1;\n2074: if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\n2077: return est;\n2078: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "585: protected long getLocalMillis() {\n586: return iLocalMillis;\n587: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "172: public static DateTimeFieldType millisOfDay() {\n173: return MILLIS_OF_DAY_TYPE;\n174: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "510: public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\n511: if (fieldType == null) {\n514: return append0(new TextField(fieldType, true));\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "317: public static DateTimeFieldType monthOfYear() {\n318: return MONTH_OF_YEAR_TYPE;\n319: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "479: public DateTimeField getField(Chronology chronology) {\n480: chronology = DateTimeUtils.getChronology(chronology);\n482: switch (iOrdinal) {\n492: return chronology.year();\n496: return chronology.monthOfYear();\n498: return chronology.dayOfMonth();\n502: return chronology.weekyear();\n504: return chronology.weekOfWeekyear();\n533: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "184: public int getMinimumDaysInFirstWeek() {\n185: return iMinDaysInFirstWeek;\n186: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n350: return DateTimeZone.UTC;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "64: public long roundFloor(long instant) {\n65: return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "530: public void printTo(StringBuffer buf, ReadablePartial partial) {\n531: DateTimePrinter printer = requirePrinter();\n532: if (partial == null) {\n535: printer.printTo(buf, partial, iLocale);\n536: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "937: public DateTimeFormatterBuilder appendDayOfWeekShortText() {\n938: return appendShortText(DateTimeFieldType.dayOfWeek());\n939: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getWeekOfWeekyear(instant);\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "1168: public int estimateParsedLength() {\n1169: return 1;\n1170: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n150: return 0;\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "272: public static DateTimeFieldType dayOfMonth() {\n273: return DAY_OF_MONTH_TYPE;\n274: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "1070: private Object getFormatter() {\n1071: Object f = iFormatter;\n1073: if (f == null) {\n1074: if (iElementPairs.size() == 2) {\n1087: if (f == null) {\n1088: f = new Composite(iElementPairs);\n1091: iFormatter = f;\n1094: return f;\n1095: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "78: public int getMinimumValue() {\n79: return 1;\n80: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "103: public DateTimeFormatter toFormatter() {\n104: Object f = getFormatter();\n105: DateTimePrinter printer = null;\n106: if (isPrinter(f)) {\n107: printer = (DateTimePrinter) f;\n109: DateTimeParser parser = null;\n110: if (isParser(f)) {\n111: parser = (DateTimeParser) f;\n113: if (printer != null || parser != null) {\n114: return new DateTimeFormatter(printer, parser);\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "343: private DateTimeFormatterBuilder append0(\n345: iFormatter = null;\n346: iElementPairs.add(printer);\n347: iElementPairs.add(parser);\n348: return this;\n349: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "853: public static DateTimeFormatter date() {\n854: return yearMonthDay();\n855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "100: public long getUnitMillis() {\n101: return iField.getUnitMillis();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "609: public String print(ReadablePartial partial) {\n610: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n611: printTo(buf, partial);\n612: return buf.toString();\n613: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "594: public Chronology getChronology() {\n595: return iChronology;\n596: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "170: public DateTimeParser getParser() {\n171: return iParser;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "132: public static DateTimeZone getDefault() {\n133: DateTimeZone zone = cDefault;\n134: if (zone == null) {\n161: return zone;\n162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "326: int getWeeksInYear(int year) {\n327: long firstWeekMillis1 = getFirstWeekOfYearMillis(year);\n328: long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\n329: return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n330: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "53: protected AbstractPartial() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "184: public static synchronized GJChronology getInstance(\n189: zone = DateTimeUtils.getZone(zone);\n191: if (gregorianCutover == null) {\n194: cutoverInstant = gregorianCutover.toInstant();\n199: ArrayList<GJChronology> chronos = cCache.get(zone);\n200: if (chronos == null) {\n204: for (int i=chronos.size(); --i>=0; ) {\n205: chrono = chronos.get(i);\n206: if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n209: return chrono;\n231: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "280: public LocalDate(long instant, Chronology chronology) {\n281: chronology = DateTimeUtils.getChronology(chronology);\n283: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n284: chronology = chronology.withUTC();\n285: iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n286: iChronology = chronology;\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "2600: boolean isParser() {\n2601: return iParsers != null;\n2602: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "326: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n331: if ((base = getBase()) != null) {\n336: long instant = iGregorianChronology.getDateTimeMillis\n338: if (instant < iCutoverMillis) {\n347: return instant;\n348: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "556: public Chronology getChronology() {\n557: return iChronology;\n558: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "451: public DurationFieldType getDurationType() {\n452: return iUnitType;\n453: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "274: public LocalDateTime(long instant, Chronology chronology) {\n275: chronology = DateTimeUtils.getChronology(chronology);\n277: long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n278: iLocalMillis = localMillis;\n279: iChronology = chronology.withUTC();\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "316: public Chronology withZone(DateTimeZone zone) {\n317: if (zone == null) {\n320: if (zone == getZone()) {\n321: return this;\n324: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "173: public static void setDefault(DateTimeZone zone) throws SecurityException {\n174: SecurityManager sm = System.getSecurityManager();\n175: if (sm != null) {\n178: if (zone == null) {\n181: synchronized(DateTimeZone.class) {\n182: cDefault = zone;\n183: }\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "46: protected BaseLocal() {\n47: super();\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "122: public static GJChronology getInstanceUTC() {\n123: return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "263: public static DateTimeFieldType dayOfWeek() {\n264: return DAY_OF_WEEK_TYPE;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "1026: public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n1027: if (newZone == null) {\n1030: if (newZone == this) {\n1031: return oldInstant;\n1035: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "391: public LocalDate(\n396: super();\n397: chronology = DateTimeUtils.getChronology(chronology).withUTC();\n398: long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n399: iChronology = chronology;\n400: iLocalMillis = instant;\n401: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "110: protected int getMaximumValueForSet(long instant, int value) {\n111: return value > 52 ? getMaximumValue(instant) : 52;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "850: public long roundFloor(long instant) {\n851: if (instant >= iCutover) {\n852: instant = iGregorianField.roundFloor(instant);\n853: if (instant < iCutover) {\n862: return instant;\n863: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "2596: boolean isPrinter() {\n2597: return iPrinters != null;\n2598: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "383: public Instant getGregorianCutover() {\n384: return iCutoverInstant;\n385: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1160: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1161: buf.append(iValue);\n1162: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "1686: TextField(DateTimeFieldType fieldType, boolean isShort) {\n1687: super();\n1688: iFieldType = fieldType;\n1689: iShort = isShort;\n1690: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n488: return compareReverse\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "149: public long getDateTimeMillis(\n153: if ((base = getBase()) != null) {\n157: FieldUtils.verifyValueBounds\n159: return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "489: public int get(DateTimeFieldType fieldType) {\n490: if (fieldType == null) {\n493: if (isSupported(fieldType) == false) {\n496: return fieldType.getField(getChronology()).get(getLocalMillis());\n497: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "242: public long getMillis() {\n243: return iMillis;\n244: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "2464: Composite(List<Object> elementPairs) {\n2465: super();\n2467: List<Object> printerList = new ArrayList<Object>();\n2468: List<Object> parserList = new ArrayList<Object>();\n2470: decompose(elementPairs, printerList, parserList);\n2472: if (printerList.size() <= 0) {\n2476: int size = printerList.size();\n2477: iPrinters = new DateTimePrinter[size];\n2478: int printEst = 0;\n2479: for (int i=0; i<size; i++) {\n2480: DateTimePrinter printer = (DateTimePrinter) printerList.get(i);\n2481: printEst += printer.estimatePrintedLength();\n2482: iPrinters[i] = printer;\n2484: iPrintedLengthEstimate = printEst;\n2487: if (parserList.size() <= 0) {\n2491: int size = parserList.size();\n2492: iParsers = new DateTimeParser[size];\n2493: int parseEst = 0;\n2494: for (int i=0; i<size; i++) {\n2495: DateTimeParser parser = (DateTimeParser) parserList.get(i);\n2496: parseEst += parser.estimateParsedLength();\n2497: iParsers[i] = parser;\n2499: iParsedLengthEstimate = parseEst;\n2501: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "1097: private boolean isPrinter(Object f) {\n1098: if (f instanceof DateTimePrinter) {\n1099: if (f instanceof Composite) {\n1100: return ((Composite)f).isPrinter();\n1105: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "630: public int get(long instant) {\n631: if (instant >= iCutover) {\n632: return iGregorianField.get(instant);\n636: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "291: public DateTimeZone getZone() {\n293: if ((base = getBase()) != null) {\n296: return DateTimeZone.UTC;\n297: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "130: public Instant toInstant() {\n131: return this;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "1426: public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n1427: if (partial.isSupported(iFieldType)) {\n1429: FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n1432: }\n1436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "507: int getWeekOfWeekyear(long instant) {\n508: return getWeekOfWeekyear(instant, getYear(instant));\n509: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "2608: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n2609: int size = elementPairs.size();\n2610: for (int i=0; i<size; i+=2) {\n2611: Object element = elementPairs.get(i);\n2612: if (element instanceof DateTimePrinter) {\n2613: if (element instanceof Composite) {\n2614: addArrayToList(printerList, ((Composite)element).iPrinters);\n2616: printerList.add(element);\n2620: element = elementPairs.get(i + 1);\n2621: if (element instanceof DateTimeParser) {\n2622: if (element instanceof Composite) {\n2623: addArrayToList(parserList, ((Composite)element).iParsers);\n2625: parserList.add(element);\n2629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "358: public DateTimeFormatterBuilder appendLiteral(char c) {\n359: return append0(new CharacterLiteral(c));\n360: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "82: public DateTimeFormatterBuilder() {\n83: super();\n84: iElementPairs = new ArrayList<Object>();\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "2631: private void addArrayToList(List<Object> list, Object[] array) {\n2632: if (array != null) {\n2633: for (int i=0; i<array.length; i++) {\n2634: list.add(array[i]);\n2637: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "952: public static DateTimeFormatter dateTimeNoMillis() {\n953: if (dtx == null) {\n959: return dtx;\n960: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "794: public LocalDateTime parseLocalDateTime(String text) {\n795: DateTimeParser parser = requireParser();\n797: Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n798: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n799: int newPos = parser.parseInto(bucket, text, 0);\n800: if (newPos >= 0) {\n801: if (newPos >= text.length()) {\n802: long millis = bucket.computeMillis(true, text);\n803: if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n804: int parsedOffset = bucket.getOffset();\n805: DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n806: chrono = chrono.withZone(parsedZone);\n808: return new LocalDateTime(millis, chrono);\n814: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "2206: public int estimateParsedLength() {\n2207: return estimatePrintedLength();\n2208: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "326: public static DateTimeFieldType year() {\n327: return YEAR_TYPE;\n328: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "1400: public int estimatePrintedLength() {\n1401: return iMaxParsedDigits;\n1402: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "335: private DateTimeFormatterBuilder append0(Object element) {\n336: iFormatter = null;\n338: iElementPairs.add(element);\n339: iElementPairs.add(element);\n340: return this;\n341: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "754: public DurationField getRangeDurationField() {\n755: return iRangeDurationField;\n756: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "507: public boolean isSupported(DateTimeFieldType type) {\n508: if (type == null) {\n511: DurationFieldType durType = type.getDurationType();\n512: if (DATE_DURATION_TYPES.contains(durType) ||\n515: return type.getField(getChronology()).isSupported();\n518: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i = 0; i < count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "403: public boolean equals(Object obj) {\n404: return super.equals(obj);\n405: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "105: public DateTimeFormatter(\n107: super();\n108: iPrinter = printer;\n109: iParser = parser;\n110: iLocale = null;\n111: iOffsetParsed = false;\n112: iChrono = null;\n113: iZone = null;\n114: iPivotYear = null;\n115: iDefaultYear = 2000;\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "1692: public int estimatePrintedLength() {\n1693: return iShort ? 6 : 20;\n1694: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "1107: private boolean isParser(Object f) {\n1108: if (f instanceof DateTimeParser) {\n1109: if (f instanceof Composite) {\n1110: return ((Composite)f).isParser();\n1115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "169: public static DateTimeFormatter forPattern(String pattern) {\n170: return createFormatterForPattern(pattern);\n171: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "1144: public int estimatePrintedLength() {\n1145: return 1;\n1146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "152: public DateTimePrinter getPrinter() {\n153: return iPrinter;\n154: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "1139: CharacterLiteral(char value) {\n1140: super();\n1141: iValue = value;\n1142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 25,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_Moscow_Autumn",
                            "test_body": "920: public void test_DateTime_constructor_Moscow_Autumn() {\n921: DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);\n922: assertEquals(\"2007-10-28T02:30:00.000+04:00\", dt.toString());\n923: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "168: protected void assemble(Fields fields) {\n169: if (getBase().getZone() == DateTimeZone.UTC) {\n180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "1192: public abstract boolean equals(Object object);\n1200: return 57 + getID().hashCode();\n1201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n168: break;\n170: periodStart = next;\n171: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n172: }\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "278: public DateTime(\n285: super(year, monthOfYear, dayOfMonth,\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n552: offset = standardOffset;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "121: private ISOChronology(Chronology base) {\n122: super(base, null);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1540: if (iTailZone == null) {\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn",
                            "test_body": "889: public void test_getOffsetFromLocal_Moscow_Autumn() {\n890: doTest_getOffsetFromLocal(10, 28, 0, 0, \"2007-10-28T00:00:00.000+04:00\", ZONE_MOSCOW);\n891: doTest_getOffsetFromLocal(10, 28, 0,30, \"2007-10-28T00:30:00.000+04:00\", ZONE_MOSCOW);\n892: doTest_getOffsetFromLocal(10, 28, 1, 0, \"2007-10-28T01:00:00.000+04:00\", ZONE_MOSCOW);\n893: doTest_getOffsetFromLocal(10, 28, 1,30, \"2007-10-28T01:30:00.000+04:00\", ZONE_MOSCOW);\n894: 895: doTest_getOffsetFromLocal(10, 28, 2, 0, \"2007-10-28T02:00:00.000+04:00\", ZONE_MOSCOW);\n896: doTest_getOffsetFromLocal(10, 28, 2,30, \"2007-10-28T02:30:00.000+04:00\", ZONE_MOSCOW);\n897: doTest_getOffsetFromLocal(10, 28, 2,30,59,999, \"2007-10-28T02:30:59.999+04:00\", ZONE_MOSCOW);\n898: doTest_getOffsetFromLocal(10, 28, 2,59,59,998, \"2007-10-28T02:59:59.998+04:00\", ZONE_MOSCOW);\n899: doTest_getOffsetFromLocal(10, 28, 2,59,59,999, \"2007-10-28T02:59:59.999+04:00\", ZONE_MOSCOW);\n900: 901: doTest_getOffsetFromLocal(10, 28, 3, 0, \"2007-10-28T03:00:00.000+03:00\", ZONE_MOSCOW);\n902: doTest_getOffsetFromLocal(10, 28, 3,30, \"2007-10-28T03:30:00.000+03:00\", ZONE_MOSCOW);\n903: doTest_getOffsetFromLocal(10, 28, 4, 0, \"2007-10-28T04:00:00.000+03:00\", ZONE_MOSCOW);\n904: doTest_getOffsetFromLocal(10, 28, 5, 0, \"2007-10-28T05:00:00.000+03:00\", ZONE_MOSCOW);\n905: doTest_getOffsetFromLocal(10, 28, 6, 0, \"2007-10-28T06:00:00.000+03:00\", ZONE_MOSCOW);\n906: doTest_getOffsetFromLocal(10, 28, 7, 0, \"2007-10-28T07:00:00.000+03:00\", ZONE_MOSCOW);\n907: doTest_getOffsetFromLocal(10, 28, 8, 0, \"2007-10-28T08:00:00.000+03:00\", ZONE_MOSCOW);\n908: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "879: public int getOffsetFromLocal(long instantLocal) {\n881: final int offsetLocal = getOffset(instantLocal);\n883: final long instantAdjusted = instantLocal - offsetLocal;\n884: final int offsetAdjusted = getOffset(instantAdjusted);\n886: if (offsetLocal != offsetAdjusted) {\n889: if ((offsetLocal - offsetAdjusted) < 0) {\n893: long nextLocal = nextTransition(instantAdjusted);\n894: long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n895: if (nextLocal != nextAdjusted) {\n900: return offsetAdjusted;\n901: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:nextTransition(J)J",
                                    "method_body": "122: public long nextTransition(long instant) {\n123: return iZone.nextTransition(instant);\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "159: public DateTime(long instant, DateTimeZone zone) {\n160: super(instant, zone);\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "109: public BaseDateTime(long instant, DateTimeZone zone) {\n110: this(instant, ISOChronology.getInstance(zone));\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "432: public DateTime(\n441: super(year, monthOfYear, dayOfMonth,\n443: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n551: } else if (iMode == 's') {\n552: offset = standardOffset;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1576: if (iTailZone == null) {\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n188: if (isLeapYear(year)) {\n190: dayOfYear++;\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "141: public DateTimeZone getZone() {\n143: if ((base = getBase()) != null) {\n146: return DateTimeZone.UTC;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn_overlap_mins",
                            "test_body": "910: public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {\n911: for (int min = 0; min < 60; min++) {\n912: if (min < 10) {\n913: doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:0\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n914: } else {\n915: doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n916: }\n917: }\n918: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "159: public DateTime(long instant, DateTimeZone zone) {\n160: super(instant, zone);\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "109: public BaseDateTime(long instant, DateTimeZone zone) {\n110: this(instant, ISOChronology.getInstance(zone));\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "432: public DateTime(\n441: super(year, monthOfYear, dayOfMonth,\n443: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "141: public DateTimeZone getZone() {\n143: if ((base = getBase()) != null) {\n146: return DateTimeZone.UTC;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 26,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_usCentral",
                            "test_body": "1153: public void testBug2182444_usCentral() {\n1154: Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n1155: Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n1156: DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n1157: DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n1158: assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));\n1159: assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));\n1160: 1161: DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n1162: DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n1163: assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());\n1164: assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());\n1165: assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());\n1166: assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));\n1167: assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());\n1168: assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));\n1169: assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());\n1170: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTime:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "517: public DateTime toDateTime(Chronology chronology) {\n518: chronology = DateTimeUtils.getChronology(chronology);\n519: if (getChronology() == chronology) {\n522: return super.toDateTime(chronology);\n523: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "147: private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n148: super(base, param, minDaysInFirstWeek);\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "688: protected DateTimeZone(String id) {\n689: if (id == null) {\n692: iID = id;\n693: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "481: static OfYear readFrom(DataInput in) throws IOException {\n482: return new OfYear((char)in.readUnsignedByte(),\n488: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "739: static Recurrence readFrom(DataInput in) throws IOException {\n740: return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n721: if (daysToAdd < 0) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getStandardOffset(J)I",
                                    "method_body": "1546: public int getStandardOffset(long instant) {\n1547: long[] transitions = iTransitions;\n1548: int i = Arrays.binarySearch(transitions, instant);\n1549: if (i >= 0) {\n1550: return iStandardOffsets[i];\n1552: i = ~i;\n1553: if (i < transitions.length) {\n1554: if (i > 0) {\n1555: return iStandardOffsets[i - 1];\n1559: if (iTailZone == null) {\n1562: return iTailZone.getStandardOffset(instant);\n1563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "99: public static GregorianChronology getInstance(DateTimeZone zone) {\n100: return getInstance(zone, 4);\n101: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "164: public DurationField getLeapDurationField() {\n165: return getWrappedField().getLeapDurationField();\n166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "86: private CachedDateTimeZone(DateTimeZone zone) {\n87: super(zone.getID());\n88: iZone = zone;\n89: iInfoCache = new Info[cInfoCacheMask + 1];\n90: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1645: public DateTime withHourOfDay(int hour) {\n1646: return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n1647: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "74: BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n75: super(base, param, minDaysInFirstWeek);\n76: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:isStandardOffset(J)Z",
                                    "method_body": "842: public boolean isStandardOffset(long instant) {\n843: return getOffset(instant) == getStandardOffset(instant);\n844: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:getHourOfDay()I",
                                    "method_body": "182: public int getHourOfDay() {\n183: return getChronology().hourOfDay().get(getMillis());\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "141: public DateTimeZone getZone() {\n143: if ((base = getBase()) != null) {\n144: return base.getZone();\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n168: break;\n170: periodStart = next;\n171: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n172: }\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "1165: static DSTZone readFrom(DataInput in, String id) throws IOException {\n1166: return new DSTZone(id, (int)readMillis(in),\n1168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "705: private long setDayOfMonth(Chronology chrono, long instant) {\n706: if (iDayOfMonth >= 0) {\n707: instant = chrono.dayOfMonth().set(instant, iDayOfMonth);\n709: instant = chrono.dayOfMonth().set(instant, 1);\n710: instant = chrono.monthOfYear().add(instant, 1);\n711: instant = chrono.dayOfMonth().add(instant, iDayOfMonth);\n713: return instant;\n714: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "109: public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n110: switch (in.readUnsignedByte()) {\n119: return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "461: public DateTime(\n470: super(year, monthOfYear, dayOfMonth,\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "1174: DSTZone(String id, int standardOffset,\n1176: super(id);\n1177: iStandardOffset = standardOffset;\n1178: iStartRecurrence = startRecurrence;\n1179: iEndRecurrence = endRecurrence;\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n204: if (id == null) {\n207: if (id.equals(\"UTC\")) {\n210: DateTimeZone zone = cProvider.getZone(id);\n211: if (zone != null) {\n212: return zone;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "170: public Chronology withUTC() {\n171: return INSTANCE_UTC;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getStandardOffset(J)I",
                                    "method_body": "1190: public int getStandardOffset(long instant) {\n1191: return iStandardOffset;\n1192: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n550: offset = standardOffset + saveMillis;\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "223: private DateTimeZone loadZoneData(String id) {\n224: InputStream in = null;\n226: in = openResource(id);\n227: DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n228: iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n229: return tz;\n236: if (in != null) {\n237: in.close();\n240: }\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1531: return iWallOffsets[i];\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1535: if (i > 0) {\n1536: return iWallOffsets[i - 1];\n1540: if (iTailZone == null) {\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getStandardOffset(J)I",
                                    "method_body": "213: public int getStandardOffset(long millis) {\n214: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n215: if (iStandardOffset == Integer.MIN_VALUE) {\n216: iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);\n218: return iStandardOffset;\n220: return iNextInfo.getStandardOffset(millis);\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "67: public static CachedDateTimeZone forZone(DateTimeZone zone) {\n68: if (zone instanceof CachedDateTimeZone) {\n71: return new CachedDateTimeZone(zone);\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "747: Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n748: iOfYear = ofYear;\n749: iNameKey = nameKey;\n750: iSaveMillis = saveMillis;\n751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "190: protected void assemble(Fields fields) {\n191: if (getBase() == null) {\n194: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "110: public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n111: if (zone == null) {\n115: synchronized (cCache) {\n116: GregorianChronology[] chronos = cCache.get(zone);\n117: if (chronos == null) {\n118: chronos = new GregorianChronology[7];\n119: cCache.put(zone, chronos);\n122: chrono = chronos[minDaysInFirstWeek - 1];\n126: }\n127: if (chrono == null) {\n128: if (zone == DateTimeZone.UTC) {\n131: chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n132: chrono = new GregorianChronology\n135: chronos[minDaysInFirstWeek - 1] = chrono;\n137: }\n138: return chrono;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "94: public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n95: if (in instanceof DataInput) {\n98: return readFrom((DataInput)new DataInputStream(in), id);\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getStandardOffset(J)I",
                                    "method_body": "114: public int getStandardOffset(long instant) {\n115: return getInfo(instant).getStandardOffset(instant);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n147: return loadZoneData(id);\n150: if (obj instanceof SoftReference<?>) {\n152: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n153: DateTimeZone tz = ref.get();\n154: if (tz != null) {\n155: return tz;\n162: return getZone((String)obj);\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "1339: static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n1341: int poolSize = in.readUnsignedShort();\n1342: String[] pool = new String[poolSize];\n1343: for (int i=0; i<poolSize; i++) {\n1344: pool[i] = in.readUTF();\n1347: int size = in.readInt();\n1348: long[] transitions = new long[size];\n1349: int[] wallOffsets = new int[size];\n1350: int[] standardOffsets = new int[size];\n1351: String[] nameKeys = new String[size];\n1353: for (int i=0; i<size; i++) {\n1354: transitions[i] = readMillis(in);\n1355: wallOffsets[i] = (int)readMillis(in);\n1356: standardOffsets[i] = (int)readMillis(in);\n1359: if (poolSize < 256) {\n1360: index = in.readUnsignedByte();\n1364: nameKeys[i] = pool[index];\n1367: }\n1370: DSTZone tailZone = null;\n1371: if (in.readBoolean()) {\n1372: tailZone = DSTZone.readFrom(in, id);\n1375: return new PrecalculatedZone\n1377: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "194: private InputStream openResource(String name) throws IOException {\n196: if (iFileDir != null) {\n199: String path = iResourcePath.concat(name);\n200: if (iLoader != null) {\n201: in = iLoader.getResourceAsStream(path);\n205: if (in == null) {\n214: return in;\n215: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "1497: private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n1500: super(id);\n1501: iTransitions = transitions;\n1502: iWallOffsets = wallOffsets;\n1503: iStandardOffsets = standardOffsets;\n1504: iNameKeys = nameKeys;\n1505: iTailZone = tailZone;\n1506: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "499: OfYear(char mode,\n504: {\n505: if (mode != 'u' && mode != 'w' && mode != 's') {\n509: iMode = mode;\n510: iMonthOfYear = monthOfYear;\n511: iDayOfMonth = dayOfMonth;\n512: iDayOfWeek = dayOfWeek;\n513: iAdvance = advanceDayOfWeek;\n514: iMillisOfDay = millisOfDay;\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "182: static long readMillis(DataInput in) throws IOException {\n183: int v = in.readUnsignedByte();\n184: switch (v >> 6) {\n187: v = (v << (32 - 6)) >> (32 - 6);\n188: return v * (30 * 60000L);\n192: v = (v << (32 - 6)) >> (32 - 30);\n193: v |= (in.readUnsignedByte()) << 16;\n194: v |= (in.readUnsignedByte()) << 8;\n195: v |= (in.readUnsignedByte());\n196: return v * 60000L;\n200: long w = (((long)v) << (64 - 6)) >> (64 - 38);\n201: w |= (in.readUnsignedByte()) << 24;\n202: w |= (in.readUnsignedByte()) << 16;\n203: w |= (in.readUnsignedByte()) << 8;\n204: w |= (in.readUnsignedByte());\n205: return w * 1000L;\n209: return in.readLong();\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "130: BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n131: super(base, param);\n133: if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\n138: iMinDaysInFirstWeek = minDaysInFirstWeek;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "176: public DateTime toDateTime(Chronology chronology) {\n177: return new DateTime(getMillis(), chronology);\n178: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW",
                            "test_body": "1172: public void testBug2182444_ausNSW() {\n1173: Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n1174: Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n1175: DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n1176: DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n1177: assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));\n1178: assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));\n1179: 1180: DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n1181: DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n1182: assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\n1183: assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());\n1184: assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());\n1185: assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));\n1186: assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());\n1187: assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));\n1188: assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());\n1189: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTime:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "517: public DateTime toDateTime(Chronology chronology) {\n518: chronology = DateTimeUtils.getChronology(chronology);\n519: if (getChronology() == chronology) {\n522: return super.toDateTime(chronology);\n523: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "147: private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n148: super(base, param, minDaysInFirstWeek);\n149: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "688: protected DateTimeZone(String id) {\n689: if (id == null) {\n692: iID = id;\n693: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "481: static OfYear readFrom(DataInput in) throws IOException {\n482: return new OfYear((char)in.readUnsignedByte(),\n488: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "739: static Recurrence readFrom(DataInput in) throws IOException {\n740: return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n741: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getStandardOffset(J)I",
                                    "method_body": "1546: public int getStandardOffset(long instant) {\n1547: long[] transitions = iTransitions;\n1548: int i = Arrays.binarySearch(transitions, instant);\n1549: if (i >= 0) {\n1550: return iStandardOffsets[i];\n1552: i = ~i;\n1553: if (i < transitions.length) {\n1554: if (i > 0) {\n1555: return iStandardOffsets[i - 1];\n1559: if (iTailZone == null) {\n1562: return iTailZone.getStandardOffset(instant);\n1563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "99: public static GregorianChronology getInstance(DateTimeZone zone) {\n100: return getInstance(zone, 4);\n101: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "164: public DurationField getLeapDurationField() {\n165: return getWrappedField().getLeapDurationField();\n166: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "86: private CachedDateTimeZone(DateTimeZone zone) {\n87: super(zone.getID());\n88: iZone = zone;\n89: iInfoCache = new Info[cInfoCacheMask + 1];\n90: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1645: public DateTime withHourOfDay(int hour) {\n1646: return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n1647: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "74: BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n75: super(base, param, minDaysInFirstWeek);\n76: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:isStandardOffset(J)Z",
                                    "method_body": "842: public boolean isStandardOffset(long instant) {\n843: return getOffset(instant) == getStandardOffset(instant);\n844: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:getHourOfDay()I",
                                    "method_body": "182: public int getHourOfDay() {\n183: return getChronology().hourOfDay().get(getMillis());\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "141: public DateTimeZone getZone() {\n143: if ((base = getBase()) != null) {\n144: return base.getZone();\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n168: break;\n170: periodStart = next;\n171: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n172: }\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "1165: static DSTZone readFrom(DataInput in, String id) throws IOException {\n1166: return new DSTZone(id, (int)readMillis(in),\n1168: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "109: public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\n110: switch (in.readUnsignedByte()) {\n119: return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1693: public DateTime withMillisOfSecond(int millis) {\n1694: return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n1695: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "461: public DateTime(\n470: super(year, monthOfYear, dayOfMonth,\n472: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "1174: DSTZone(String id, int standardOffset,\n1176: super(id);\n1177: iStandardOffset = standardOffset;\n1178: iStartRecurrence = startRecurrence;\n1179: iEndRecurrence = endRecurrence;\n1180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "203: public static DateTimeZone forID(String id) {\n204: if (id == null) {\n207: if (id.equals(\"UTC\")) {\n210: DateTimeZone zone = cProvider.getZone(id);\n211: if (zone != null) {\n212: return zone;\n224: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "170: public Chronology withUTC() {\n171: return INSTANCE_UTC;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "1569: public long nextTransition(long instant) {\n1570: long[] transitions = iTransitions;\n1571: int i = Arrays.binarySearch(transitions, instant);\n1572: i = (i >= 0) ? (i + 1) : ~i;\n1573: if (i < transitions.length) {\n1574: return transitions[i];\n1576: if (iTailZone == null) {\n1579: long end = transitions[transitions.length - 1];\n1580: if (instant < end) {\n1583: return iTailZone.nextTransition(instant);\n1584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "223: private DateTimeZone loadZoneData(String id) {\n224: InputStream in = null;\n226: in = openResource(id);\n227: DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n228: iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n229: return tz;\n236: if (in != null) {\n237: in.close();\n240: }\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1531: return iWallOffsets[i];\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1535: if (i > 0) {\n1536: return iWallOffsets[i - 1];\n1540: if (iTailZone == null) {\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getStandardOffset(J)I",
                                    "method_body": "213: public int getStandardOffset(long millis) {\n214: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n215: if (iStandardOffset == Integer.MIN_VALUE) {\n216: iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);\n218: return iStandardOffset;\n220: return iNextInfo.getStandardOffset(millis);\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "67: public static CachedDateTimeZone forZone(DateTimeZone zone) {\n68: if (zone instanceof CachedDateTimeZone) {\n71: return new CachedDateTimeZone(zone);\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "747: Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\n748: iOfYear = ofYear;\n749: iNameKey = nameKey;\n750: iSaveMillis = saveMillis;\n751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "190: protected void assemble(Fields fields) {\n191: if (getBase() == null) {\n194: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "110: public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\n111: if (zone == null) {\n115: synchronized (cCache) {\n116: GregorianChronology[] chronos = cCache.get(zone);\n117: if (chronos == null) {\n118: chronos = new GregorianChronology[7];\n119: cCache.put(zone, chronos);\n122: chrono = chronos[minDaysInFirstWeek - 1];\n126: }\n127: if (chrono == null) {\n128: if (zone == DateTimeZone.UTC) {\n131: chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\n132: chrono = new GregorianChronology\n135: chronos[minDaysInFirstWeek - 1] = chrono;\n137: }\n138: return chrono;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "257: public boolean equals(Object readableInstant) {\n259: if (this == readableInstant) {\n260: return true;\n262: if (readableInstant instanceof ReadableInstant == false) {\n265: ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n266: return\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "94: public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\n95: if (in instanceof DataInput) {\n98: return readFrom((DataInput)new DataInputStream(in), id);\n100: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getStandardOffset(J)I",
                                    "method_body": "114: public int getStandardOffset(long instant) {\n115: return getInfo(instant).getStandardOffset(instant);\n116: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "135: public DateTimeZone getZone(String id) {\n136: if (id == null) {\n140: Object obj = iZoneInfoMap.get(id);\n141: if (obj == null) {\n145: if (id.equals(obj)) {\n147: return loadZoneData(id);\n150: if (obj instanceof SoftReference<?>) {\n152: SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\n153: DateTimeZone tz = ref.get();\n154: if (tz != null) {\n155: return tz;\n162: return getZone((String)obj);\n163: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "1339: static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\n1341: int poolSize = in.readUnsignedShort();\n1342: String[] pool = new String[poolSize];\n1343: for (int i=0; i<poolSize; i++) {\n1344: pool[i] = in.readUTF();\n1347: int size = in.readInt();\n1348: long[] transitions = new long[size];\n1349: int[] wallOffsets = new int[size];\n1350: int[] standardOffsets = new int[size];\n1351: String[] nameKeys = new String[size];\n1353: for (int i=0; i<size; i++) {\n1354: transitions[i] = readMillis(in);\n1355: wallOffsets[i] = (int)readMillis(in);\n1356: standardOffsets[i] = (int)readMillis(in);\n1359: if (poolSize < 256) {\n1360: index = in.readUnsignedByte();\n1364: nameKeys[i] = pool[index];\n1367: }\n1370: DSTZone tailZone = null;\n1371: if (in.readBoolean()) {\n1372: tailZone = DSTZone.readFrom(in, id);\n1375: return new PrecalculatedZone\n1377: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "194: private InputStream openResource(String name) throws IOException {\n196: if (iFileDir != null) {\n199: String path = iResourcePath.concat(name);\n200: if (iLoader != null) {\n201: in = iLoader.getResourceAsStream(path);\n205: if (in == null) {\n214: return in;\n215: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "1497: private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\n1500: super(id);\n1501: iTransitions = transitions;\n1502: iWallOffsets = wallOffsets;\n1503: iStandardOffsets = standardOffsets;\n1504: iNameKeys = nameKeys;\n1505: iTailZone = tailZone;\n1506: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "499: OfYear(char mode,\n504: {\n505: if (mode != 'u' && mode != 'w' && mode != 's') {\n509: iMode = mode;\n510: iMonthOfYear = monthOfYear;\n511: iDayOfMonth = dayOfMonth;\n512: iDayOfWeek = dayOfWeek;\n513: iAdvance = advanceDayOfWeek;\n514: iMillisOfDay = millisOfDay;\n515: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "182: static long readMillis(DataInput in) throws IOException {\n183: int v = in.readUnsignedByte();\n184: switch (v >> 6) {\n187: v = (v << (32 - 6)) >> (32 - 6);\n188: return v * (30 * 60000L);\n192: v = (v << (32 - 6)) >> (32 - 30);\n193: v |= (in.readUnsignedByte()) << 16;\n194: v |= (in.readUnsignedByte()) << 8;\n195: v |= (in.readUnsignedByte());\n196: return v * 60000L;\n200: long w = (((long)v) << (64 - 6)) >> (64 - 38);\n201: w |= (in.readUnsignedByte()) << 24;\n202: w |= (in.readUnsignedByte()) << 16;\n203: w |= (in.readUnsignedByte()) << 8;\n204: w |= (in.readUnsignedByte());\n205: return w * 1000L;\n209: return in.readLong();\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "130: BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\n131: super(base, param);\n133: if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\n138: iMinDaysInFirstWeek = minDaysInFirstWeek;\n139: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "119: int getDaysInYearMonth(int year, int month) {\n120: if (isLeapYear(year)) {\n121: return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n123: return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "176: public DateTime toDateTime(Chronology chronology) {\n177: return new DateTime(getMillis(), chronology);\n178: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer",
                            "test_body": "1104: public void testWithMillisOfSecondInDstChange_Paris_summer() {\n1105: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1106: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1107: DateTime test = dateTime.withMillisOfSecond(0);\n1108: assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n1109: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "728: public long parseMillis(String text) {\n729: DateTimeParser parser = requireParser();\n731: Chronology chrono = selectChronology(iChrono);\n732: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n733: int newPos = parser.parseInto(bucket, text, 0);\n734: if (newPos >= 0) {\n735: if (newPos >= text.length()) {\n736: return bucket.computeMillis(true, text);\n742: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "765: public static DateTimeFormatter dateTimeParser() {\n766: if (dtp == null) {\n778: return dtp;\n779: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1960: private long[] getFractionData(long fraction, DateTimeField field) {\n1961: long rangeMillis = field.getDurationField().getUnitMillis();\n1963: int maxDigits = iMaxDigits;\n1965: switch (maxDigits) {\n1975: case 9:  scalar = 1000000000L; break;\n1986: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n1987: break;\n1993: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n1994: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2000: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2001: DateTimeField field = iFieldType.getField(bucket.getChronology());\n2003: int limit = Math.min(iMaxDigits, text.length() - position);\n2005: long value = 0;\n2006: long n = field.getDurationField().getUnitMillis() * 10;\n2007: int length = 0;\n2008: while (length < limit) {\n2009: char c = text.charAt(position + length);\n2010: if (c < '0' || c > '9') {\n2013: length++;\n2014: long nn = n / 10;\n2015: value += (c - '0') * nn;\n2016: n = nn;\n2017: }\n2019: value /= 10;\n2021: if (length == 0) {\n2025: if (value > Integer.MAX_VALUE) {\n2029: DateTimeField parseField = new PreciseDateTimeField(\n2034: bucket.saveField(parseField, (int) value);\n2036: return position + length;\n2037: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "425: boolean restoreState(DateTimeParserBucket enclosing) {\n426: if (enclosing != DateTimeParserBucket.this) {\n429: enclosing.iZone = this.iZone;\n430: enclosing.iOffset = this.iOffset;\n431: enclosing.iSavedFields = this.iSavedFields;\n432: if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n437: enclosing.iSavedFieldsShared = true;\n439: enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n440: return true;\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2210: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2211: int limit = text.length() - position;\n2214: if (iZeroOffsetParseText != null) {\n2215: if (iZeroOffsetParseText.length() == 0) {\n2226: if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n2234: if (limit <= 1) {\n2239: char c = text.charAt(position);\n2240: if (c == '-') {\n2241: negative = true;\n2242: } else if (c == '+') {\n2243: negative = false;\n2248: limit--;\n2249: position++;\n2263: if (digitCount(text, position, 2) < 2) {\n2270: int hours = FormatUtils.parseTwoDigits(text, position);\n2271: if (hours > 23) {\n2274: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2275: limit -= 2;\n2276: position += 2;\n2282: if (limit <= 0) {\n2287: c = text.charAt(position);\n2288: if (c == ':') {\n2289: expectSeparators = true;\n2290: limit--;\n2291: position++;\n2300: int count = digitCount(text, position, 2);\n2301: if (count == 0 && !expectSeparators) {\n2303: } else if (count < 2) {\n2308: int minutes = FormatUtils.parseTwoDigits(text, position);\n2309: if (minutes > 59) {\n2312: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2313: limit -= 2;\n2314: position += 2;\n2318: if (limit <= 0) {\n2319: break parse;\n2377: bucket.setOffset(negative ? -offset : offset);\n2378: return position;\n2379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "180: public void setOffset(int offset) {\n181: iSavedState = null;\n182: iOffset = offset;\n183: iZone = null;\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n335: iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n336: iSavedFieldsShared = false;\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i=0; i<count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2667: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2668: DateTimeParser[] parsers = iParsers;\n2669: int length = parsers.length;\n2671: final Object originalState = bucket.saveState();\n2672: boolean isOptional = false;\n2674: int bestValidPos = position;\n2675: Object bestValidState = null;\n2677: int bestInvalidPos = position;\n2679: for (int i=0; i<length; i++) {\n2680: DateTimeParser parser = parsers[i];\n2681: if (parser == null) {\n2683: if (bestValidPos <= position) {\n2686: isOptional = true;\n2687: break;\n2689: int parsePos = parser.parseInto(bucket, text, position);\n2690: if (parsePos >= position) {\n2691: if (parsePos > bestValidPos) {\n2692: if (parsePos >= text.length() ||\n2697: return parsePos;\n2699: bestValidPos = parsePos;\n2700: bestValidState = bucket.saveState();\n2703: if (parsePos < 0) {\n2704: parsePos = ~parsePos;\n2705: if (parsePos > bestInvalidPos) {\n2706: bestInvalidPos = parsePos;\n2710: bucket.restoreState(originalState);\n2713: if (bestValidPos > position || (bestValidPos == position && isOptional)) {\n2715: if (bestValidState != null) {\n2716: bucket.restoreState(bestValidState);\n2718: return bestValidPos;\n2721: return ~bestInvalidPos;\n2722: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "288: public boolean restoreState(Object savedState) {\n289: if (savedState instanceof SavedState) {\n290: if (((SavedState) savedState).restoreState(this)) {\n291: iSavedState = savedState;\n292: return true;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "223: public void saveField(DateTimeField field, int value) {\n224: saveField(new SavedField(field, value));\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "418: SavedState() {\n419: this.iZone = DateTimeParserBucket.this.iZone;\n420: this.iOffset = DateTimeParserBucket.this.iOffset;\n421: this.iSavedFields = DateTimeParserBucket.this.iSavedFields;\n422: this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n423: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "145: public BaseDateTime(Object instant, DateTimeZone zone) {\n146: super();\n147: InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n148: Chronology chrono = checkChronology(converter.getChronology(instant, zone));\n149: iChronology = chrono;\n150: iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology getChronology() {\n133: return iChrono;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1693: public DateTime withMillisOfSecond(int millis) {\n1694: return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n1695: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1235: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1236: if (text.regionMatches(true, position, iValue, 0, iValue.length())) {\n1239: return ~position;\n1240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "47: public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n48: super(type);\n50: if (!unit.isPrecise()) {\n54: iUnitMillis = unit.getUnitMillis();\n55: if (iUnitMillis < 1) {\n59: iUnitField = unit;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2385: private int digitCount(String text, int position, int amount) {\n2386: int limit = Math.min(text.length() - position, amount);\n2387: amount = 0;\n2388: for (; limit > 0; limit--) {\n2389: char c = text.charAt(position + amount);\n2390: if (c < '0' || c > '9') {\n2393: amount++;\n2395: return amount;\n2396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "159: public InstantConverter getInstantConverter(Object object) {\n160: InstantConverter converter =\n162: if (converter != null) {\n163: return converter;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "218: public DateTime(Object instant, DateTimeZone zone) {\n219: super(instant, zone);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "273: public Object saveState() {\n274: if (iSavedState == null) {\n275: iSavedState = new SavedState();\n277: return iSavedState;\n278: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "62: public long getInstantMillis(Object object, Chronology chrono) {\n63: String str = (String) object;\n64: DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n65: return p.withChronology(chrono).parseMillis(str);\n66: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "55: public PreciseDateTimeField(DateTimeFieldType type,\n57: super(type, unit);\n59: if (!range.isPrecise()) {\n63: long rangeMillis = range.getUnitMillis();\n64: iRange = (int)(rangeMillis / getUnitMillis());\n65: if (iRange < 2) {\n69: iRangeField = range;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "66: public Chronology getChronology(Object object, DateTimeZone zone) {\n67: return ISOChronology.getInstance(zone);\n68: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n254: SavedField[] newArray = new SavedField\n256: System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n257: iSavedFields = savedFields = newArray;\n258: iSavedFieldsShared = false;\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1908: long[] fractionData = getFractionData(fraction, field);\n1909: long scaled = fractionData[0];\n1910: int maxDigits = (int) fractionData[1];\n1912: if ((scaled & 0x7fffffff) == scaled) {\n1913: str = Integer.toString((int) scaled);\n1918: int length = str.length();\n1919: int digits = maxDigits;\n1920: while (length < digits) {\n1930: if (minDigits < digits) {\n1932: while (minDigits < digits) {\n1933: if (length <= 1 || str.charAt(length - 1) != '0') {\n1936: digits--;\n1937: length--;\n1939: if (length < str.length()) {\n1940: if (buf != null) {\n1941: for (int i=0; i<length; i++) {\n1942: buf.append(str.charAt(i));\n1949: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1181: a = Character.toUpperCase(a);\n1182: b = Character.toUpperCase(b);\n1183: if (a != b) {\n1184: a = Character.toLowerCase(a);\n1185: b = Character.toLowerCase(b);\n1186: if (a != b) {\n1187: return ~position;\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter",
                            "test_body": "1125: public void testWithMillisOfSecondInDstChange_NewYork_winter() {\n1126: DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n1127: assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());\n1128: DateTime test = dateTime.withMillisOfSecond(0);\n1129: assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());\n1130: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "728: public long parseMillis(String text) {\n729: DateTimeParser parser = requireParser();\n731: Chronology chrono = selectChronology(iChrono);\n732: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n733: int newPos = parser.parseInto(bucket, text, 0);\n734: if (newPos >= 0) {\n735: if (newPos >= text.length()) {\n736: return bucket.computeMillis(true, text);\n742: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "765: public static DateTimeFormatter dateTimeParser() {\n766: if (dtp == null) {\n778: return dtp;\n779: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1960: private long[] getFractionData(long fraction, DateTimeField field) {\n1961: long rangeMillis = field.getDurationField().getUnitMillis();\n1963: int maxDigits = iMaxDigits;\n1965: switch (maxDigits) {\n1975: case 9:  scalar = 1000000000L; break;\n1986: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n1987: break;\n1993: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n1994: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2000: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2001: DateTimeField field = iFieldType.getField(bucket.getChronology());\n2003: int limit = Math.min(iMaxDigits, text.length() - position);\n2005: long value = 0;\n2006: long n = field.getDurationField().getUnitMillis() * 10;\n2007: int length = 0;\n2008: while (length < limit) {\n2009: char c = text.charAt(position + length);\n2010: if (c < '0' || c > '9') {\n2013: length++;\n2014: long nn = n / 10;\n2015: value += (c - '0') * nn;\n2016: n = nn;\n2017: }\n2019: value /= 10;\n2021: if (length == 0) {\n2025: if (value > Integer.MAX_VALUE) {\n2029: DateTimeField parseField = new PreciseDateTimeField(\n2034: bucket.saveField(parseField, (int) value);\n2036: return position + length;\n2037: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "425: boolean restoreState(DateTimeParserBucket enclosing) {\n426: if (enclosing != DateTimeParserBucket.this) {\n429: enclosing.iZone = this.iZone;\n430: enclosing.iOffset = this.iOffset;\n431: enclosing.iSavedFields = this.iSavedFields;\n432: if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n437: enclosing.iSavedFieldsShared = true;\n439: enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n440: return true;\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2210: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2211: int limit = text.length() - position;\n2214: if (iZeroOffsetParseText != null) {\n2215: if (iZeroOffsetParseText.length() == 0) {\n2226: if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n2234: if (limit <= 1) {\n2239: char c = text.charAt(position);\n2240: if (c == '-') {\n2241: negative = true;\n2242: } else if (c == '+') {\n2243: negative = false;\n2248: limit--;\n2249: position++;\n2263: if (digitCount(text, position, 2) < 2) {\n2270: int hours = FormatUtils.parseTwoDigits(text, position);\n2271: if (hours > 23) {\n2274: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2275: limit -= 2;\n2276: position += 2;\n2282: if (limit <= 0) {\n2287: c = text.charAt(position);\n2288: if (c == ':') {\n2289: expectSeparators = true;\n2290: limit--;\n2291: position++;\n2300: int count = digitCount(text, position, 2);\n2301: if (count == 0 && !expectSeparators) {\n2303: } else if (count < 2) {\n2308: int minutes = FormatUtils.parseTwoDigits(text, position);\n2309: if (minutes > 59) {\n2312: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2313: limit -= 2;\n2314: position += 2;\n2318: if (limit <= 0) {\n2319: break parse;\n2377: bucket.setOffset(negative ? -offset : offset);\n2378: return position;\n2379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "180: public void setOffset(int offset) {\n181: iSavedState = null;\n182: iOffset = offset;\n183: iZone = null;\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n335: iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n336: iSavedFieldsShared = false;\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i=0; i<count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2667: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2668: DateTimeParser[] parsers = iParsers;\n2669: int length = parsers.length;\n2671: final Object originalState = bucket.saveState();\n2672: boolean isOptional = false;\n2674: int bestValidPos = position;\n2675: Object bestValidState = null;\n2677: int bestInvalidPos = position;\n2679: for (int i=0; i<length; i++) {\n2680: DateTimeParser parser = parsers[i];\n2681: if (parser == null) {\n2683: if (bestValidPos <= position) {\n2686: isOptional = true;\n2687: break;\n2689: int parsePos = parser.parseInto(bucket, text, position);\n2690: if (parsePos >= position) {\n2691: if (parsePos > bestValidPos) {\n2692: if (parsePos >= text.length() ||\n2697: return parsePos;\n2699: bestValidPos = parsePos;\n2700: bestValidState = bucket.saveState();\n2703: if (parsePos < 0) {\n2704: parsePos = ~parsePos;\n2705: if (parsePos > bestInvalidPos) {\n2706: bestInvalidPos = parsePos;\n2710: bucket.restoreState(originalState);\n2713: if (bestValidPos > position || (bestValidPos == position && isOptional)) {\n2715: if (bestValidState != null) {\n2716: bucket.restoreState(bestValidState);\n2718: return bestValidPos;\n2721: return ~bestInvalidPos;\n2722: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "288: public boolean restoreState(Object savedState) {\n289: if (savedState instanceof SavedState) {\n290: if (((SavedState) savedState).restoreState(this)) {\n291: iSavedState = savedState;\n292: return true;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "223: public void saveField(DateTimeField field, int value) {\n224: saveField(new SavedField(field, value));\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "418: SavedState() {\n419: this.iZone = DateTimeParserBucket.this.iZone;\n420: this.iOffset = DateTimeParserBucket.this.iOffset;\n421: this.iSavedFields = DateTimeParserBucket.this.iSavedFields;\n422: this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n423: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "145: public BaseDateTime(Object instant, DateTimeZone zone) {\n146: super();\n147: InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n148: Chronology chrono = checkChronology(converter.getChronology(instant, zone));\n149: iChronology = chrono;\n150: iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology getChronology() {\n133: return iChrono;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1693: public DateTime withMillisOfSecond(int millis) {\n1694: return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n1695: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1235: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1236: if (text.regionMatches(true, position, iValue, 0, iValue.length())) {\n1239: return ~position;\n1240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "47: public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n48: super(type);\n50: if (!unit.isPrecise()) {\n54: iUnitMillis = unit.getUnitMillis();\n55: if (iUnitMillis < 1) {\n59: iUnitField = unit;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2385: private int digitCount(String text, int position, int amount) {\n2386: int limit = Math.min(text.length() - position, amount);\n2387: amount = 0;\n2388: for (; limit > 0; limit--) {\n2389: char c = text.charAt(position + amount);\n2390: if (c < '0' || c > '9') {\n2393: amount++;\n2395: return amount;\n2396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "159: public InstantConverter getInstantConverter(Object object) {\n160: InstantConverter converter =\n162: if (converter != null) {\n163: return converter;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "218: public DateTime(Object instant, DateTimeZone zone) {\n219: super(instant, zone);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "273: public Object saveState() {\n274: if (iSavedState == null) {\n275: iSavedState = new SavedState();\n277: return iSavedState;\n278: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "62: public long getInstantMillis(Object object, Chronology chrono) {\n63: String str = (String) object;\n64: DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n65: return p.withChronology(chrono).parseMillis(str);\n66: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "55: public PreciseDateTimeField(DateTimeFieldType type,\n57: super(type, unit);\n59: if (!range.isPrecise()) {\n63: long rangeMillis = range.getUnitMillis();\n64: iRange = (int)(rangeMillis / getUnitMillis());\n65: if (iRange < 2) {\n69: iRangeField = range;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "66: public Chronology getChronology(Object object, DateTimeZone zone) {\n67: return ISOChronology.getInstance(zone);\n68: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n254: SavedField[] newArray = new SavedField\n256: System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n257: iSavedFields = savedFields = newArray;\n258: iSavedFieldsShared = false;\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1908: long[] fractionData = getFractionData(fraction, field);\n1909: long scaled = fractionData[0];\n1910: int maxDigits = (int) fractionData[1];\n1912: if ((scaled & 0x7fffffff) == scaled) {\n1913: str = Integer.toString((int) scaled);\n1918: int length = str.length();\n1919: int digits = maxDigits;\n1920: while (length < digits) {\n1930: if (minDigits < digits) {\n1932: while (minDigits < digits) {\n1933: if (length <= 1 || str.charAt(length - 1) != '0') {\n1936: digits--;\n1937: length--;\n1939: if (length < str.length()) {\n1940: if (buf != null) {\n1941: for (int i=0; i<length; i++) {\n1942: buf.append(str.charAt(i));\n1949: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1181: a = Character.toUpperCase(a);\n1182: b = Character.toUpperCase(b);\n1183: if (a != b) {\n1184: a = Character.toLowerCase(a);\n1185: b = Character.toLowerCase(b);\n1186: if (a != b) {\n1187: return ~position;\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange",
                            "test_body": "1090: public void testWithMinuteOfHourInDstChange() {\n1091: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1092: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1093: DateTime test = dateTime.withMinuteOfHour(0);\n1094: assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());\n1095: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "728: public long parseMillis(String text) {\n729: DateTimeParser parser = requireParser();\n731: Chronology chrono = selectChronology(iChrono);\n732: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n733: int newPos = parser.parseInto(bucket, text, 0);\n734: if (newPos >= 0) {\n735: if (newPos >= text.length()) {\n736: return bucket.computeMillis(true, text);\n742: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "765: public static DateTimeFormatter dateTimeParser() {\n766: if (dtp == null) {\n778: return dtp;\n779: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1960: private long[] getFractionData(long fraction, DateTimeField field) {\n1961: long rangeMillis = field.getDurationField().getUnitMillis();\n1963: int maxDigits = iMaxDigits;\n1965: switch (maxDigits) {\n1975: case 9:  scalar = 1000000000L; break;\n1986: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n1987: break;\n1993: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n1994: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2000: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2001: DateTimeField field = iFieldType.getField(bucket.getChronology());\n2003: int limit = Math.min(iMaxDigits, text.length() - position);\n2005: long value = 0;\n2006: long n = field.getDurationField().getUnitMillis() * 10;\n2007: int length = 0;\n2008: while (length < limit) {\n2009: char c = text.charAt(position + length);\n2010: if (c < '0' || c > '9') {\n2013: length++;\n2014: long nn = n / 10;\n2015: value += (c - '0') * nn;\n2016: n = nn;\n2017: }\n2019: value /= 10;\n2021: if (length == 0) {\n2025: if (value > Integer.MAX_VALUE) {\n2029: DateTimeField parseField = new PreciseDateTimeField(\n2034: bucket.saveField(parseField, (int) value);\n2036: return position + length;\n2037: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "425: boolean restoreState(DateTimeParserBucket enclosing) {\n426: if (enclosing != DateTimeParserBucket.this) {\n429: enclosing.iZone = this.iZone;\n430: enclosing.iOffset = this.iOffset;\n431: enclosing.iSavedFields = this.iSavedFields;\n432: if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n437: enclosing.iSavedFieldsShared = true;\n439: enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n440: return true;\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2210: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2211: int limit = text.length() - position;\n2214: if (iZeroOffsetParseText != null) {\n2215: if (iZeroOffsetParseText.length() == 0) {\n2226: if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n2234: if (limit <= 1) {\n2239: char c = text.charAt(position);\n2240: if (c == '-') {\n2241: negative = true;\n2242: } else if (c == '+') {\n2243: negative = false;\n2248: limit--;\n2249: position++;\n2263: if (digitCount(text, position, 2) < 2) {\n2270: int hours = FormatUtils.parseTwoDigits(text, position);\n2271: if (hours > 23) {\n2274: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2275: limit -= 2;\n2276: position += 2;\n2282: if (limit <= 0) {\n2287: c = text.charAt(position);\n2288: if (c == ':') {\n2289: expectSeparators = true;\n2290: limit--;\n2291: position++;\n2300: int count = digitCount(text, position, 2);\n2301: if (count == 0 && !expectSeparators) {\n2303: } else if (count < 2) {\n2308: int minutes = FormatUtils.parseTwoDigits(text, position);\n2309: if (minutes > 59) {\n2312: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2313: limit -= 2;\n2314: position += 2;\n2318: if (limit <= 0) {\n2319: break parse;\n2377: bucket.setOffset(negative ? -offset : offset);\n2378: return position;\n2379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "180: public void setOffset(int offset) {\n181: iSavedState = null;\n182: iOffset = offset;\n183: iZone = null;\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n335: iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n336: iSavedFieldsShared = false;\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i=0; i<count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2667: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2668: DateTimeParser[] parsers = iParsers;\n2669: int length = parsers.length;\n2671: final Object originalState = bucket.saveState();\n2672: boolean isOptional = false;\n2674: int bestValidPos = position;\n2675: Object bestValidState = null;\n2677: int bestInvalidPos = position;\n2679: for (int i=0; i<length; i++) {\n2680: DateTimeParser parser = parsers[i];\n2681: if (parser == null) {\n2683: if (bestValidPos <= position) {\n2686: isOptional = true;\n2687: break;\n2689: int parsePos = parser.parseInto(bucket, text, position);\n2690: if (parsePos >= position) {\n2691: if (parsePos > bestValidPos) {\n2692: if (parsePos >= text.length() ||\n2697: return parsePos;\n2699: bestValidPos = parsePos;\n2700: bestValidState = bucket.saveState();\n2703: if (parsePos < 0) {\n2704: parsePos = ~parsePos;\n2705: if (parsePos > bestInvalidPos) {\n2706: bestInvalidPos = parsePos;\n2710: bucket.restoreState(originalState);\n2713: if (bestValidPos > position || (bestValidPos == position && isOptional)) {\n2715: if (bestValidState != null) {\n2716: bucket.restoreState(bestValidState);\n2718: return bestValidPos;\n2721: return ~bestInvalidPos;\n2722: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "288: public boolean restoreState(Object savedState) {\n289: if (savedState instanceof SavedState) {\n290: if (((SavedState) savedState).restoreState(this)) {\n291: iSavedState = savedState;\n292: return true;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "223: public void saveField(DateTimeField field, int value) {\n224: saveField(new SavedField(field, value));\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "418: SavedState() {\n419: this.iZone = DateTimeParserBucket.this.iZone;\n420: this.iOffset = DateTimeParserBucket.this.iOffset;\n421: this.iSavedFields = DateTimeParserBucket.this.iSavedFields;\n422: this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n423: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "145: public BaseDateTime(Object instant, DateTimeZone zone) {\n146: super();\n147: InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n148: Chronology chrono = checkChronology(converter.getChronology(instant, zone));\n149: iChronology = chrono;\n150: iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology getChronology() {\n133: return iChrono;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1235: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1236: if (text.regionMatches(true, position, iValue, 0, iValue.length())) {\n1239: return ~position;\n1240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "47: public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n48: super(type);\n50: if (!unit.isPrecise()) {\n54: iUnitMillis = unit.getUnitMillis();\n55: if (iUnitMillis < 1) {\n59: iUnitField = unit;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2385: private int digitCount(String text, int position, int amount) {\n2386: int limit = Math.min(text.length() - position, amount);\n2387: amount = 0;\n2388: for (; limit > 0; limit--) {\n2389: char c = text.charAt(position + amount);\n2390: if (c < '0' || c > '9') {\n2393: amount++;\n2395: return amount;\n2396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "159: public InstantConverter getInstantConverter(Object object) {\n160: InstantConverter converter =\n162: if (converter != null) {\n163: return converter;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "218: public DateTime(Object instant, DateTimeZone zone) {\n219: super(instant, zone);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "273: public Object saveState() {\n274: if (iSavedState == null) {\n275: iSavedState = new SavedState();\n277: return iSavedState;\n278: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "62: public long getInstantMillis(Object object, Chronology chrono) {\n63: String str = (String) object;\n64: DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n65: return p.withChronology(chrono).parseMillis(str);\n66: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "55: public PreciseDateTimeField(DateTimeFieldType type,\n57: super(type, unit);\n59: if (!range.isPrecise()) {\n63: long rangeMillis = range.getUnitMillis();\n64: iRange = (int)(rangeMillis / getUnitMillis());\n65: if (iRange < 2) {\n69: iRangeField = range;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "66: public Chronology getChronology(Object object, DateTimeZone zone) {\n67: return ISOChronology.getInstance(zone);\n68: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n254: SavedField[] newArray = new SavedField\n256: System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n257: iSavedFields = savedFields = newArray;\n258: iSavedFieldsShared = false;\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1908: long[] fractionData = getFractionData(fraction, field);\n1909: long scaled = fractionData[0];\n1910: int maxDigits = (int) fractionData[1];\n1912: if ((scaled & 0x7fffffff) == scaled) {\n1913: str = Integer.toString((int) scaled);\n1918: int length = str.length();\n1919: int digits = maxDigits;\n1920: while (length < digits) {\n1930: if (minDigits < digits) {\n1932: while (minDigits < digits) {\n1933: if (length <= 1 || str.charAt(length - 1) != '0') {\n1936: digits--;\n1937: length--;\n1939: if (length < str.length()) {\n1940: if (buf != null) {\n1941: for (int i=0; i<length; i++) {\n1942: buf.append(str.charAt(i));\n1949: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMinuteOfHour(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1661: public DateTime withMinuteOfHour(int minute) {\n1662: return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n1663: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1181: a = Character.toUpperCase(a);\n1182: b = Character.toUpperCase(b);\n1183: if (a != b) {\n1184: a = Character.toLowerCase(a);\n1185: b = Character.toLowerCase(b);\n1186: if (a != b) {\n1187: return ~position;\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange",
                            "test_body": "1083: public void testWithHourOfDayInDstChange() {\n1084: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1085: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1086: DateTime test = dateTime.withHourOfDay(2);\n1087: assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n1088: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "728: public long parseMillis(String text) {\n729: DateTimeParser parser = requireParser();\n731: Chronology chrono = selectChronology(iChrono);\n732: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n733: int newPos = parser.parseInto(bucket, text, 0);\n734: if (newPos >= 0) {\n735: if (newPos >= text.length()) {\n736: return bucket.computeMillis(true, text);\n742: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "765: public static DateTimeFormatter dateTimeParser() {\n766: if (dtp == null) {\n778: return dtp;\n779: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1960: private long[] getFractionData(long fraction, DateTimeField field) {\n1961: long rangeMillis = field.getDurationField().getUnitMillis();\n1963: int maxDigits = iMaxDigits;\n1965: switch (maxDigits) {\n1975: case 9:  scalar = 1000000000L; break;\n1986: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n1987: break;\n1993: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n1994: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2000: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2001: DateTimeField field = iFieldType.getField(bucket.getChronology());\n2003: int limit = Math.min(iMaxDigits, text.length() - position);\n2005: long value = 0;\n2006: long n = field.getDurationField().getUnitMillis() * 10;\n2007: int length = 0;\n2008: while (length < limit) {\n2009: char c = text.charAt(position + length);\n2010: if (c < '0' || c > '9') {\n2013: length++;\n2014: long nn = n / 10;\n2015: value += (c - '0') * nn;\n2016: n = nn;\n2017: }\n2019: value /= 10;\n2021: if (length == 0) {\n2025: if (value > Integer.MAX_VALUE) {\n2029: DateTimeField parseField = new PreciseDateTimeField(\n2034: bucket.saveField(parseField, (int) value);\n2036: return position + length;\n2037: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "425: boolean restoreState(DateTimeParserBucket enclosing) {\n426: if (enclosing != DateTimeParserBucket.this) {\n429: enclosing.iZone = this.iZone;\n430: enclosing.iOffset = this.iOffset;\n431: enclosing.iSavedFields = this.iSavedFields;\n432: if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n437: enclosing.iSavedFieldsShared = true;\n439: enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n440: return true;\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "775: public int getSaveMillis() {\n776: return iSaveMillis;\n777: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "716: private long setDayOfWeek(Chronology chrono, long instant) {\n717: int dayOfWeek = chrono.dayOfWeek().get(instant);\n718: int daysToAdd = iDayOfWeek - dayOfWeek;\n719: if (daysToAdd != 0) {\n720: if (iAdvance) {\n721: if (daysToAdd < 0) {\n725: if (daysToAdd > 0) {\n726: daysToAdd -= 7;\n729: instant = chrono.dayOfWeek().add(instant, daysToAdd);\n731: return instant;\n732: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2210: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2211: int limit = text.length() - position;\n2214: if (iZeroOffsetParseText != null) {\n2215: if (iZeroOffsetParseText.length() == 0) {\n2226: if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n2234: if (limit <= 1) {\n2239: char c = text.charAt(position);\n2240: if (c == '-') {\n2241: negative = true;\n2242: } else if (c == '+') {\n2243: negative = false;\n2248: limit--;\n2249: position++;\n2263: if (digitCount(text, position, 2) < 2) {\n2270: int hours = FormatUtils.parseTwoDigits(text, position);\n2271: if (hours > 23) {\n2274: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2275: limit -= 2;\n2276: position += 2;\n2282: if (limit <= 0) {\n2287: c = text.charAt(position);\n2288: if (c == ':') {\n2289: expectSeparators = true;\n2290: limit--;\n2291: position++;\n2300: int count = digitCount(text, position, 2);\n2301: if (count == 0 && !expectSeparators) {\n2303: } else if (count < 2) {\n2308: int minutes = FormatUtils.parseTwoDigits(text, position);\n2309: if (minutes > 59) {\n2312: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2313: limit -= 2;\n2314: position += 2;\n2318: if (limit <= 0) {\n2319: break parse;\n2377: bucket.setOffset(negative ? -offset : offset);\n2378: return position;\n2379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "180: public void setOffset(int offset) {\n181: iSavedState = null;\n182: iOffset = offset;\n183: iZone = null;\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "1198: public long nextTransition(long instant) {\n1199: int standardOffset = iStandardOffset;\n1200: Recurrence startRecurrence = iStartRecurrence;\n1201: Recurrence endRecurrence = iEndRecurrence;\n1206: start = startRecurrence.next\n1208: if (instant > 0 && start < 0) {\n1218: }\n1221: end = endRecurrence.next\n1223: if (instant > 0 && end < 0) {\n1233: }\n1235: return (start > end) ? end : start;\n1236: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n335: iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n336: iSavedFieldsShared = false;\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i=0; i<count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2667: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2668: DateTimeParser[] parsers = iParsers;\n2669: int length = parsers.length;\n2671: final Object originalState = bucket.saveState();\n2672: boolean isOptional = false;\n2674: int bestValidPos = position;\n2675: Object bestValidState = null;\n2677: int bestInvalidPos = position;\n2679: for (int i=0; i<length; i++) {\n2680: DateTimeParser parser = parsers[i];\n2681: if (parser == null) {\n2683: if (bestValidPos <= position) {\n2686: isOptional = true;\n2687: break;\n2689: int parsePos = parser.parseInto(bucket, text, position);\n2690: if (parsePos >= position) {\n2691: if (parsePos > bestValidPos) {\n2692: if (parsePos >= text.length() ||\n2697: return parsePos;\n2699: bestValidPos = parsePos;\n2700: bestValidState = bucket.saveState();\n2703: if (parsePos < 0) {\n2704: parsePos = ~parsePos;\n2705: if (parsePos > bestInvalidPos) {\n2706: bestInvalidPos = parsePos;\n2710: bucket.restoreState(originalState);\n2713: if (bestValidPos > position || (bestValidPos == position && isOptional)) {\n2715: if (bestValidState != null) {\n2716: bucket.restoreState(bestValidState);\n2718: return bestValidPos;\n2721: return ~bestInvalidPos;\n2722: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "530: int getDayOfWeek(long instant) {\n534: if (instant >= 0) {\n535: daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\n544: return 1 + (int) ((daysSince19700101 + 3) % 7);\n545: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "288: public boolean restoreState(Object savedState) {\n289: if (savedState instanceof SavedState) {\n290: if (((SavedState) savedState).restoreState(this)) {\n291: iSavedState = savedState;\n292: return true;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "223: public void saveField(DateTimeField field, int value) {\n224: saveField(new SavedField(field, value));\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1645: public DateTime withHourOfDay(int hour) {\n1646: return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n1647: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "418: SavedState() {\n419: this.iZone = DateTimeParserBucket.this.iZone;\n420: this.iOffset = DateTimeParserBucket.this.iOffset;\n421: this.iSavedFields = DateTimeParserBucket.this.iSavedFields;\n422: this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n423: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "145: public BaseDateTime(Object instant, DateTimeZone zone) {\n146: super();\n147: InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n148: Chronology chrono = checkChronology(converter.getChronology(instant, zone));\n149: iChronology = chrono;\n150: iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "81: public static long safeAdd(long val1, long val2) {\n82: long sum = val1 + val2;\n84: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n88: return sum;\n89: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "159: private Info createInfo(long millis) {\n160: long periodStart = millis & (0xffffffffL << 32);\n161: Info info = new Info(iZone, periodStart);\n163: long end = periodStart | 0xffffffffL;\n164: Info chain = info;\n166: long next = iZone.nextTransition(periodStart);\n167: if (next == periodStart || next > end) {\n168: break;\n170: periodStart = next;\n171: chain = (chain.iNextInfo = new Info(iZone, periodStart));\n172: }\n174: return info;\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology getChronology() {\n133: return iChrono;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "91: public long add(long instant, int months) {\n92: if (months == 0) {\n98: long timePart = iChronology.getMillisOfDay(instant);\n103: int thisYear = iChronology.getYear(instant);\n104: int thisMonth = iChronology.getMonthOfYear(instant, thisYear);\n112: int monthToUse = thisMonth - 1 + months;\n113: if (monthToUse >= 0) {\n114: yearToUse = thisYear + (monthToUse / iMax);\n115: monthToUse = (monthToUse % iMax) + 1;\n136: int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\n137: int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\n138: if (dayToUse > maxDay) {\n144: long datePart =\n146: return datePart + timePart;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1235: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1236: if (text.regionMatches(true, position, iValue, 0, iValue.length())) {\n1239: return ~position;\n1240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "76: public static ISOChronology getInstanceUTC() {\n77: return INSTANCE_UTC;\n78: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "116: public long add(long instant, int value) {\n117: return FieldUtils.safeAdd(instant, value);\n118: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "47: public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n48: super(type);\n50: if (!unit.isPrecise()) {\n54: iUnitMillis = unit.getUnitMillis();\n55: if (iUnitMillis < 1) {\n59: iUnitField = unit;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2385: private int digitCount(String text, int position, int amount) {\n2386: int limit = Math.min(text.length() - position, amount);\n2387: amount = 0;\n2388: for (; limit > 0; limit--) {\n2389: char c = text.charAt(position + amount);\n2390: if (c < '0' || c > '9') {\n2393: amount++;\n2395: return amount;\n2396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "159: public InstantConverter getInstantConverter(Object object) {\n160: InstantConverter converter =\n162: if (converter != null) {\n163: return converter;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "218: public DateTime(Object instant, DateTimeZone zone) {\n219: super(instant, zone);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "273: public Object saveState() {\n274: if (iSavedState == null) {\n275: iSavedState = new SavedState();\n277: return iSavedState;\n278: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "1186: public int getOffset(long instant) {\n1187: return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n1188: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "62: public long getInstantMillis(Object object, Chronology chrono) {\n63: String str = (String) object;\n64: DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n65: return p.withChronology(chrono).parseMillis(str);\n66: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "547: public long next(long instant, int standardOffset, int saveMillis) {\n549: if (iMode == 'w') {\n550: offset = standardOffset + saveMillis;\n551: } else if (iMode == 's') {\n554: offset = 0;\n558: instant += offset;\n560: Chronology chrono = ISOChronology.getInstanceUTC();\n561: long next = chrono.monthOfYear().set(instant, iMonthOfYear);\n563: next = chrono.millisOfDay().set(next, 0);\n564: next = chrono.millisOfDay().add(next, iMillisOfDay);\n565: next = setDayOfMonthNext(chrono, next);\n567: if (iDayOfWeek == 0) {\n573: next = setDayOfWeek(chrono, next);\n574: if (next <= instant) {\n575: next = chrono.year().add(next, 1);\n576: next = chrono.monthOfYear().set(next, iMonthOfYear);\n577: next = setDayOfMonthNext(chrono, next);\n578: next = setDayOfWeek(chrono, next);\n583: return next - offset;\n584: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "1303: private Recurrence findMatchingRecurrence(long instant) {\n1304: int standardOffset = iStandardOffset;\n1305: Recurrence startRecurrence = iStartRecurrence;\n1306: Recurrence endRecurrence = iEndRecurrence;\n1311: start = startRecurrence.next\n1319: }\n1322: end = endRecurrence.next\n1330: }\n1332: return (start > end) ? startRecurrence : endRecurrence;\n1333: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "55: public PreciseDateTimeField(DateTimeFieldType type,\n57: super(type, unit);\n59: if (!range.isPrecise()) {\n63: long rangeMillis = range.getUnitMillis();\n64: iRange = (int)(rangeMillis / getUnitMillis());\n65: if (iRange < 2) {\n69: iRangeField = range;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "103: public long add(long instant, int value) {\n104: long addition = value * iUnitMillis;  // safe\n105: return FieldUtils.safeAdd(instant, addition);\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "66: public Chronology getChronology(Object object, DateTimeZone zone) {\n67: return ISOChronology.getInstance(zone);\n68: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "252: public long add(long instant, int value) {\n253: return getDurationField().add(instant, value);\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "1527: public int getOffset(long instant) {\n1528: long[] transitions = iTransitions;\n1529: int i = Arrays.binarySearch(transitions, instant);\n1530: if (i >= 0) {\n1531: return iWallOffsets[i];\n1533: i = ~i;\n1534: if (i < transitions.length) {\n1535: if (i > 0) {\n1536: return iWallOffsets[i - 1];\n1540: if (iTailZone == null) {\n1543: return iTailZone.getOffset(instant);\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "188: Info(DateTimeZone zone, long periodStart) {\n189: iPeriodStart = periodStart;\n190: iZoneRef = zone;\n191: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "55: public int get(long instant) {\n56: return iChronology.getDayOfWeek(instant);\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n254: SavedField[] newArray = new SavedField\n256: System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n257: iSavedFields = savedFields = newArray;\n258: iSavedFieldsShared = false;\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1908: long[] fractionData = getFractionData(fraction, field);\n1909: long scaled = fractionData[0];\n1910: int maxDigits = (int) fractionData[1];\n1912: if ((scaled & 0x7fffffff) == scaled) {\n1913: str = Integer.toString((int) scaled);\n1918: int length = str.length();\n1919: int digits = maxDigits;\n1920: while (length < digits) {\n1930: if (minDigits < digits) {\n1932: while (minDigits < digits) {\n1933: if (length <= 1 || str.charAt(length - 1) != '0') {\n1936: digits--;\n1937: length--;\n1939: if (length < str.length()) {\n1940: if (buf != null) {\n1941: for (int i=0; i<length; i++) {\n1942: buf.append(str.charAt(i));\n1949: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "670: private long setDayOfMonthNext(Chronology chrono, long next) {\n672: next = setDayOfMonth(chrono, next);\n682: }\n683: return next;\n684: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "760: public long next(long instant, int standardOffset, int saveMillis) {\n761: return iOfYear.next(instant, standardOffset, saveMillis);\n762: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "57: public long add(long instant, int years) {\n58: if (years == 0) {\n61: int thisYear = get(instant);\n62: int newYear = FieldUtils.safeAdd(thisYear, years);\n63: return set(instant, newYear);\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1181: a = Character.toUpperCase(a);\n1182: b = Character.toUpperCase(b);\n1183: if (a != b) {\n1184: a = Character.toLowerCase(a);\n1185: b = Character.toLowerCase(b);\n1186: if (a != b) {\n1187: return ~position;\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange",
                            "test_body": "1097: public void testWithSecondOfMinuteInDstChange() {\n1098: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1099: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1100: DateTime test = dateTime.withSecondOfMinute(0);\n1101: assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n1102: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "450: SavedField(DateTimeField field, int value) {\n451: iField = field;\n452: iValue = value;\n453: iText = null;\n454: iLocale = null;\n455: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "728: public long parseMillis(String text) {\n729: DateTimeParser parser = requireParser();\n731: Chronology chrono = selectChronology(iChrono);\n732: DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n733: int newPos = parser.parseInto(bucket, text, 0);\n734: if (newPos >= 0) {\n735: if (newPos >= text.length()) {\n736: return bucket.computeMillis(true, text);\n742: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "765: public static DateTimeFormatter dateTimeParser() {\n766: if (dtp == null) {\n778: return dtp;\n779: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "1960: private long[] getFractionData(long fraction, DateTimeField field) {\n1961: long rangeMillis = field.getDurationField().getUnitMillis();\n1963: int maxDigits = iMaxDigits;\n1965: switch (maxDigits) {\n1975: case 9:  scalar = 1000000000L; break;\n1986: if (((rangeMillis * scalar) / scalar) == rangeMillis) {\n1987: break;\n1993: return new long[] {fraction * scalar / rangeMillis, maxDigits};\n1994: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2000: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2001: DateTimeField field = iFieldType.getField(bucket.getChronology());\n2003: int limit = Math.min(iMaxDigits, text.length() - position);\n2005: long value = 0;\n2006: long n = field.getDurationField().getUnitMillis() * 10;\n2007: int length = 0;\n2008: while (length < limit) {\n2009: char c = text.charAt(position + length);\n2010: if (c < '0' || c > '9') {\n2013: length++;\n2014: long nn = n / 10;\n2015: value += (c - '0') * nn;\n2016: n = nn;\n2017: }\n2019: value /= 10;\n2021: if (length == 0) {\n2025: if (value > Integer.MAX_VALUE) {\n2029: DateTimeField parseField = new PreciseDateTimeField(\n2034: bucket.saveField(parseField, (int) value);\n2036: return position + length;\n2037: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "493: static int compareReverse(DurationField a, DurationField b) {\n494: if (a == null || !a.isSupported()) {\n495: if (b == null || !b.isSupported()) {\n498: return -1;\n500: if (b == null || !b.isSupported()) {\n503: return -a.compareTo(b);\n504: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "425: boolean restoreState(DateTimeParserBucket enclosing) {\n426: if (enclosing != DateTimeParserBucket.this) {\n429: enclosing.iZone = this.iZone;\n430: enclosing.iOffset = this.iOffset;\n431: enclosing.iSavedFields = this.iSavedFields;\n432: if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\n437: enclosing.iSavedFieldsShared = true;\n439: enclosing.iSavedFieldsCount = this.iSavedFieldsCount;\n440: return true;\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "110: public int getOffset(long instant) {\n111: return getInfo(instant).getOffset(instant);\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2210: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2211: int limit = text.length() - position;\n2214: if (iZeroOffsetParseText != null) {\n2215: if (iZeroOffsetParseText.length() == 0) {\n2226: if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n2234: if (limit <= 1) {\n2239: char c = text.charAt(position);\n2240: if (c == '-') {\n2241: negative = true;\n2242: } else if (c == '+') {\n2243: negative = false;\n2248: limit--;\n2249: position++;\n2263: if (digitCount(text, position, 2) < 2) {\n2270: int hours = FormatUtils.parseTwoDigits(text, position);\n2271: if (hours > 23) {\n2274: offset = hours * DateTimeConstants.MILLIS_PER_HOUR;\n2275: limit -= 2;\n2276: position += 2;\n2282: if (limit <= 0) {\n2287: c = text.charAt(position);\n2288: if (c == ':') {\n2289: expectSeparators = true;\n2290: limit--;\n2291: position++;\n2300: int count = digitCount(text, position, 2);\n2301: if (count == 0 && !expectSeparators) {\n2303: } else if (count < 2) {\n2308: int minutes = FormatUtils.parseTwoDigits(text, position);\n2309: if (minutes > 59) {\n2312: offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2313: limit -= 2;\n2314: position += 2;\n2318: if (limit <= 0) {\n2319: break parse;\n2377: bucket.setOffset(negative ? -offset : offset);\n2378: return position;\n2379: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "180: public void setOffset(int offset) {\n181: iSavedState = null;\n182: iOffset = offset;\n183: iZone = null;\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "342: public long roundFloor(long instant) {\n343: int year = iChronology.getYear(instant);\n344: int month = iChronology.getMonthOfYear(instant, year);\n345: return iChronology.getYearMonthMillis(year, month);\n346: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "116: public DateTimeParserBucket(long instantLocal, Chronology chrono,\n118: super();\n119: chrono = DateTimeUtils.getChronology(chrono);\n120: iMillis = instantLocal;\n121: iChrono = chrono.withUTC();\n122: iLocale = (locale == null ? Locale.getDefault() : locale);\n123: setZone(chrono.getZone());\n124: iPivotYear = pivotYear;\n125: iDefaultYear = defaultYear;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "484: int getDayOfYear(long instant, int year) {\n485: long yearStart = getYearMillis(year);\n486: return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n487: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "331: public long computeMillis(boolean resetFields, String text) {\n332: SavedField[] savedFields = iSavedFields;\n333: int count = iSavedFieldsCount;\n334: if (iSavedFieldsShared) {\n335: iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n336: iSavedFieldsShared = false;\n338: sort(savedFields, count);\n339: if (count > 0) {\n341: DurationField months = DurationFieldType.months().getField(iChrono);\n342: DurationField days = DurationFieldType.days().getField(iChrono);\n343: DurationField first = savedFields[0].iField.getDurationField();\n344: if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n350: long millis = iMillis;\n352: for (int i=0; i<count; i++) {\n353: millis = savedFields[i].set(millis, resetFields);\n360: }\n362: if (iZone == null) {\n363: millis -= iOffset;\n377: return millis;\n378: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2667: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2668: DateTimeParser[] parsers = iParsers;\n2669: int length = parsers.length;\n2671: final Object originalState = bucket.saveState();\n2672: boolean isOptional = false;\n2674: int bestValidPos = position;\n2675: Object bestValidState = null;\n2677: int bestInvalidPos = position;\n2679: for (int i=0; i<length; i++) {\n2680: DateTimeParser parser = parsers[i];\n2681: if (parser == null) {\n2683: if (bestValidPos <= position) {\n2686: isOptional = true;\n2687: break;\n2689: int parsePos = parser.parseInto(bucket, text, position);\n2690: if (parsePos >= position) {\n2691: if (parsePos > bestValidPos) {\n2692: if (parsePos >= text.length() ||\n2697: return parsePos;\n2699: bestValidPos = parsePos;\n2700: bestValidState = bucket.saveState();\n2703: if (parsePos < 0) {\n2704: parsePos = ~parsePos;\n2705: if (parsePos > bestInvalidPos) {\n2706: bestInvalidPos = parsePos;\n2710: bucket.restoreState(originalState);\n2713: if (bestValidPos > position || (bestValidPos == position && isOptional)) {\n2715: if (bestValidState != null) {\n2716: bucket.restoreState(bestValidState);\n2718: return bestValidPos;\n2721: return ~bestInvalidPos;\n2722: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "288: public boolean restoreState(Object savedState) {\n289: if (savedState instanceof SavedState) {\n290: if (((SavedState) savedState).restoreState(this)) {\n291: iSavedState = savedState;\n292: return true;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "177: public static DurationFieldType months() {\n178: return MONTHS_TYPE;\n179: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "223: public void saveField(DateTimeField field, int value) {\n224: saveField(new SavedField(field, value));\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "464: long set(long millis, boolean reset) {\n465: if (iText == null) {\n466: millis = iField.set(millis, iValue);\n470: if (reset) {\n471: millis = iField.roundFloor(millis);\n473: return millis;\n474: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "161: public void setZone(DateTimeZone zone) {\n162: iSavedState = null;\n163: iZone = zone == DateTimeZone.UTC ? null : zone;\n164: iOffset = 0;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "203: public int getOffset(long millis) {\n204: if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\n205: if (iOffset == Integer.MIN_VALUE) {\n206: iOffset = iZoneRef.getOffset(iPeriodStart);\n208: return iOffset;\n210: return iNextInfo.getOffset(millis);\n211: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "418: SavedState() {\n419: this.iZone = DateTimeParserBucket.this.iZone;\n420: this.iOffset = DateTimeParserBucket.this.iOffset;\n421: this.iSavedFields = DateTimeParserBucket.this.iSavedFields;\n422: this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n423: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "263: public DurationField getField(Chronology chronology) {\n264: chronology = DateTimeUtils.getChronology(chronology);\n266: switch (iOrdinal) {\n276: return chronology.months();\n280: return chronology.days();\n295: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "145: public BaseDateTime(Object instant, DateTimeZone zone) {\n146: super();\n147: InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n148: Chronology chrono = checkChronology(converter.getChronology(instant, zone));\n149: iChronology = chrono;\n150: iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "2583: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n2584: DateTimeParser[] elements = iParsers;\n2585: if (elements == null) {\n2589: int len = elements.length;\n2590: for (int i=0; i<len && position >= 0; i++) {\n2591: position = elements[i].parseInto(bucket, text, position);\n2593: return position;\n2594: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "130: public int hashCode() {\n131: return iZone.hashCode();\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "550: int getMillisOfDay(long instant) {\n551: if (instant >= 0) {\n552: return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n557: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "150: public static DurationFieldType days() {\n151: return DAYS_TYPE;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology getChronology() {\n133: return iChrono;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "145: public int compareTo(DurationField otherField) {\n146: long otherMillis = otherField.getUnitMillis();\n147: long thisMillis = getUnitMillis();\n149: if (thisMillis == otherMillis) {\n152: if (thisMillis < otherMillis) {\n155: return 1;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "54: public int getMinimumValue() {\n55: return 1;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1235: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1236: if (text.regionMatches(true, position, iValue, 0, iValue.length())) {\n1239: return ~position;\n1240: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "457: int getDayOfMonth(long millis, int year) {\n458: int month = getMonthOfYear(millis, year);\n459: return getDayOfMonth(millis, year, month);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "291: public long set(long instant, int month) {\n292: FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n294: int thisYear = iChronology.getYear(instant);\n296: int thisDom = iChronology.getDayOfMonth(instant, thisYear);\n297: int maxDom = iChronology.getDaysInYearMonth(thisYear, month);\n298: if (thisDom > maxDom) {\n303: return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "121: private DateTimeFormatter(\n126: super();\n127: iPrinter = printer;\n128: iParser = parser;\n129: iLocale = locale;\n130: iOffsetParsed = offsetParsed;\n131: iChrono = chrono;\n132: iZone = zone;\n133: iPivotYear = pivotYear;\n134: iDefaultYear = defaultYear;\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "91: public long roundFloor(long instant) {\n92: if (instant >= 0) {\n93: return instant - instant % iUnitMillis;\n98: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "47: public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\n48: super(type);\n50: if (!unit.isPrecise()) {\n54: iUnitMillis = unit.getUnitMillis();\n55: if (iUnitMillis < 1) {\n59: iUnitField = unit;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "77: public long set(long instant, int value) {\n78: FieldUtils.verifyValueBounds(this, value, getMinimumValue(),\n80: return instant + (value - get(instant)) * iUnitMillis;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "398: private static void sort(SavedField[] array, int high) {\n399: if (high > 10) {\n402: for (int i=0; i<high; i++) {\n403: for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n410: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "254: public DateTimeFormatter withChronology(Chronology chrono) {\n255: if (iChrono == chrono) {\n258: return new DateTimeFormatter(iPrinter, iParser, iLocale,\n260: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "2385: private int digitCount(String text, int position, int amount) {\n2386: int limit = Math.min(text.length() - position, amount);\n2387: amount = 0;\n2388: for (; limit > 0; limit--) {\n2389: char c = text.charAt(position + amount);\n2390: if (c < '0' || c > '9') {\n2393: amount++;\n2395: return amount;\n2396: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "159: public InstantConverter getInstantConverter(Object object) {\n160: InstantConverter converter =\n162: if (converter != null) {\n163: return converter;\n167: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "218: public DateTime(Object instant, DateTimeZone zone) {\n219: super(instant, zone);\n220: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "899: private DateTimeParser requireParser() {\n900: DateTimeParser parser = iParser;\n901: if (parser == null) {\n904: return parser;\n905: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "273: public Object saveState() {\n274: if (iSavedState == null) {\n275: iSavedState = new SavedState();\n277: return iSavedState;\n278: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "370: long getYearMonthMillis(int year, int month) {\n371: long millis = getYearMillis(year);\n372: millis += getTotalMillisByYearMonth(year, month);\n373: return millis;\n374: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "62: public long getInstantMillis(Object object, Chronology chrono) {\n63: String str = (String) object;\n64: DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\n65: return p.withChronology(chrono).parseMillis(str);\n66: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "55: public PreciseDateTimeField(DateTimeFieldType type,\n57: super(type, unit);\n59: if (!range.isPrecise()) {\n63: long rangeMillis = range.getUnitMillis();\n64: iRange = (int)(rangeMillis / getUnitMillis());\n65: if (iRange < 2) {\n69: iRangeField = range;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "66: public Chronology getChronology(Object object, DateTimeZone zone) {\n67: return ISOChronology.getInstance(zone);\n68: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "122: public long roundFloor(long instant) {\n123: return iChronology.getYearMillis(get(instant));\n124: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "174: long setYear(long instant, int year) {\n175: int thisYear = getYear(instant);\n176: int dayOfYear = getDayOfYear(instant, thisYear);\n177: int millisOfDay = getMillisOfDay(instant);\n179: if (dayOfYear > (31 + 28)) { // after Feb 28\n180: if (isLeapYear(thisYear)) {\n182: if (!isLeapYear(year)) {\n184: dayOfYear--;\n188: if (isLeapYear(year)) {\n195: instant = getYearMonthDayMillis(year, 1, dayOfYear);\n196: instant += millisOfDay;\n198: return instant;\n199: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "147: private Info getInfo(long millis) {\n148: int period = (int)(millis >> 32);\n149: Info[] cache = iInfoCache;\n150: int index = period & cInfoCacheMask;\n151: Info info = cache[index];\n152: if (info == null || (int)((info.iPeriodStart >> 32)) != period) {\n153: info = createInfo(millis);\n154: cache[index] = info;\n156: return info;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "351: static int parseTwoDigits(String text, int position) {\n352: int value = text.charAt(position) - '0';\n353: return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n354: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "248: private void saveField(SavedField field) {\n249: SavedField[] savedFields = iSavedFields;\n250: int savedFieldsCount = iSavedFieldsCount;\n252: if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\n254: SavedField[] newArray = new SavedField\n256: System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\n257: iSavedFields = savedFields = newArray;\n258: iSavedFieldsShared = false;\n261: iSavedState = null;\n262: savedFields[savedFieldsCount] = field;\n263: iSavedFieldsCount = savedFieldsCount + 1;\n264: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "1876: protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n1879: DateTimeField field = iFieldType.getField(chrono);\n1880: int minDigits = iMinDigits;\n1884: fraction = field.remainder(instant);\n1892: }\n1894: if (fraction == 0) {\n1895: if (buf != null) {\n1896: while (--minDigits >= 0) {\n1897: buf.append('0');\n1904: return;\n1908: long[] fractionData = getFractionData(fraction, field);\n1909: long scaled = fractionData[0];\n1910: int maxDigits = (int) fractionData[1];\n1912: if ((scaled & 0x7fffffff) == scaled) {\n1913: str = Integer.toString((int) scaled);\n1918: int length = str.length();\n1919: int digits = maxDigits;\n1920: while (length < digits) {\n1930: if (minDigits < digits) {\n1932: while (minDigits < digits) {\n1933: if (length <= 1 || str.charAt(length - 1) != '0') {\n1936: digits--;\n1937: length--;\n1939: if (length < str.length()) {\n1940: if (buf != null) {\n1941: for (int i=0; i<length; i++) {\n1942: buf.append(str.charAt(i));\n1949: return;\n1958: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "481: public int compareTo(SavedField obj) {\n482: DateTimeField other = obj.iField;\n483: int result = compareReverse\n485: if (result != 0) {\n486: return result;\n490: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "133: int getDaysInMonthMaxForSet(long instant, int value) {\n134: return (value > 28 ? getDaysInMonthMax(instant) : 28);\n135: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withSecondOfMinute(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1677: public DateTime withSecondOfMinute(int second) {\n1678: return withMillis(getChronology().secondOfMinute().set(getMillis(), second));\n1679: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "233: public void saveField(DateTimeFieldType fieldType, int value) {\n234: saveField(new SavedField(fieldType.getField(iChrono), value));\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "95: protected int getMaximumValueForSet(long instant, int value) {\n96: return iChronology.getDaysInMonthMaxForSet(instant, value);\n97: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "53: public final boolean isPrecise() {\n54: return true;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1262: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1263: int limit = Math.min(iMaxParsedDigits, text.length() - position);\n1265: boolean negative = false;\n1266: int length = 0;\n1267: while (length < limit) {\n1268: char c = text.charAt(position + length);\n1269: if (length == 0 && (c == '-' || c == '+') && iSigned) {\n1289: if (c < '0' || c > '9') {\n1292: length++;\n1293: }\n1295: if (length == 0) {\n1300: if (length >= 9) {\n1305: int i = position;\n1306: if (negative) {\n1310: value = text.charAt(i++) - '0';\n1313: }\n1314: position += length;\n1315: while (i < position) {\n1316: value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\n1318: if (negative) {\n1323: bucket.saveField(iFieldType, value);\n1324: return position;\n1325: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "81: public long set(long instant, int year) {\n82: FieldUtils.verifyValueBounds\n84: return iChronology.setYear(instant, year);\n85: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "574: int getDaysInMonthMax(long instant) {\n575: int thisYear = getYear(instant);\n576: int thisMonth = getMonthOfYear(instant, thisYear);\n577: return getDaysInYearMonth(thisYear, thisMonth);\n578: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "1172: public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n1173: if (position >= text.length()) {\n1177: char a = text.charAt(position);\n1178: char b = iValue;\n1180: if (a != b) {\n1181: a = Character.toUpperCase(a);\n1182: b = Character.toUpperCase(b);\n1183: if (a != b) {\n1184: a = Character.toLowerCase(a);\n1185: b = Character.toLowerCase(b);\n1186: if (a != b) {\n1187: return ~position;\n1192: return position + 1;\n1193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "70: public final boolean isPrecise() {\n71: return true;\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone",
                            "test_body": "1063: public void testWithMinuteOfHourInDstChange_mockZone() {\n1064: DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n1065: assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\n1066: DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n1067: DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n1068: assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\n1069: DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n1070: assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n1071: 1072: DateTime testPre1 = pre.withMinuteOfHour(30);\n1073: assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\n1074: DateTime testPre2 = pre.withMinuteOfHour(50);\n1075: assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());\n1076: 1077: DateTime testPost1 = post.withMinuteOfHour(30);\n1078: assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());  // retain offset\n1079: DateTime testPost2 = post.withMinuteOfHour(10);\n1080: assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());\n1081: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "159: public long getUnitMillis() {\n160: return iUnitMillis;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "195: public final DateTimeField hourOfDay() {\n196: return iHourOfDay;\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "405: public int get(long instant) {\n406: long localInstant = iZone.convertUTCToLocal(instant);\n407: return iField.get(localInstant);\n408: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "187: public final DateTimeField minuteOfDay() {\n188: return iMinuteOfDay;\n189: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "393: int getYear(long instant) {\n399: long unitMillis = getAverageMillisPerYearDividedByTwo();\n400: long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\n401: if (i2 < 0) {\n404: int year = (int) (i2 / unitMillis);\n406: long yearStart = getYearMillis(year);\n407: long diff = instant - yearStart;\n409: if (diff < 0) {\n411: } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\n428: return year;\n429: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "876: public int getOffsetFromLocal(long instantLocal) {\n878: int offsetLocal = getOffset(instantLocal);\n880: int offsetAdjusted = getOffset(instantLocal - offsetLocal);\n882: if (offsetLocal != offsetAdjusted) {\n885: if ((offsetLocal - offsetAdjusted) < 0) {\n889: long nextLocal = nextTransition(instantLocal - offsetLocal);\n890: long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n891: if (nextLocal != nextAdjusted) {\n896: return offsetAdjusted;\n897: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "688: protected DateTimeZone(String id) {\n689: if (id == null) {\n692: iID = id;\n693: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "56: public int getOffsetFromLocal(long instantLocal) {\n57: return iWallOffset;\n58: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "46: protected BaseDurationField(DurationFieldType type) {\n47: super();\n48: if (type == null) {\n51: iType = type;\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "267: public final DateTimeField year() {\n268: return iYear;\n269: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "79: public final long getUnitMillis() {\n80: return 1;\n81: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "442: abstract int getMonthOfYear(long millis, int year);\n448: int year = getYear(millis);\n449: int month = getMonthOfYear(millis, year);\n450: return getDayOfMonth(millis, year, month);\n451: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "175: public final DateTimeField secondOfDay() {\n176: return iSecondOfDay;\n177: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "78: public int get(long instant) {\n79: if (instant >= 0) {\n80: return (int) ((instant / getUnitMillis()) % iRange);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "60: protected AbstractInstant() {\n61: super();\n62: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "699: abstract long getAverageMillisPerYear();\n738: YearInfo info = iYearInfoCache[year & CACHE_MASK];\n739: if (info == null || info.iYear != year) {\n743: return info;\n744: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "101: public int hashCode() {\n102: return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "61: public boolean isSupported() {\n62: return true;\n63: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "207: public DurationField getRangeDurationField() {\n208: return null;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "467: int getDayOfMonth(long millis, int year, int month) {\n468: long dateMillis = getYearMillis(year);\n469: dateMillis += getTotalMillisByYearMonth(year, month);\n470: return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n471: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "149: public int getMinimumValue() {\n150: return 0;\n151: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "704: public final String getID() {\n705: return iID;\n706: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "136: public final DurationField getDurationField() {\n137: return iDurationField;\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "216: public static DateTimeFieldType hourOfDay() {\n217: return HOUR_OF_DAY_TYPE;\n218: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "232: long getAverageMillisPerYearDividedByTwo() {\n233: return MILLIS_PER_YEAR / 2;\n234: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "99: protected AssembledChronology(Chronology base, Object param) {\n100: iBase = base;\n101: iParam = param;\n102: setFields();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "253: public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n254: if (hoursOffset == 0 && minutesOffset == 0) {\n257: if (minutesOffset < 0 || minutesOffset > 59) {\n260: int offset = 0;\n262: int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n263: if (hoursInMinutes < 0) {\n266: minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n268: offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n271: }\n272: return forOffsetMillis(offset);\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "259: public final DateTimeField monthOfYear() {\n260: return iMonthOfYear;\n261: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "287: public final DurationField eras() {\n288: return iEras;\n289: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "659: public DurationField eras() {\n660: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "2503: public int estimatePrintedLength() {\n2504: return iPrintedLengthEstimate;\n2505: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "121: public DurationField getRangeDurationField() {\n122: return iRangeField;\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "125: public long remainder(long instant) {\n126: if (instant >= 0) {\n127: return instant % iUnitMillis;\n131: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "140: public DurationField getDurationField() {\n141: return iUnitField;\n142: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "561: private static boolean isSupported(DateTimeField field) {\n562: return field == null ? false : field.isSupported();\n563: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "303: public Chronology getChronology() {\n304: return iChronology;\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "235: public final DurationField weeks() {\n236: return iWeeks;\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "168: protected void assemble(Fields fields) {\n169: if (getBase().getZone() == DateTimeZone.UTC) {\n180: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n255: return chrono;\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "180: public static DateTimeFieldType secondOfMinute() {\n181: return SECOND_OF_MINUTE_TYPE;\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "220: int getMinYear() {\n221: return MIN_YEAR;\n222: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "231: public final DateTimeField dayOfYear() {\n232: return iDayOfYear;\n233: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "275: public final DateTimeField yearOfCentury() {\n276: return iYearOfCentury;\n277: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "191: public final DurationField hours() {\n192: return iHours;\n193: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "203: public final DurationField halfdays() {\n204: return iHalfdays;\n205: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "62: public final long getUnitMillis() {\n63: return iUnitMillis;\n64: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "48: public DurationFieldType getType() {\n49: return DurationFieldType.millis();\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "283: ZonedDurationField(DurationField field, DateTimeZone zone) {\n284: super(field.getType());\n285: if (!field.isSupported()) {\n288: iField = field;\n289: iTimeField = useTimeArithmetic(field);\n290: iZone = zone;\n291: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "204: public static DurationFieldType eras() {\n205: return ERAS_TYPE;\n206: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "146: public int hashCode() {\n147: long scalar = iScalar;\n148: int hash = (int) (scalar ^ (scalar >>> 32));\n149: hash += getType().hashCode();\n150: hash += getWrappedField().hashCode();\n151: return hash;\n152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1404: public void printTo(\n1408: DateTimeField field = iFieldType.getField(chrono);\n1409: FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n1412: }\n1413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "91: public boolean isSupported() {\n92: return false;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "935: public static DateTimeFormatter dateTime() {\n936: if (dt == null) {\n942: return dt;\n943: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "279: public final DurationField centuries() {\n280: return iCenturies;\n281: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n104: synchronized (cCache) {\n105: chrono = cCache.get(zone);\n106: if (chrono == null) {\n107: chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\n108: cCache.put(zone, chrono);\n110: }\n111: cFastCache[index] = chrono;\n112: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "949: public long convertLocalToUTC(long instantLocal, boolean strict) {\n960: // determine if we are in the DST gap\n962: if (nextLocal == (instantLocal - offsetLocal)) {\n964: }\n992: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "464: public long set(long instant, int value) {\n465: long localInstant = iZone.convertUTCToLocal(instant);\n466: localInstant = iField.set(localInstant, value);\n467: long result = iZone.convertLocalToUTC(localInstant, false);\n468: if (get(result) != value) {\n474: return result;\n475: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "654: private DateTimePrinter requirePrinter() {\n655: DateTimePrinter printer = iPrinter;\n656: if (printer == null) {\n659: return printer;\n660: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "55: public DurationField getRangeDurationField() {\n56: return iChronology.years();\n57: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "100: public DurationField getLeapDurationField() {\n101: return getWrappedField().getLeapDurationField();\n102: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "316: public static DateTimeFieldType monthOfYear() {\n317: return MONTH_OF_YEAR_TYPE;\n318: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "215: public final DateTimeField halfdayOfDay() {\n216: return iHalfdayOfDay;\n217: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "460: public DateTimeField getField(Chronology chronology) {\n461: chronology = DateTimeUtils.getChronology(chronology);\n463: switch (iOrdinal) {\n473: return chronology.year();\n475: return chronology.dayOfYear();\n477: return chronology.monthOfYear();\n479: return chronology.dayOfMonth();\n483: return chronology.weekyear();\n497: return chronology.hourOfDay();\n501: return chronology.minuteOfHour();\n503: return chronology.secondOfDay();\n505: return chronology.secondOfMinute();\n514: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "434: int getMonthOfYear(long millis) {\n435: return getMonthOfYear(millis, getYear(millis));\n436: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "359: long getYearMillis(int year) {\n360: return getYearInfo(year).iFirstDayMillis;\n361: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "81: private ZonedChronology(Chronology base, DateTimeZone zone) {\n82: super(base, zone);\n83: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "123: public BaseDateTime(long instant, Chronology chronology) {\n124: super();\n125: iChronology = checkChronology(chronology);\n126: iMillis = checkInstant(instant, iChronology);\n127: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public DurationField getLeapDurationField() {\n220: return iChronology.weeks();\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "348: private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n349: if (offset == 0) {\n352: if (iFixedOffsetCache == null) {\n356: Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);\n357: if (ref != null) {\n358: zone = ref.get();\n359: if (zone != null) {\n360: return zone;\n363: zone = new FixedDateTimeZone(id, null, offset, offset);\n364: iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\n365: return zone;\n366: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "615: private void printTo(StringBuffer buf, long instant, Chronology chrono) {\n616: DateTimePrinter printer = requirePrinter();\n617: chrono = selectChronology(chrono);\n620: DateTimeZone zone = chrono.getZone();\n621: int offset = zone.getOffset(instant);\n622: long adjustedInstant = instant + offset;\n623: if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n629: printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n630: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "442: public void copyFieldsFrom(Chronology chrono) {\n445: if (isSupported(f = chrono.millis())) {\n446: millis = f;\n448: if (isSupported(f = chrono.seconds())) {\n449: seconds = f;\n451: if (isSupported(f = chrono.minutes())) {\n452: minutes = f;\n454: if (isSupported(f = chrono.hours())) {\n455: hours = f;\n457: if (isSupported(f = chrono.halfdays())) {\n458: halfdays = f;\n460: if (isSupported(f = chrono.days())) {\n461: days = f;\n463: if (isSupported(f = chrono.weeks())) {\n464: weeks = f;\n466: if (isSupported(f = chrono.weekyears())) {\n467: weekyears = f;\n469: if (isSupported(f = chrono.months())) {\n470: months = f;\n472: if (isSupported(f = chrono.years())) {\n473: years = f;\n475: if (isSupported(f = chrono.centuries())) {\n476: centuries = f;\n478: if (isSupported(f = chrono.eras())) {\n485: if (isSupported(f = chrono.millisOfSecond())) {\n486: millisOfSecond = f;\n488: if (isSupported(f = chrono.millisOfDay())) {\n489: millisOfDay = f;\n491: if (isSupported(f = chrono.secondOfMinute())) {\n492: secondOfMinute = f;\n494: if (isSupported(f = chrono.secondOfDay())) {\n495: secondOfDay = f;\n497: if (isSupported(f = chrono.minuteOfHour())) {\n498: minuteOfHour = f;\n500: if (isSupported(f = chrono.minuteOfDay())) {\n501: minuteOfDay = f;\n503: if (isSupported(f = chrono.hourOfDay())) {\n504: hourOfDay = f;\n506: if (isSupported(f = chrono.clockhourOfDay())) {\n507: clockhourOfDay = f;\n509: if (isSupported(f = chrono.hourOfHalfday())) {\n510: hourOfHalfday = f;\n512: if (isSupported(f = chrono.clockhourOfHalfday())) {\n513: clockhourOfHalfday = f;\n515: if (isSupported(f = chrono.halfdayOfDay())) {\n516: halfdayOfDay = f;\n518: if (isSupported(f = chrono.dayOfWeek())) {\n519: dayOfWeek = f;\n521: if (isSupported(f = chrono.dayOfMonth())) {\n522: dayOfMonth = f;\n524: if (isSupported(f = chrono.dayOfYear())) {\n525: dayOfYear = f;\n527: if (isSupported(f = chrono.weekOfWeekyear())) {\n528: weekOfWeekyear = f;\n530: if (isSupported(f = chrono.weekyear())) {\n531: weekyear = f;\n533: if (isSupported(f = chrono.weekyearOfCentury())) {\n534: weekyearOfCentury = f;\n536: if (isSupported(f = chrono.monthOfYear())) {\n537: monthOfYear = f;\n539: if (isSupported(f = chrono.year())) {\n540: year = f;\n542: if (isSupported(f = chrono.yearOfEra())) {\n543: yearOfEra = f;\n545: if (isSupported(f = chrono.yearOfCentury())) {\n546: yearOfCentury = f;\n548: if (isSupported(f = chrono.centuryOfEra())) {\n549: centuryOfEra = f;\n551: if (isSupported(f = chrono.era())) {\n552: era = f;\n555: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "145: public static final long getInstantMillis(ReadableInstant instant) {\n146: if (instant == null) {\n149: return instant.getMillis();\n150: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "212: public static void verifyValueBounds(DateTimeField field,\n214: if ((value < lowerBound) || (value > upperBound)) {\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "85: public DurationField getDurationField() {\n86: return iField.getDurationField();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "302: protected abstract void assemble(Fields fields);\n308: return iBase;\n309: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "281: public static DateTimeZone forOffsetMillis(int millisOffset) {\n282: String id = printOffset(millisOffset);\n283: return fixedOffsetZone(id, millisOffset);\n284: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "138: public DurationField getRangeDurationField() {\n139: return iRangeField;\n140: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "167: public final DurationField seconds() {\n168: return iSeconds;\n169: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "271: public static DateTimeFieldType dayOfMonth() {\n272: return DAY_OF_MONTH_TYPE;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "49: protected BaseDateTimeField(DateTimeFieldType type) {\n50: super();\n51: if (type == null) {\n54: iType = type;\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "602: long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\n603: FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n604: FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\n605: FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\n606: return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n607: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "93: public DurationField getRangeDurationField() {\n94: return iChronology.weeks();\n95: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "54: public final DurationFieldType getType() {\n55: return iType;\n56: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "63: public static int safeAdd(int val1, int val2) {\n64: int sum = val1 + val2;\n66: if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n70: return sum;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "247: public final DateTimeField weekyear() {\n248: return iWeekyear;\n249: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "271: public final DateTimeField yearOfEra() {\n272: return iYearOfEra;\n273: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "217: public long getUnitMillis() {\n218: return 0;\n219: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "159: public final DateTimeField millisOfSecond() {\n160: return iMillisOfSecond;\n161: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "230: public static void verifyValueBounds(DateTimeFieldType fieldType,\n232: if ((value < lowerBound) || (value > upperBound)) {\n237: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\n212: if (field == null || !field.isSupported()) {\n215: if (converted.containsKey(field)) {\n218: ZonedDateTimeField zonedField =\n223: converted.put(field, zonedField);\n224: return zonedField;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2507: public void printTo(\n2510: DateTimePrinter[] elements = iPrinters;\n2511: if (elements == null) {\n2515: if (locale == null) {\n2517: locale = Locale.getDefault();\n2520: int len = elements.length;\n2521: for (int i = 0; i < len; i++) {\n2522: elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n2524: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "269: protected Chronology checkChronology(Chronology chronology) {\n270: return DateTimeUtils.getChronology(chronology);\n271: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "53: protected BaseChronology() {\n54: super();\n55: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "71: public int get(long instant) {\n72: return iChronology.getMonthOfYear(instant);\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "69: static boolean useTimeArithmetic(DurationField field) {\n72: return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n73: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "725: public DurationField getLeapDurationField() {\n726: return null;\n727: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "181: public DurationField getDurationField() {\n182: return iDurationField;\n183: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "171: public final DateTimeField secondOfMinute() {\n172: return iSecondOfMinute;\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "278: public DateTime(\n285: super(year, monthOfYear, dayOfMonth,\n287: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "125: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n131: if ((base = iBase) != null && (iBaseFlags & 5) == 5) {\n133: return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n138: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "183: public final DateTimeField minuteOfHour() {\n184: return iMinuteOfHour;\n185: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "456: public void printTo(StringBuffer buf, ReadableInstant instant) {\n457: long millis = DateTimeUtils.getInstantMillis(instant);\n458: Chronology chrono = DateTimeUtils.getInstantChronology(instant);\n459: printTo(buf, millis, chrono);\n460: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "155: public final DurationField millis() {\n156: return iMillis;\n157: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "199: private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\n200: if (field == null || !field.isSupported()) {\n201: return field;\n203: if (converted.containsKey(field)) {\n204: return (DurationField)converted.get(field);\n206: ZonedDurationField zonedField = new ZonedDurationField(field, getZone());\n207: converted.put(field, zonedField);\n208: return zonedField;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "224: int getMaxYear() {\n225: return MAX_YEAR;\n226: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "327: public DurationField getLeapDurationField() {\n328: return iChronology.days();\n329: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "240: long getApproxMillisAtEpochDividedByTwo() {\n241: return (1970L * MILLIS_PER_YEAR) / 2;\n242: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "629: private static String printOffset(int offset) {\n630: StringBuffer buf = new StringBuffer();\n631: if (offset >= 0) {\n632: buf.append('+');\n638: int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n639: FormatUtils.appendPaddedInteger(buf, hours, 2);\n640: offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n642: int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n643: buf.append(':');\n644: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n645: offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n646: if (offset == 0) {\n647: return buf.toString();\n661: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "291: public final DateTimeField era() {\n292: return iEra;\n293: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "49: public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\n50: if (value < 0) {\n62: if (value < 10) {\n63: for (; size > 1; size--) {\n64: buf.append('0');\n66: buf.append((char)(value + '0'));\n67: } else if (value < 100) {\n68: for (; size > 2; size--) {\n74: int d = ((value + 1) * 13421772) >> 27;\n75: buf.append((char) (d + '0'));\n77: buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n78: } else {\n80: if (value < 1000) {\n82: } else if (value < 10000) {\n83: digits = 4;\n87: for (; size > digits; size--) {\n90: buf.append(Integer.toString(value));\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1148: public void printTo(\n1151: buf.append(iValue);\n1152: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "207: public final DateTimeField hourOfHalfday() {\n208: return iHourOfHalfday;\n209: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "130: public DurationField getRangeDurationField() {\n131: return null;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "423: public String toString() {\n424: return ISODateTimeFormat.dateTime().print(this);\n425: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "121: private ISOChronology(Chronology base) {\n122: super(base, null);\n123: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "283: protected long checkInstant(long instant, Chronology chronology) {\n284: return instant;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "196: boolean isLeapYear(int year) {\n197: return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "255: public final DurationField months() {\n256: return iMonths;\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "48: public int getOffset(long instant) {\n49: return iWallOffset;\n50: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "239: public final DateTimeField weekOfWeekyear() {\n240: return iWeekOfWeekyear;\n241: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "173: public DateTime(long instant, Chronology chronology) {\n174: super(instant, chronology);\n175: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "108: public long getUnitMillis() {\n109: return getWrappedField().getUnitMillis() * iScalar;\n110: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "297: public long getUnitMillis() {\n298: return iField.getUnitMillis();\n299: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "65: public final boolean isSupported() {\n66: return true;\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "251: public final DateTimeField weekyearOfCentury() {\n252: return iWeekyearOfCentury;\n253: }"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "36: public FixedDateTimeZone(String id, String nameKey,\n38: super(id);\n39: iNameKey = nameKey;\n40: iWallOffset = wallOffset;\n41: iStandardOffset = standardOffset;\n42: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "243: public BaseDateTime(\n252: super();\n253: iChronology = checkChronology(chronology);\n254: long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n256: iMillis = checkInstant(instant, iChronology);\n257: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "214: public BaseDateTime(\n223: this(year, monthOfYear, dayOfMonth, hourOfDay,\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "150: protected void assemble(Fields fields) {\n153: HashMap<Object, Object> converted = new HashMap<Object, Object>();\n157: fields.eras = convertField(fields.eras, converted);\n158: fields.centuries = convertField(fields.centuries, converted);\n159: fields.years = convertField(fields.years, converted);\n160: fields.months = convertField(fields.months, converted);\n161: fields.weekyears = convertField(fields.weekyears, converted);\n162: fields.weeks = convertField(fields.weeks, converted);\n163: fields.days = convertField(fields.days, converted);\n165: fields.halfdays = convertField(fields.halfdays, converted);\n166: fields.hours = convertField(fields.hours, converted);\n167: fields.minutes = convertField(fields.minutes, converted);\n168: fields.seconds = convertField(fields.seconds, converted);\n169: fields.millis = convertField(fields.millis, converted);\n173: fields.year = convertField(fields.year, converted);\n174: fields.yearOfEra = convertField(fields.yearOfEra, converted);\n175: fields.yearOfCentury = convertField(fields.yearOfCentury, converted);\n176: fields.centuryOfEra = convertField(fields.centuryOfEra, converted);\n177: fields.era = convertField(fields.era, converted);\n178: fields.dayOfWeek = convertField(fields.dayOfWeek, converted);\n179: fields.dayOfMonth = convertField(fields.dayOfMonth, converted);\n180: fields.dayOfYear = convertField(fields.dayOfYear, converted);\n181: fields.monthOfYear = convertField(fields.monthOfYear, converted);\n182: fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n183: fields.weekyear = convertField(fields.weekyear, converted);\n184: fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n186: fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n187: fields.millisOfDay = convertField(fields.millisOfDay, converted);\n188: fields.secondOfMinute = convertField(fields.secondOfMinute, converted);\n189: fields.secondOfDay = convertField(fields.secondOfDay, converted);\n190: fields.minuteOfHour = convertField(fields.minuteOfHour, converted);\n191: fields.minuteOfDay = convertField(fields.minuteOfDay, converted);\n192: fields.hourOfDay = convertField(fields.hourOfDay, converted);\n193: fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\n194: fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\n195: fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\n196: fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n197: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "219: public final DurationField days() {\n220: return iDays;\n221: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "68: public final boolean isSupported() {\n69: return true;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "557: private static boolean isSupported(DurationField field) {\n558: return field == null ? false : field.isSupported();\n559: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "223: public final DateTimeField dayOfWeek() {\n224: return iDayOfWeek;\n225: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "199: public final DateTimeField clockhourOfDay() {\n200: return iClockhourOfDay;\n201: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "914: private Chronology selectChronology(Chronology chrono) {\n915: chrono = DateTimeUtils.getChronology(chrono);\n916: if (iChrono != null) {\n917: chrono = iChrono;\n919: if (iZone != null) {\n922: return chrono;\n923: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "50: protected AbstractDateTime() {\n51: super();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "130: public int getMaximumValue() {\n131: return iRange - 1;\n132: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "110: public DurationField getLeapDurationField() {\n111: return iChronology.days();\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "1842: public void printTo(\n1846: printTo(buf, null, instant, chrono);\n1849: }\n1850: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "69: public final DateTimeField getWrappedField() {\n70: return iField;\n71: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "163: public final DateTimeField millisOfDay() {\n164: return iMillisOfDay;\n165: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "2080: public void printTo(\n2083: if (displayZone == null) {\n2086: if (displayOffset == 0 && iZeroOffsetPrintText != null) {\n2090: if (displayOffset >= 0) {\n2091: buf.append('+');\n2093: buf.append('-');\n2094: displayOffset = -displayOffset;\n2097: int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\n2098: FormatUtils.appendPaddedInteger(buf, hours, 2);\n2099: if (iMaxFields == 1) {\n2102: displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\n2103: if (displayOffset == 0 && iMinFields <= 1) {\n2107: int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\n2108: if (iShowSeparators) {\n2109: buf.append(':');\n2111: FormatUtils.appendPaddedInteger(buf, minutes, 2);\n2112: if (iMaxFields == 2) {\n2115: displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n2116: if (displayOffset == 0 && iMinFields <= 2) {\n2117: return;\n2137: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "46: public int get(long instant) {\n47: return iChronology.getDayOfMonth(instant);\n48: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "179: public final DurationField minutes() {\n180: return iMinutes;\n181: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "138: private long localToUTC(long instant) {\n139: DateTimeZone zone = getZone();\n140: int offset = zone.getOffsetFromLocal(instant);\n141: instant -= offset;\n142: if (offset != zone.getOffset(instant)) {\n147: return instant;\n148: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "132: public Chronology withUTC() {\n133: return INSTANCE_UTC;\n134: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMinuteOfHour(I)Lorg/joda/time/DateTime;",
                                    "method_body": "1661: public DateTime withMinuteOfHour(int minute) {\n1662: return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n1663: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "162: public static DateTimeFieldType millisOfSecond() {\n163: return MILLIS_OF_SECOND_TYPE;\n164: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "163: public static final Chronology getInstantChronology(ReadableInstant instant) {\n164: if (instant == null) {\n167: Chronology chrono = instant.getChronology();\n168: if (chrono == null) {\n171: return chrono;\n172: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "68: public final DurationField getWrappedField() {\n69: return iField;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "283: public final DateTimeField centuryOfEra() {\n284: return iCenturyOfEra;\n285: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "55: public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\n56: if (base == null) {\n59: base = base.withUTC();\n60: if (base == null) {\n63: if (zone == null) {\n66: return new ZonedChronology(base, zone);\n67: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "118: public static int safeMultiply(int val1, int val2) {\n119: long total = (long) val1 * (long) val2;\n120: if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n124: return (int) total;\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "138: long getTotalMillisByYearMonth(int year, int month) {\n139: if (isLeapYear(year)) {\n140: return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n142: return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n144: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "94: public DurationField getRangeDurationField() {\n95: return null;\n96: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "153: public final long getUnitMillis() {\n154: return iUnitMillis;\n155: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "384: long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\n385: long millis = getYearMillis(year);\n386: millis += getTotalMillisByYearMonth(year, month);\n387: return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n388: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "110: public long set(long instant, int value) {\n111: FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n112: return instant + (value - get(instant)) * iUnitMillis;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "909: public long convertUTCToLocal(long instantUTC) {\n910: int offset = getOffset(instantUTC);\n911: long instantLocal = instantUTC + offset;\n913: if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\n916: return instantLocal;\n917: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "198: public static DateTimeFieldType minuteOfHour() {\n199: return MINUTE_OF_HOUR_TYPE;\n200: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "79: int getMonthOfYear(long millis, int year) {\n88: int i = (int)((millis - getYearMillis(year)) >> 10);\n93: return\n109: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "325: public static DateTimeFieldType year() {\n326: return YEAR_TYPE;\n327: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "294: public long getMillis() {\n295: return iMillis;\n296: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "263: public final DurationField years() {\n264: return iYears;\n265: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "690: int getMaxMonth() {\n691: return 12;\n692: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "384: ZonedDateTimeField(DateTimeField field,\n389: super(field.getType());\n390: if (!field.isSupported()) {\n393: iField = field;\n394: iZone = zone;\n395: iDurationField = durationField;\n396: iTimeField = useTimeArithmetic(durationField);\n397: iRangeDurationField = rangeDurationField;\n398: iLeapDurationField = leapDurationField;\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "308: public DurationField getRangeDurationField() {\n309: return iChronology.years();\n310: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "57: public final DateTimeFieldType getType() {\n58: return iType;\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "126: public DurationField getDurationField() {\n127: return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n128: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "141: public int hashCode() {\n142: long millis = iUnitMillis;\n143: int hash = (int) (millis ^ (millis >>> 32));\n144: hash += getType().hashCode();\n145: return hash;\n146: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "47: public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n49: if (cCache == null) {\n53: field = cCache.get(type);\n55: if (field == null) {\n59: return field;\n60: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "579: public String print(ReadableInstant instant) {\n580: StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\n581: printTo(buf, instant);\n582: return buf.toString();\n583: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "535: public DateTime withMillis(long newMillis) {\n536: return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n537: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "227: public final DateTimeField dayOfMonth() {\n228: return iDayOfMonth;\n229: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "162: public long getDateTimeMillis(\n167: if ((base = getBase()) != null) {\n172: FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n173: FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n174: FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n175: FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n177: return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "50: public DurationField getRangeDurationField() {\n51: return iChronology.months();\n52: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "211: public final DateTimeField clockhourOfHalfday() {\n212: return iClockhourOfHalfday;\n213: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "243: public final DurationField weekyears() {\n244: return iWeekyears;\n245: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "114: public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n119: return localToUTC(getBase().getDateTimeMillis\n122: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "616: abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\n682: return getMaxMonth();\n683: }"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "89: public DurationField getRangeDurationField() {\n90: return iField.getRangeDurationField();\n91: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "57: public DurationField getRangeDurationField() {\n58: return iChronology.weekyears();\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "318: private void setFields() {\n319: Fields fields = new Fields();\n320: if (iBase != null) {\n321: fields.copyFieldsFrom(iBase);\n323: assemble(fields);\n327: iMillis    = (f = fields.millis)    != null ? f : super.millis();\n328: iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n329: iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n330: iHours     = (f = fields.hours)     != null ? f : super.hours();\n331: iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n332: iDays      = (f = fields.days)      != null ? f : super.days();\n333: iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n334: iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n335: iMonths    = (f = fields.months)    != null ? f : super.months();\n336: iYears     = (f = fields.years)     != null ? f : super.years();\n337: iCenturies = (f = fields.centuries) != null ? f : super.centuries();\n338: iEras      = (f = fields.eras)      != null ? f : super.eras();\n343: iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\n344: iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\n345: iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\n346: iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\n347: iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\n348: iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\n349: iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\n350: iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\n351: iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\n352: iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\n353: iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\n354: iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\n355: iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\n356: iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n357: iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n358: iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n359: iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n360: iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n361: iYear               = (f = fields.year)               != null ? f : super.year();\n362: iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n363: iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\n364: iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\n365: iEra                = (f = fields.era)                != null ? f : super.era();\n369: if (iBase == null) {\n372: flags =\n385: iBaseFlags = flags;\n386: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "53: public int get(long instant) {\n54: return iChronology.getYear(instant);\n55: }"
                                }
                            ]
                        }
                    ]
                },
                {
                    "bug_id": 27,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
                            "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clearPrefix()V",
                                    "method_body": "778: private void clearPrefix() throws IllegalStateException {\n779: if (iPrefix != null) {\n782: iPrefix = null;\n783: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "1180: public int parseInto(\n1184: boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);\n1187: if (position >= text.length()) {\n1191: if (iPrefix != null) {\n1208: int suffixPos = -1;\n1209: if (iSuffix != null && !mustParse) {\n1212: suffixPos = iSuffix.scan(text, position);\n1213: if (suffixPos >= 0) {\n1215: mustParse = true;\n1218: if (!mustParse) {\n1222: return ~suffixPos;\n1228: if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {\n1235: if (suffixPos > 0) {\n1236: limit = Math.min(iMaxParsedDigits, suffixPos - position);\n1242: int length = 0;\n1243: int fractPos = -1;\n1244: boolean hasDigits = false;\n1245: while (length < limit) {\n1246: char c = text.charAt(position + length);\n1248: if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {\n1269: if (c >= '0' && c <= '9') {\n1270: hasDigits = true;\n1285: length++;\n1286: }\n1288: if (!hasDigits) {\n1292: if (suffixPos >= 0 && position + length != suffixPos) {\n1300: if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {\n1303: } else if (fractPos < 0) {\n1304: setFieldValue(period, SECONDS, parseInt(text, position, length));\n1305: setFieldValue(period, MILLIS, 0);\n1333: position += length;\n1335: if (position >= 0 && iSuffix != null) {\n1336: position = iSuffix.parse(text, position);\n1339: return position;\n1340: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "627: public DurationFieldType getFieldType(int index) {\n628: return iTypes[index];\n629: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMinutes()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "462: public PeriodFormatterBuilder appendMinutes() {\n463: appendField(MINUTES);\n464: return this;\n465: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "616: public int size() {\n617: return iTypes.length;\n618: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "320: public int getValue(int index) {\n321: return iValues[index];\n322: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkParser()V",
                                    "method_body": "334: private void checkParser() {\n335: if (iParser == null) {\n338: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append(Lorg/joda/time/format/PeriodFormatter;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "191: public PeriodFormatterBuilder append(PeriodFormatter formatter) {\n192: if (formatter == null) {\n195: clearPrefix();\n196: append0(formatter.getPrinter(), formatter.getParser());\n197: return this;\n198: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:createComposite(Ljava/util/List;)[Ljava/lang/Object;",
                                    "method_body": "815: private static Object[] createComposite(List<Object> elementPairs) {\n816: switch (elementPairs.size()) {\n818: return new Object[] {Literal.EMPTY, Literal.EMPTY};\n822: Composite comp = new Composite(elementPairs);\n823: return new Object[] {comp, comp};\n825: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "171: public static void setDefault(DateTimeZone zone) throws SecurityException {\n172: SecurityManager sm = System.getSecurityManager();\n173: if (sm != null) {\n176: if (zone == null) {\n179: synchronized(DateTimeZone.class) {\n180: cDefault = zone;\n181: }\n182: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "71: public int[] getValues() {\n72: int[] result = new int[size()];\n73: for (int i = 0; i < result.length; i++) {\n74: result[i] = getValue(i);\n76: return result;\n77: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "309: public DurationFieldType getFieldType(int index) {\n310: return iType.getFieldType(index);\n311: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "64: public static PeriodFormatter standard() {\n65: if (cStandard == null) {\n85: return cStandard;\n86: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "381: private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\n382: int index = indexOf(type);\n383: if (index == -1) {\n389: values[index] = newValue;\n391: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "1562: public int parseInto(\n1565: if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {\n1566: return position + iText.length();\n1569: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:size()I",
                                    "method_body": "298: public int size() {\n299: return iType.size();\n300: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter(Ljava/util/List;ZZ)Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "794: private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n795: if (notPrinter && notParser) {\n798: int size = elementPairs.size();\n799: if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n800: Separator sep = (Separator) elementPairs.get(0);\n801: PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n802: sep = sep.finish(f.getPrinter(), f.getParser());\n803: return new PeriodFormatter(sep, sep);\n805: Object[] comp = createComposite(elementPairs);\n806: if (notPrinter) {\n808: } else if (notParser) {\n811: return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n813: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:finish(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder$Separator;",
                                    "method_body": "1747: Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\n1748: iAfterPrinter = afterPrinter;\n1749: iAfterParser = afterParser;\n1750: return this;\n1751: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldType()I",
                                    "method_body": "1528: int getFieldType() {\n1529: return iFieldType;\n1530: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clear()V",
                                    "method_body": "170: public void clear() {\n171: iMinPrintedDigits = 1;\n172: iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;\n173: iMaxParsedDigits = 10;\n174: iRejectSignedValues = false;\n175: iPrefix = null;\n176: if (iElementPairs == null) {\n177: iElementPairs = new ArrayList<Object>();\n181: iNotPrinter = false;\n182: iNotParser = false;\n183: iFieldFormatters = new FieldFormatter[10];\n184: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSecondsWithOptionalMillis()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "499: public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\n500: appendField(SECONDS_OPTIONAL_MILLIS);\n501: return this;\n502: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "439: public void setPeriod(ReadablePeriod period) {\n440: super.setPeriod(period);\n441: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "105: public DateTimeZone getZone() {\n107: if ((base = iBase) != null) {\n108: return base.getZone();\n111: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "588: private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\n591: if (iElementPairs.size() > 0) {\n592: originalPrinter = iElementPairs.get(iElementPairs.size() - 2);\n593: originalParser = iElementPairs.get(iElementPairs.size() - 1);\n599: if (originalPrinter == null || originalParser == null ||\n605: clearPrefix();\n606: FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\n607: iElementPairs.set(iElementPairs.size() - 2, newField);\n608: iElementPairs.set(iElementPairs.size() - 1, newField);\n609: iFieldFormatters[newField.getFieldType()] = newField;\n611: return this;\n612: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:<init>()V",
                                    "method_body": "101: public PeriodFormatterBuilder() {\n102: clear();\n103: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:toPeriod()Lorg/joda/time/Period;",
                                    "method_body": "123: public Period toPeriod() {\n124: return new Period(this);\n125: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "400: protected void setPeriod(ReadablePeriod period) {\n401: if (period == null) {\n404: setPeriodInternal(period);\n406: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "1819: public int parseInto(\n1822: PeriodParser[] parsers = iParsers;\n1823: if (parsers == null) {\n1827: int len = parsers.length;\n1828: for (int i=0; i<len && position >= 0; i++) {\n1829: position = parsers[i].parseInto(period, periodStr, position, locale);\n1831: return position;\n1832: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:<init>(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;ZZ)V",
                                    "method_body": "1591: Separator(String text, String finalText, String[] variants,\n1593: boolean useBefore, boolean useAfter) {\n1594: iText = text;\n1595: iFinalText = finalText;\n1597: if ((finalText == null || text.equals(finalText)) &&\n1600: iParsedForms = new String[] {text};\n1616: iBeforePrinter = beforePrinter;\n1617: iBeforeParser = beforeParser;\n1618: iUseBefore = useBefore;\n1619: iUseAfter = useAfter;\n1620: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "275: public int[] get(ReadablePeriod period, long duration) {\n276: int size = period.size();\n277: int[] values = new int[size];\n278: if (duration != 0) {\n289: return values;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setField(Lorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "464: protected void setField(DurationFieldType field, int value) {\n465: setFieldInto(iValues, field, value);\n466: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "85: public DateTimeZone getZone() {\n86: return (DateTimeZone)getParam();\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "128: private static void checkPermission() throws SecurityException {\n129: SecurityManager sm = System.getSecurityManager();\n130: if (sm != null) {\n133: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "104: public static DurationFieldType millis() {\n105: return MILLIS_TYPE;\n106: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "285: public static final PeriodType getPeriodType(PeriodType type) {\n286: if (type == null) {\n287: return PeriodType.standard();\n289: return type;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "101: public static PeriodType standard() {\n102: PeriodType type = cStandard;\n103: if (type == null) {\n116: return type;\n117: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "397: public MutablePeriod(Object period, PeriodType type, Chronology chrono) {\n398: super(period, type, chrono);\n399: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:parse(Ljava/lang/String;I)I",
                                    "method_body": "833: int calculatePrintedLength(int value);\n857: SimpleAffix(String text) {\n858: iText = text;\n859: }\n874: String text = iText;\n875: int textLength = text.length();\n876: if (periodStr.regionMatches(true, position, text, 0, textLength)) {\n877: return position + textLength;\n883: String text = iText;\n884: int textLength = text.length();\n885: int sourceLength = periodStr.length();\n887: for (int pos = position; pos < sourceLength; pos++) {\n888: if (periodStr.regionMatches(true, pos, text, 0, textLength)) {\n889: return pos;\n892: switch (periodStr.charAt(pos)) {\n896: break;\n898: break search;\n901: return ~position;\n903: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparatorIfFieldsAfter(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "651: public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\n652: return appendSeparator(text, text, null, false, true);\n653: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInt(Ljava/lang/String;II)I",
                                    "method_body": "1348: private int parseInt(String text, int position, int length) {\n1349: if (length >= 10) {\n1351: return Integer.parseInt(text.substring(position, position + length));\n1373: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "241: protected BasePeriod(Object period, PeriodType type, Chronology chrono) {\n242: super();\n243: PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);\n244: type = (type == null ? converter.getPeriodType(period) : type);\n245: type = checkPeriodType(type);\n246: iType = type;\n247: if (this instanceof ReadWritablePeriod) {\n248: iValues = new int[size()];\n249: chrono = DateTimeUtils.getChronology(chrono);\n250: converter.setInto((ReadWritablePeriod) this, period, chrono);\n252: iValues = new MutablePeriod(period, type, chrono).getValues();\n254: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getParser()Lorg/joda/time/format/PeriodParser;",
                                    "method_body": "145: public PeriodParser getParser() {\n146: return iParser;\n147: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "251: public static final Chronology getChronology(Chronology chrono) {\n252: if (chrono == null) {\n253: return ISOChronology.getInstance();\n256: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setSeconds(I)V",
                                    "method_body": "924: public void setSeconds(int seconds) {\n925: super.setField(DurationFieldType.seconds(), seconds);\n926: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMonths()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "410: public PeriodFormatterBuilder appendMonths() {\n411: appendField(MONTHS);\n412: return this;\n413: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "227: public PeriodFormatterBuilder appendLiteral(String text) {\n228: if (text == null) {\n231: clearPrefix();\n232: Literal literal = new Literal(text);\n233: append0(literal, literal);\n234: return this;\n235: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setFieldInto([ILorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "476: protected void setFieldInto(int[] values, DurationFieldType field, int value) {\n477: int index = indexOf(field);\n478: if (index == -1) {\n484: values[index] = value;\n486: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "130: public static DateTimeZone getDefault() {\n131: DateTimeZone zone = cDefault;\n132: if (zone == null) {\n159: return zone;\n160: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:<init>(JLorg/joda/time/PeriodType;)V",
                                    "method_body": "171: public MutablePeriod(long duration, PeriodType type) {\n172: super(duration, type, null);\n173: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "314: protected final Object getParam() {\n315: return iParam;\n316: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "88: public static ConverterManager getInstance() {\n89: if (INSTANCE == null) {\n92: return INSTANCE;\n93: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ReadablePeriodConverter:setInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V",
                                    "method_body": "57: public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {\n58: duration.setPeriod((ReadablePeriod) object);\n59: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "224: protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n225: super();\n226: type = checkPeriodType(type);\n227: chrono = DateTimeUtils.getChronology(chrono);\n228: iType = type;\n229: iValues = chrono.get(this, duration);\n230: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparator(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "727: private PeriodFormatterBuilder appendSeparator(String text, String finalText,\n730: if (text == null || finalText == null) {\n734: clearPrefix();\n737: List<Object> pairs = iElementPairs;\n738: if (pairs.size() == 0) {\n750: Separator lastSeparator = null;\n751: for (i=pairs.size(); --i>=0; ) {\n752: if (pairs.get(i) instanceof Separator) {\n757: i--;  // element pairs\n761: if (lastSeparator != null && pairs.size() == 0) {\n764: Object[] comp = createComposite(pairs);\n765: pairs.clear();\n766: Separator separator = new Separator(\n770: pairs.add(separator);\n771: pairs.add(separator);\n774: return this;\n775: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "122: public PeriodFormatter toFormatter() {\n123: PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\n124: iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n125: return formatter;\n126: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendWeeks()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "423: public PeriodFormatterBuilder appendWeeks() {\n424: appendField(WEEKS);\n425: return this;\n426: }"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(Ljava/lang/Object;)V",
                                    "method_body": "593: public Period(Object period) {\n594: super(period, null, null);\n595: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "95: public static ISOChronology getInstance(DateTimeZone zone) {\n96: if (zone == null) {\n99: int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\n100: ISOChronology chrono = cFastCache[index];\n101: if (chrono != null && chrono.getZone() == zone) {\n102: return chrono;\n113: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "113: public static DurationFieldType seconds() {\n114: return SECONDS_TYPE;\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "1834: private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\n1835: int size = elementPairs.size();\n1836: for (int i=0; i<size; i+=2) {\n1837: Object element = elementPairs.get(i);\n1838: if (element instanceof PeriodPrinter) {\n1839: if (element instanceof Composite) {\n1842: printerList.add(element);\n1846: element = elementPairs.get(i + 1);\n1847: if (element instanceof PeriodParser) {\n1848: if (element instanceof Composite) {\n1851: parserList.add(element);\n1855: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:parsePeriod(Ljava/lang/String;)Lorg/joda/time/Period;",
                                    "method_body": "301: public Period parsePeriod(String text) {\n302: checkParser();\n304: return parseMutablePeriod(text).toPeriod();\n305: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "47: Converter select(Class<?> type) throws IllegalStateException {\n49: Entry[] entries = iSelectEntries;\n50: int length = entries.length;\n51: int index = type == null ? 0 : type.hashCode() & (length - 1);\n55: while ((e = entries[index]) != null) {\n56: if (e.iType == type) {\n57: return e.iConverter;\n112: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getPeriodConverter(Ljava/lang/Object;)Lorg/joda/time/convert/PeriodConverter;",
                                    "method_body": "420: public PeriodConverter getPeriodConverter(Object object) {\n421: PeriodConverter converter =\n423: if (converter != null) {\n424: return converter;\n428: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
                                    "method_body": "1062: FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\n1063: iMinPrintedDigits = field.iMinPrintedDigits;\n1064: iPrintZeroSetting = field.iPrintZeroSetting;\n1065: iMaxParsedDigits = field.iMaxParsedDigits;\n1066: iRejectSignedValues = field.iRejectSignedValues;\n1067: iFieldType = field.iFieldType;\n1068: iFieldFormatters = field.iFieldFormatters;\n1069: iPrefix = field.iPrefix;\n1070: if (field.iSuffix != null) {\n1073: iSuffix = suffix;\n1074: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "551: public PeriodFormatterBuilder appendSuffix(String text) {\n552: if (text == null) {\n555: return appendSuffix(new SimpleAffix(text));\n556: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "288: public PeriodType getPeriodType() {\n289: return iType;\n290: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(II)V",
                                    "method_body": "533: private void appendField(int type, int minPrinted) {\n534: FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n536: append0(field, field);\n537: iFieldFormatters[type] = field;\n538: iPrefix = null;\n539: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append0(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "785: private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\n786: iElementPairs.add(printer);\n787: iElementPairs.add(parser);\n788: iNotPrinter |= (printer == null);\n789: iNotParser |= (parser == null);\n790: return this;\n791: }"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "647: public int indexOf(DurationFieldType type) {\n648: for (int i = 0, isize = size(); i < isize; i++) {\n649: if (iTypes[i] == type) {\n650: return i;\n654: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getPrinter()Lorg/joda/time/format/PeriodPrinter;",
                                    "method_body": "127: public PeriodPrinter getPrinter() {\n128: return iPrinter;\n129: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:scan(Ljava/lang/String;I)I",
                                    "method_body": "833: int calculatePrintedLength(int value);\n857: SimpleAffix(String text) {\n858: iText = text;\n859: }\n874: String text = iText;\n875: int textLength = text.length();\n876: if (periodStr.regionMatches(true, position, text, 0, textLength)) {\n877: return position + textLength;\n883: String text = iText;\n884: int textLength = text.length();\n885: int sourceLength = periodStr.length();\n887: for (int pos = position; pos < sourceLength; pos++) {\n888: if (periodStr.regionMatches(true, pos, text, 0, textLength)) {\n889: return pos;\n892: switch (periodStr.charAt(pos)) {\n896: break;\n898: break search;\n901: return ~position;\n903: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "1764: Composite(List<Object> elementPairs) {\n1765: List<Object> printerList = new ArrayList<Object>();\n1766: List<Object> parserList = new ArrayList<Object>();\n1768: decompose(elementPairs, printerList, parserList);\n1770: if (printerList.size() <= 0) {\n1773: iPrinters = printerList.toArray(\n1777: if (parserList.size() <= 0) {\n1780: iParsers = parserList.toArray(\n1783: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "278: protected PeriodType checkPeriodType(PeriodType type) {\n279: return DateTimeUtils.getPeriodType(type);\n280: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "1699: public int parseInto(\n1702: int oldPos = position;\n1703: position = iBeforeParser.parseInto(period, periodStr, position, locale);\n1705: if (position < 0) {\n1709: boolean found = false;\n1710: if (position > oldPos) {\n1712: String[] parsedForms = iParsedForms;\n1713: int length = parsedForms.length;\n1714: for (int i=0; i < length; i++) {\n1715: String parsedForm = parsedForms[i];\n1716: if ((parsedForm == null || parsedForm.length() == 0) ||\n1720: position += parsedForm.length();\n1721: found = true;\n1722: break;\n1727: oldPos = position;\n1728: position = iAfterParser.parseInto(period, periodStr, position, locale);\n1730: if (position < 0) {\n1734: if (found && position == oldPos) {\n1736: return ~oldPos;\n1739: if (position > oldPos && !found && !iUseBefore) {\n1744: return position;\n1745: }"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "85: public static ISOChronology getInstance() {\n86: return getInstance(DateTimeZone.getDefault());\n87: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "414: FixedMillisProvider(long fixedMillis) {\n415: iMillis = fixedMillis;\n416: }"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setMillis(I)V",
                                    "method_body": "946: public void setMillis(int millis) {\n947: super.setField(DurationFieldType.millis(), millis);\n948: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:<init>(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)V",
                                    "method_body": "85: public PeriodFormatter(\n87: super();\n88: iPrinter = printer;\n89: iParser = parser;\n90: iLocale = null;\n91: iParseType = null;\n92: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "411: private void setPeriodInternal(ReadablePeriod period) {\n412: int[] newValues = new int[size()];\n413: for (int i = 0, isize = period.size(); i < isize; i++) {\n414: DurationFieldType type = period.getFieldType(i);\n415: int value = period.getValue(i);\n416: checkAndUpdate(type, newValues, value);\n418: iValues = newValues;\n419: }"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ReadablePeriodConverter:getPeriodType(Ljava/lang/Object;)Lorg/joda/time/PeriodType;",
                                    "method_body": "69: public PeriodType getPeriodType(Object object) {\n70: ReadablePeriod period = (ReadablePeriod) object;\n71: return period.getPeriodType();\n72: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendDays()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "436: public PeriodFormatterBuilder appendDays() {\n437: appendField(DAYS);\n438: return this;\n439: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:<init>(Ljava/lang/String;)V",
                                    "method_body": "1542: Literal(String text) {\n1543: iText = text;\n1544: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "67: public static final void setCurrentMillisSystem() throws SecurityException {\n68: checkPermission();\n69: cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n70: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendHours()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "449: public PeriodFormatterBuilder appendHours() {\n450: appendField(HOURS);\n451: return this;\n452: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:setFieldValue(Lorg/joda/time/ReadWritablePeriod;II)V",
                                    "method_body": "1497: void setFieldValue(ReadWritablePeriod period, int field, int value) {\n1498: switch (field) {\n1520: period.setSeconds(value);\n1521: break;\n1523: period.setMillis(value);\n1526: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(I)V",
                                    "method_body": "529: private void appendField(int type) {\n530: appendField(type, iMinPrintedDigits);\n531: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
                                    "method_body": "356: static String createErrorMessage(final String text, final int errorPos) {\n357: int sampleLen = errorPos + 32;\n359: if (text.length() <= sampleLen + 3) {\n360: sampleText = text;\n365: if (errorPos <= 0) {\n369: if (errorPos >= text.length()) {\n373: return \"Invalid format: \\\"\" + sampleText + \"\\\" is malformed at \\\"\" +\n375: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(IIIZI[Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
                                    "method_body": "1048: FieldFormatter(int minPrintedDigits, int printZeroSetting,\n1051: PeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n1052: iMinPrintedDigits = minPrintedDigits;\n1053: iPrintZeroSetting = printZeroSetting;\n1054: iMaxParsedDigits = maxParsedDigits;\n1055: iRejectSignedValues = rejectSignedValues;\n1056: iFieldType = fieldType;\n1057: iFieldFormatters = fieldFormatters;\n1058: iPrefix = prefix;\n1059: iSuffix = suffix;\n1060: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:<init>(Ljava/lang/String;)V",
                                    "method_body": "833: int calculatePrintedLength(int value);\n857: SimpleAffix(String text) {\n858: iText = text;\n859: }\n874: String text = iText;\n875: int textLength = text.length();\n876: if (periodStr.regionMatches(true, position, text, 0, textLength)) {\n877: return position + textLength;\n883: String text = iText;\n884: int textLength = text.length();\n885: int sourceLength = periodStr.length();\n887: for (int pos = position; pos < sourceLength; pos++) {\n888: if (periodStr.regionMatches(true, pos, text, 0, textLength)) {\n889: return pos;\n892: switch (periodStr.charAt(pos)) {\n896: break;\n898: break search;\n901: return ~position;\n903: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "43: protected AbstractPeriod() {\n44: super();\n45: }"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "81: public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n82: checkPermission();\n83: cMillisProvider = new FixedMillisProvider(fixedMillis);\n84: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendYears()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "397: public PeriodFormatterBuilder appendYears() {\n398: appendField(YEARS);\n399: return this;\n400: }"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "113: public int indexOf(DurationFieldType type) {\n114: return getPeriodType().indexOf(type);\n115: }"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:parseMutablePeriod(Ljava/lang/String;)Lorg/joda/time/MutablePeriod;",
                                    "method_body": "314: public MutablePeriod parseMutablePeriod(String text) {\n315: checkParser();\n317: MutablePeriod period = new MutablePeriod(0, iParseType);\n318: int newPos = getParser().parseInto(period, text, 0, iLocale);\n319: if (newPos >= 0) {\n320: if (newPos >= text.length()) {\n321: return period;\n324: newPos = ~newPos;\n326: throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n327: }"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}