{
    "projects": [
        {
            "name": "Time",
            "bugs": [
                {
                    "bug_id": 1,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray",
                            "test_body": "260: public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n261: int[] values = new int[] {1, 1, 1};\n262: DateTimeFieldType[] types = new DateTimeFieldType[] {\n263: DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n264: try {\n265: new Partial(types, values);\n266: fail();\n267: } catch (IllegalArgumentException ex) {\n268: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n269: }\n270: 271: types = new DateTimeFieldType[] {\n272: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n273: try {\n274: new Partial(types, values);\n275: fail();\n276: } catch (IllegalArgumentException ex) {\n277: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n278: }\n279: 280: types = new DateTimeFieldType[] {\n281: DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n282: try {\n283: new Partial(types, values);\n284: fail();\n285: } catch (IllegalArgumentException ex) {\n286: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n287: }\n288: 289: types = new DateTimeFieldType[] {\n290: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n291: try {\n292: new Partial(types, values);\n293: fail();\n294: } catch (IllegalArgumentException ex) {\n295: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n296: }\n297: 298: types = new DateTimeFieldType[] {\n299: DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n300: try {\n301: new Partial(types, values);\n302: fail();\n303: } catch (IllegalArgumentException ex) {\n304: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n305: }\n306: 307: types = new DateTimeFieldType[] {\n308: DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n309: try {\n310: new Partial(types, values);\n311: fail();\n312: } catch (IllegalArgumentException ex) {\n313: assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n314: }\n315: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField durationField) {\nif (durationField.isSupported()) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.378
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.BCE;\n}",
                                    "suspicious_rank": 0.302
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.CE;\n}",
                                    "suspicious_rank": 0.302
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[I)V",
                                    "method_body": "public Partial(DateTimeFieldType[] types, int[] values) {\nthis(types, values, null);\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (types == null) {\nif (values == null) {\nif (values.length != types.length) {\nif (types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nDurationField lastUnitField = null;\nfor (int i = 0; i < types.length; i++) {\nDateTimeFieldType loopType = types[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (i > 0) {\nint compare = lastUnitField.compareTo(loopUnitField);\nif (compare < 0) {\nthrow new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n} else if (compare == 0) {\nlastUnitField = loopUnitField;\niTypes = (DateTimeFieldType[]) types.clone();\nchronology.validate(this, values);\niValues = (int[]) values.clone();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn -1;\nreturn 1;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.eras();\nreturn chronology.years();\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.era();\nreturn chronology.year();\nreturn chronology.monthOfYear();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn iChronology.getMinYear();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray(TestPartial_Constructors.java:284)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 2,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange",
                            "test_body": "467: public void testWith_baseAndArgHaveNoRange() {\n468: Partial test = new Partial(DateTimeFieldType.year(), 1);\n469: Partial result = test.with(DateTimeFieldType.era(), 1);\n470: assertEquals(2, result.size());\n471: assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n472: assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n473: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField durationField) {\nreturn 0;\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public Partial(DateTimeFieldType type, int value) {\nthis(type, value, null);\n}",
                                    "suspicious_rank": 0.236
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V",
                                    "method_body": "public Partial(DateTimeFieldType type, int value, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (type == null) {\niTypes = new DateTimeFieldType[] {type};\niValues = new int[] {value};\nchronology.validate(this, iValues);\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
                                    "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\nint index = indexOf(fieldType);\nif (index == -1) {\nDateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\nint[] newValues = new int[newTypes.length];\nint i = 0;\nDurationField unitField = fieldType.getDurationType().getField(iChronology);\nif (unitField.isSupported()) {\nSystem.arraycopy(iTypes, 0, newTypes, 0, i);\nSystem.arraycopy(iValues, 0, newValues, 0, i);\nnewTypes[i] = fieldType;\nnewValues[i] = value;\nSystem.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\nSystem.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\nPartial newPartial = new Partial(newTypes, newValues, iChronology);\niChronology.validate(newPartial, newValues);\nreturn newPartial;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getRangeDurationType() {\nreturn iRangeType;\n}",
                                    "suspicious_rank": 0.124
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
                                    "suspicious_rank": 0.083
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (types == null) {\nif (values == null) {\nif (values.length != types.length) {\nif (types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nDurationField lastUnitField = null;\nfor (int i = 0; i < types.length; i++) {\nDateTimeFieldType loopType = types[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (i > 0) {\nint compare = lastUnitField.compareTo(loopUnitField);\nif (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n} else if (compare == 0) {\nif (types[i - 1].getRangeDurationType() == null) {\nif (loopType.getRangeDurationType() == null) {\nthrow new IllegalArgumentException(\"Types array must not contain duplicate: \" +\nlastUnitField = loopUnitField;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn -1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.eras();\nreturn chronology.years();\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn iChronology.getMinYear();\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:era()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType era() {\nreturn ERA_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year\nat org.joda.time.Partial.<init>(Partial.java:224)\nat org.joda.time.Partial.with(Partial.java:466)\nat org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange(TestPartial_Basics.java:469)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 3,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero",
                            "test_body": "295: public void testAddWeeks_int_dstOverlapWinter_addZero() {\n296: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n297: test.addHours(1);\n298: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n299: test.addWeeks(0);\n300: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n301: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "public void addHours(final int hours) {\nsetMillis(getChronology().hours().add(getMillis(), hours));\n}",
                                    "suspicious_rank": 0.598
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addWeeks(I)V",
                                    "method_body": "public void addWeeks(final int weeks) {\nsetMillis(getChronology().weeks().add(getMillis(), weeks));\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nreturn Constants.dt;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetPrev;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:300)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero",
                            "test_body": "266: public void testAddDays_int_dstOverlapWinter_addZero() {\n267: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n268: test.addHours(1);\n269: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n270: test.addDays(0);\n271: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n272: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "public void addHours(final int hours) {\nsetMillis(getChronology().hours().add(getMillis(), hours));\n}",
                                    "suspicious_rank": 0.598
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addDays(I)V",
                                    "method_body": "public void addDays(final int days) {\nsetMillis(getChronology().days().add(getMillis(), days));\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nreturn Constants.dt;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetPrev;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:271)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
                            "test_body": "182: public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n183: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n184: test.addHours(1);\n185: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n186: test.add(DurationFieldType.years(), 0);\n187: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n188: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "public void addHours(final int hours) {\nsetMillis(getChronology().hours().add(getMillis(), hours));\n}",
                                    "suspicious_rank": 0.598
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:add(Lorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "public void add(DurationFieldType type, int amount) {\nif (type == null) {\nsetMillis(type.getField(getChronology()).add(getMillis(), amount));\n}",
                                    "suspicious_rank": 0.2
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nreturn Constants.dt;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetPrev;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.years();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:187)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero",
                            "test_body": "244: public void testAddMonths_int_dstOverlapWinter_addZero() {\n245: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n246: test.addHours(1);\n247: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n248: test.addMonths(0);\n249: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n250: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "public void addHours(final int hours) {\nsetMillis(getChronology().hours().add(getMillis(), hours));\n}",
                                    "suspicious_rank": 0.598
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addMonths(I)V",
                                    "method_body": "public void addMonths(final int months) {\nsetMillis(getChronology().months().add(getMillis(), months));\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nreturn Constants.dt;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetPrev;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:249)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero",
                            "test_body": "222: public void testAddYears_int_dstOverlapWinter_addZero() {\n223: MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n224: test.addHours(1);\n225: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n226: test.addYears(0);\n227: assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n228: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addHours(I)V",
                                    "method_body": "public void addHours(final int hours) {\nsetMillis(getChronology().hours().add(getMillis(), hours));\n}",
                                    "suspicious_rank": 0.598
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:addYears(I)V",
                                    "method_body": "public void addYears(final int years) {\nsetMillis(getChronology().years().add(getMillis(), years));\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.175
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nreturn Constants.dt;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetPrev;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:227)",
                            "test_id": 4
                        }
                    ]
                },
                {
                    "bug_id": 4,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPartial_Basics.testWith3",
                            "test_body": "360: public void testWith3() {\n361: Partial test = createHourMinPartial();\n362: try {\n363: test.with(DateTimeFieldType.clockhourOfDay(), 6);\n364: fail();\n365: } catch (IllegalArgumentException ex) {}\n366: check(test, 10, 20);\n367: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 1.0
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn 1;\n}",
                                    "suspicious_rank": 1.0
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getWrappedField().getMaximumValue(instant, values) + 1;\n}",
                                    "suspicious_rank": 1.0
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn getWrappedField().getMaximumValue() + 1;\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:with(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;",
                                    "method_body": "public Partial with(DateTimeFieldType fieldType, int value) {\nif (fieldType == null) {\nint index = indexOf(fieldType);\nif (index == -1) {\nDateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\nint[] newValues = new int[newTypes.length];\nint i = 0;\nDurationField unitField = fieldType.getDurationType().getField(iChronology);\nif (unitField.isSupported()) {\nfor (; i < iTypes.length; i++) {\nDateTimeFieldType loopType = iTypes[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (loopUnitField.isSupported()) {\nint compare = unitField.compareTo(loopUnitField);\nif (compare > 0) {\nbreak;\n} else if (compare == 0) {\nDurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\nDurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\nif (rangeField.compareTo(loopRangeField) > 0) {\nSystem.arraycopy(iTypes, 0, newTypes, 0, i);\nSystem.arraycopy(iValues, 0, newValues, 0, i);\nnewTypes[i] = fieldType;\nnewValues[i] = value;\nSystem.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\nSystem.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\nPartial newPartial = new Partial(iChronology, newTypes, newValues);\niChronology.validate(newPartial, newValues);\nreturn newPartial;\n}",
                                    "suspicious_rank": 0.189
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V",
                                    "method_body": "Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {\nsuper();\niChronology = chronology;\niTypes = types;\niValues = values;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getRangeDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getRangeDurationType() {\nreturn iRangeType;\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:<init>([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V",
                                    "method_body": "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\niChronology = chronology;\nif (types == null) {\nif (values == null) {\nif (values.length != types.length) {\nif (types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nDurationField lastUnitField = null;\nfor (int i = 0; i < types.length; i++) {\nDateTimeFieldType loopType = types[i];\nDurationField loopUnitField = loopType.getDurationType().getField(iChronology);\nif (i > 0) {\nint compare = lastUnitField.compareTo(loopUnitField);\nif (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n} else if (compare == 0) {\nlastUnitField = loopUnitField;\niTypes = (DateTimeFieldType[]) types.clone();\nchronology.validate(this, values);\niValues = (int[]) values.clone();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nreturn iTypes[index].getField(chrono);\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.Partial:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn -1;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.days();\nreturn chronology.hours();\nreturn chronology.minutes();\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.clockhourOfDay();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:clockhourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType clockhourOfDay() {\nreturn CLOCKHOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestPartial_Basics.testWith3(TestPartial_Basics.java:364)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 5,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks",
                            "test_body": "1551: public void testNormalizedStandard_periodType_monthsWeeks() {\n1552: PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n1553: DurationFieldType.months(),\n1554: DurationFieldType.weeks(),\n1555: DurationFieldType.days()});\n1556: Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n1557: Period result = test.normalizedStandard(type);\n1558: assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n1559: assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n1560: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "public Period withYears(int years) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\nreturn new Period(values, getPeriodType());\n}",
                                    "suspicious_rank": 0.5
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "public Period normalizedStandard(PeriodType type) {\ntype = DateTimeUtils.getPeriodType(type);\nlong millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\nmillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\nmillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\nmillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\nmillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\nmillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\nPeriod result = new Period(millis, type, ISOChronology.getInstanceUTC());\nint years = getYears();\nint months = getMonths();\nif (years != 0 || months != 0) {\nyears = FieldUtils.safeAdd(years, months / 12);\nmonths = months % 12;\nif (years != 0) {\nresult = result.withYears(years);\n}",
                                    "suspicious_rank": 0.378
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nthrow new UnsupportedOperationException(\"Field is not supported\");\n}",
                                    "suspicious_rank": 0.333
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "public Period(long duration, PeriodType type, Chronology chronology) {\nsuper(duration, type, chronology);\n}",
                                    "suspicious_rank": 0.322
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:forFields([Lorg/joda/time/DurationFieldType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static synchronized PeriodType forFields(DurationFieldType[] types) {\nif (types == null || types.length == 0) {\nfor (int i = 0; i < types.length; i++) {\nif (types[i] == null) {\nMap<PeriodType, Object> cache = cTypes;\nif (cache.isEmpty()) {\nPeriodType inPartType = new PeriodType(null, types, null);\nObject cached = cache.get(inPartType);\nif (cached instanceof PeriodType) {\nreturn (PeriodType) cached;\n}",
                                    "suspicious_rank": 0.192
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "public int getDays() {\nreturn getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "public int getHours() {\nreturn getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "public int getMinutes() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "public int getMillis() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "public int getSeconds() {\nreturn getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n}",
                                    "suspicious_rank": 0.156
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
                                    "suspicious_rank": 0.153
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:hashCode()I",
                                    "method_body": "public int hashCode() {\nint hash = 0;\nfor (int i = 0; i < iTypes.length; i++) {\nhash += iTypes[i].hashCode();\nreturn hash;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nlong current = 0;\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nif (field.isPrecise()) {\nint value = field.getDifference(duration, current);\ncurrent = field.add(current, value);\nvalues[i] = value;\nreturn values;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "public boolean isPrecise() {\nreturn false;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:<init>(Ljava/lang/String;[Lorg/joda/time/DurationFieldType;[I)V",
                                    "method_body": "protected PeriodType(String name, DurationFieldType[] types, int[] indices) {\nsuper();\niName = name;\niTypes = types;\niIndices = indices;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\nif ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\nreturn diff;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn getPeriodType().getFieldType(index);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.weeks();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PeriodType == false) {\nPeriodType other = (PeriodType) obj;\nreturn (Arrays.equals(iTypes, other.iTypes));\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks(TestPeriod_Basics.java:1557)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2",
                            "test_body": "1527: public void testNormalizedStandard_periodType_months2() {\n1528: Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n1529: Period result = test.normalizedStandard(PeriodType.months());\n1530: assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n1531: assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n1532: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "public Period withYears(int years) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\nreturn new Period(values, getPeriodType());\n}",
                                    "suspicious_rank": 0.5
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "public Period normalizedStandard(PeriodType type) {\ntype = DateTimeUtils.getPeriodType(type);\nlong millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\nmillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\nmillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\nmillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\nmillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\nmillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\nPeriod result = new Period(millis, type, ISOChronology.getInstanceUTC());\nint years = getYears();\nint months = getMonths();\nif (years != 0 || months != 0) {\nyears = FieldUtils.safeAdd(years, months / 12);\nmonths = months % 12;\nif (years != 0) {\nresult = result.withYears(years);\n}",
                                    "suspicious_rank": 0.378
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nthrow new UnsupportedOperationException(\"Field is not supported\");\n}",
                                    "suspicious_rank": 0.333
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "public Period(long duration, PeriodType type, Chronology chronology) {\nsuper(duration, type, chronology);\n}",
                                    "suspicious_rank": 0.322
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:months()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType months() {\nPeriodType type = cMonths;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "public int getDays() {\nreturn getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "public int getHours() {\nreturn getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "public int getMinutes() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "public int getMillis() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "public int getSeconds() {\nreturn getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n}",
                                    "suspicious_rank": 0.156
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
                                    "suspicious_rank": 0.153
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                }
                            ],
                            "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2(TestPeriod_Basics.java:1529)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1",
                            "test_body": "1520: public void testNormalizedStandard_periodType_months1() {\n1521: Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n1522: Period result = test.normalizedStandard(PeriodType.months());\n1523: assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n1524: assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n1525: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Period:withYears(I)Lorg/joda/time/Period;",
                                    "method_body": "public Period withYears(int years) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\nreturn new Period(values, getPeriodType());\n}",
                                    "suspicious_rank": 0.5
                                },
                                {
                                    "method_signature": "org.joda.time.Period:normalizedStandard(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;",
                                    "method_body": "public Period normalizedStandard(PeriodType type) {\ntype = DateTimeUtils.getPeriodType(type);\nlong millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\nmillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\nmillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\nmillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\nmillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\nmillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\nPeriod result = new Period(millis, type, ISOChronology.getInstanceUTC());\nint years = getYears();\nint months = getMonths();\nif (years != 0 || months != 0) {\nyears = FieldUtils.safeAdd(years, months / 12);\nmonths = months % 12;\nif (years != 0) {\nresult = result.withYears(years);\n}",
                                    "suspicious_rank": 0.378
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nthrow new UnsupportedOperationException(\"Field is not supported\");\n}",
                                    "suspicious_rank": 0.333
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "public Period(long duration, PeriodType type, Chronology chronology) {\nsuper(duration, type, chronology);\n}",
                                    "suspicious_rank": 0.322
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:months()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType months() {\nPeriodType type = cMonths;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getDays()I",
                                    "method_body": "public int getDays() {\nreturn getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getHours()I",
                                    "method_body": "public int getHours() {\nreturn getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMinutes()I",
                                    "method_body": "public int getMinutes() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMillis()I",
                                    "method_body": "public int getMillis() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getSeconds()I",
                                    "method_body": "public int getSeconds() {\nreturn getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n}",
                                    "suspicious_rank": 0.156
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
                                    "suspicious_rank": 0.153
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
                                    "suspicious_rank": 0.029
                                }
                            ],
                            "stack_trace": "java.lang.UnsupportedOperationException: Field is not supported\nat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\nat org.joda.time.Period.withYears(Period.java:896)\nat org.joda.time.Period.normalizedStandard(Period.java:1631)\nat org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1(TestPeriod_Basics.java:1522)",
                            "test_id": 2
                        }
                    ]
                },
                {
                    "bug_id": 6,
                    "tests": [
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover",
                            "test_body": "121: public void test_plusWeekyears_positiveToNegative_crossCutover() {\n122: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n123: LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n124: assertEquals(expected, date.weekyear().addToCopy(-2004));\n125: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:getWeekOfWeekyear()I",
                                    "method_body": "public int getWeekOfWeekyear() {\nreturn getChronology().weekOfWeekyear().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getDayOfWeek()I",
                                    "method_body": "public int getDayOfWeek() {\nreturn getChronology().dayOfWeek().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withWeekOfWeekyear(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {\nreturn withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withDayOfWeek(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate withDayOfWeek(int dayOfWeek) {\nreturn withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:weekyear()Lorg/joda/time/LocalDate$Property;",
                                    "method_body": "public Property weekyear() {\nreturn new Property(this, getChronology().weekyear());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByWeekyear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\nnewInstant = to.weekyear().set(0, from.weekyear().get(instant));\nnewInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\nnewInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\nnewInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\nreturn newInstant;\n}",
                                    "suspicious_rank": 0.447
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByWeekyear(J)J",
                                    "method_body": "long gregorianToJulianByWeekyear(long instant) {\nreturn convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n}",
                                    "suspicious_rank": 0.447
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate addToCopy(int value) {\nreturn iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n}",
                                    "suspicious_rank": 0.4
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.332
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.add(instant, value);\nif (instant < iCutover) {\nif (instant + iGapDuration < iCutover) {\ninstant = gregorianToJulian(instant);\nreturn instant;\n}",
                                    "suspicious_rank": 0.321
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.2
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "LocalDate withLocalMillis(long newMillis) {\nnewMillis = iChronology.dayOfMonth().roundFloor(newMillis);\nreturn (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n}",
                                    "suspicious_rank": 0.192
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:<init>(Lorg/joda/time/LocalDate;Lorg/joda/time/DateTimeField;)V",
                                    "method_body": "Property(LocalDate instant, DateTimeField field) {\nsuper();\niInstant = instant;\niField = field;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iJulianField.roundFloor(instant);\nreturn instant;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:set(JI)J",
                                    "method_body": "public long set(long millis, int value) {\nFieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\nif (value <= iSkip) {\nif (value == iSkip) {\nthrow new IllegalFieldValueException\nvalue++;\nreturn super.set(millis, value);\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.135
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "public int get(long millis) {\nint value = super.get(millis);\nif (value <= iSkip) {\nvalue--;\nreturn value;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iField.get(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn 1;\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\ninstant += 1;\nreturn instant - instant % iUnitMillis - iUnitMillis;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
                                    "method_body": "protected long gregorianToJulian(long instant) {\nif (iConvertByWeekyear) {\nreturn gregorianToJulianByWeekyear(instant);\nreturn gregorianToJulianByYear(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\ndaysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))\nif (daysSince19700101 < -3) {\nreturn 7 + (int) ((daysSince19700101 + 4) % 7);\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.AbstractReadableInstantFieldProperty:<init>()V",
                                    "method_body": "public AbstractReadableInstantFieldProperty() {\nsuper();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\nreturn iJulianField.get(instant);\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nreturn Constants.ymd;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iJulianField.set(instant, value);\nif (instant >= iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iField.getMaximumValue();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nreturn iField.set(instant, value);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.011
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.01
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover(TestGJDate.java:124)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover",
                            "test_body": "96: public void test_plusYears_positiveToZero_crossCutover() {\n97: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n98: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\n99: assertEquals(expected, date.plusYears(-2003));\n100: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.332
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:plusYears(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate plusYears(int years) {\nif (years == 0) {\nlong instant = getChronology().years().add(getLocalMillis(), years);\nreturn withLocalMillis(instant);\n}",
                                    "suspicious_rank": 0.27
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn iField.add(instant, value);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.083
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\nif (upperBound == null) {\nbuf.append(\"is not supported\");\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
                                    "method_body": "long gregorianToJulianByYear(long instant) {\nreturn convertByYear(instant, iGregorianChronology, iJulianChronology);\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.021
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\nat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\nat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\nat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\nat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover",
                            "test_body": "115: public void test_plusWeekyears_positiveToZero_crossCutover() {\n116: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n117: LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n118: assertEquals(expected, date.weekyear().addToCopy(-2003));\n119: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:getWeekOfWeekyear()I",
                                    "method_body": "public int getWeekOfWeekyear() {\nreturn getChronology().weekOfWeekyear().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getDayOfWeek()I",
                                    "method_body": "public int getDayOfWeek() {\nreturn getChronology().dayOfWeek().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withWeekOfWeekyear(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {\nreturn withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withDayOfWeek(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate withDayOfWeek(int dayOfWeek) {\nreturn withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:weekyear()Lorg/joda/time/LocalDate$Property;",
                                    "method_body": "public Property weekyear() {\nreturn new Property(this, getChronology().weekyear());\n}",
                                    "suspicious_rank": 0.516
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByWeekyear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\nnewInstant = to.weekyear().set(0, from.weekyear().get(instant));\nnewInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\nnewInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\nnewInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\nreturn newInstant;\n}",
                                    "suspicious_rank": 0.447
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByWeekyear(J)J",
                                    "method_body": "long gregorianToJulianByWeekyear(long instant) {\nreturn convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n}",
                                    "suspicious_rank": 0.447
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:addToCopy(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate addToCopy(int value) {\nreturn iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n}",
                                    "suspicious_rank": 0.4
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.332
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "LocalDate withLocalMillis(long newMillis) {\nnewMillis = iChronology.dayOfMonth().roundFloor(newMillis);\nreturn (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n}",
                                    "suspicious_rank": 0.192
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate$Property:<init>(Lorg/joda/time/LocalDate;Lorg/joda/time/DateTimeField;)V",
                                    "method_body": "Property(LocalDate instant, DateTimeField field) {\nsuper();\niInstant = instant;\niField = field;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iJulianField.roundFloor(instant);\nreturn instant;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:set(JI)J",
                                    "method_body": "public long set(long millis, int value) {\nFieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\nif (value <= iSkip) {\nif (value == iSkip) {\nthrow new IllegalFieldValueException\nvalue++;\nreturn super.set(millis, value);\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.135
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.083
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\nif (upperBound == null) {\nbuf.append(\"is not supported\");\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn 1;\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\ninstant += 1;\nreturn instant - instant % iUnitMillis - iUnitMillis;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:gregorianToJulian(J)J",
                                    "method_body": "protected long gregorianToJulian(long instant) {\nif (iConvertByWeekyear) {\nreturn gregorianToJulianByWeekyear(instant);\nreturn gregorianToJulianByYear(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\ndaysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))\nif (daysSince19700101 < -3) {\nreturn 7 + (int) ((daysSince19700101 + 4) % 7);\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.AbstractReadableInstantFieldProperty:<init>()V",
                                    "method_body": "public AbstractReadableInstantFieldProperty() {\nsuper();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\nreturn iJulianField.get(instant);\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getMaxYear();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iJulianField.set(instant, value);\nif (instant >= iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iField.getMaximumValue();\n}",
                                    "suspicious_rank": 0.029
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\nat org.joda.time.field.SkipDateTimeField.set(SkipDateTimeField.java:92)\nat org.joda.time.chrono.GJChronology.convertByWeekyear(GJChronology.java:96)\nat org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(GJChronology.java:596)\nat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:922)\nat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\nat org.joda.time.LocalDate$Property.addToCopy(LocalDate.java:1965)\nat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover(TestGJDate.java:118)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover",
                            "test_body": "102: public void test_plusYears_positiveToNegative_crossCutover() {\n103: LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n104: LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);\n105: assertEquals(expected, date.plusYears(-2004));\n106: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\ninstant = iJulianChronology.getDateTimeMillis\nif (instant >= iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.332
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.add(instant, value);\nif (instant < iCutover) {\nif (instant + iGapDuration < iCutover) {\ninstant = gregorianToJulian(instant);\nreturn instant;\n}",
                                    "suspicious_rank": 0.321
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:plusYears(I)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate plusYears(int years) {\nif (years == 0) {\nlong instant = getChronology().years().add(getLocalMillis(), years);\nreturn withLocalMillis(instant);\n}",
                                    "suspicious_rank": 0.27
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.2
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:withLocalMillis(J)Lorg/joda/time/LocalDate;",
                                    "method_body": "LocalDate withLocalMillis(long newMillis) {\nnewMillis = iChronology.dayOfMonth().roundFloor(newMillis);\nreturn (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));\n}",
                                    "suspicious_rank": 0.192
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.179
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn iField.add(instant, value);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iJulianField.roundFloor(instant);\nreturn instant;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "public int get(long millis) {\nint value = super.get(millis);\nif (value <= iSkip) {\nvalue--;\nreturn value;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iField.get(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\ninstant += 1;\nreturn instant - instant % iUnitMillis - iUnitMillis;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:adjustYearForSet(I)I",
                                    "method_body": "static int adjustYearForSet(int year) {\nif (year <= 0) {\nif (year == 0) {\nthrow new IllegalFieldValueException\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\nreturn super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nreturn Constants.ymd;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:gregorianToJulianByYear(J)J",
                                    "method_body": "long gregorianToJulianByYear(long instant) {\nreturn convertByYear(instant, iGregorianChronology, iJulianChronology);\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.021
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-30>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover(TestGJDate.java:105)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.chrono.TestGJDate.test_cutoverPreZero",
                            "test_body": "128: public void test_cutoverPreZero() {\n129: DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\n130: try {\n131: GJChronology.getInstance(DateTimeZone.UTC, cutover);\n132: fail();\n133: } catch (IllegalArgumentException ex) {\n134: // expected\n135: }\n136: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn new Instant(getMillis());\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:toDateTimeAtStartOfDay(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\nzone = DateTimeUtils.getZone(zone);\nChronology chrono = getChronology().withZone(zone);\nlong localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;\nlong instant = zone.convertLocalToUTC(localMillis, false);\ninstant = chrono.dayOfMonth().roundFloor(instant);\nreturn new DateTime(instant, chrono);\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundCeiling(J)J",
                                    "method_body": "public long roundCeiling(long instant) {\nint year = get(instant);\nlong yearStartMillis = iChronology.getYearMillis(year);\nif (instant != yearStartMillis) {\ninstant = iChronology.getYearMillis(year + 1);\nreturn instant;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:<init>(Lorg/joda/time/chrono/JulianChronology;Lorg/joda/time/chrono/GregorianChronology;Lorg/joda/time/Instant;)V",
                                    "method_body": "private GJChronology(JulianChronology julian,\nsuper(null, new Object[] {julian, gregorian, cutoverInstant});\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:convertByYear(JLorg/joda/time/Chronology;Lorg/joda/time/Chronology;)J",
                                    "method_body": "private static long convertByYear(long instant, Chronology from, Chronology to) {\nreturn to.getDateTimeMillis\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nsynchronized (cCache) {\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i = chronos.size(); --i >= 0;) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nif (zone == DateTimeZone.UTC) {\nchrono = new GJChronology\nchronos.add(chrono);\n}\nreturn chrono;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nObject[] params = (Object[])getParam();\nJulianChronology julian = (JulianChronology)params[0];\nGregorianChronology gregorian = (GregorianChronology)params[1];\nInstant cutoverInstant = (Instant)params[2];\niCutoverMillis = cutoverInstant.getMillis();\niJulianChronology = julian;\niGregorianChronology = gregorian;\niCutoverInstant = cutoverInstant;\nif (getBase() != null) {\nif (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\niGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);\nfields.copyFieldsFrom(gregorian);\nif (gregorian.millisOfDay().get(iCutoverMillis) == 0) {\nfields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\nfields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\nfields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\nfields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\nfields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\nfields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\nfields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\nfields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\nfields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\nfields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\nfields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\nfields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\nlong cutover = gregorian.year().roundCeiling(iCutoverMillis);\nfields.dayOfYear = new CutoverField(\nlong cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\nfields.weekOfWeekyear = new CutoverField(\nfields.year = new ImpreciseCutoverField(\nfields.years = fields.year.getDurationField();\nfields.yearOfEra = new ImpreciseCutoverField(\nfields.yearOfCentury = new ImpreciseCutoverField(\nfields.centuryOfEra = new ImpreciseCutoverField(\nfields.centuries = fields.centuryOfEra.getDurationField();\nfields.monthOfYear = new ImpreciseCutoverField(\nfields.months = fields.monthOfYear.getDurationField();\nfields.weekyear = new ImpreciseCutoverField(\nfields.weekyearOfCentury = new ImpreciseCutoverField(\nfields.weekyears = fields.weekyear.getDurationField();\nCutoverField cf = new CutoverField\ncf.iRangeDurationField = fields.months;\nfields.dayOfMonth = cf;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:julianToGregorianByYear(J)J",
                                    "method_body": "long julianToGregorianByYear(long instant) {\nreturn convertByYear(instant, iJulianChronology, iGregorianChronology);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
                                    "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\nthis(julianField, gregorianField, cutoverMillis, false);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V",
                                    "method_body": "CutoverField(DateTimeField julianField, DateTimeField gregorianField,\nlong cutoverMillis, boolean convertByWeekyear) {\nsuper(gregorianField.getType());\niJulianField = julianField;\niGregorianField = gregorianField;\niCutover = cutoverMillis;\niConvertByWeekyear = convertByWeekyear;\niDurationField = gregorianField.getDurationField();\nDurationField rangeField = gregorianField.getRangeDurationField();\nif (rangeField == null) {\nrangeField = julianField.getRangeDurationField();\niRangeDurationField = rangeField;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V",
                                    "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\nthis(julianField, gregorianField, null, cutoverMillis, false);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;J)V",
                                    "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\nthis(julianField, gregorianField, durationField, cutoverMillis, false);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$ImpreciseCutoverField:<init>(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V",
                                    "method_body": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n{\nsuper(julianField, gregorianField, cutoverMillis, convertByWeekyear);\nif (durationField == null) {\ndurationField = new LinkedDurationField(iDurationField, this);\niDurationField = durationField;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$LinkedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;)V",
                                    "method_body": "LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\nsuper(durationField, durationField.getType());\niField = dateTimeField;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nreturn set(instant, get(instant) + years);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:roundCeiling(J)J",
                                    "method_body": "public abstract long roundFloor(long instant);\nlong newInstant = roundFloor(instant);\nif (newInstant != instant) {\ninstant = add(newInstant, 1);\nreturn instant;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn (year & 3) == 0;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint relativeYear = year - 1968;\nif (relativeYear <= 0) {\nleapYears = (relativeYear + 3) >> 2;\nlong millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;\nreturn millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.SkipDateTimeField:get(J)I",
                                    "method_body": "public int get(long millis) {\nint value = super.get(millis);\nif (value <= iSkip) {\nvalue--;\nreturn value;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\n} else if ( workWoyYear > year ) {\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iField.get(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\ninstant = iChronology.weekOfWeekyear().roundFloor(instant);\nint wow = iChronology.getWeekOfWeekyear(instant);\nif (wow > 1) {\ninstant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);\nreturn instant;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.07
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\nreturn year;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn 1;\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:<init>(J)V",
                                    "method_body": "public Instant(long instant) {\nsuper();\niMillis = instant;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.JulianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;",
                                    "method_body": "public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nJulianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\n}\nreturn chrono;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\ninstant += 1;\nreturn instant - instant % iUnitMillis - iUnitMillis;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.field.DelegatedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nleapYears--;\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "YearInfo(int year, long firstDayMillis) {\niYear = year;\niFirstDayMillis = firstDayMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nGregorianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\n}\nreturn chrono;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags = 0;\niBaseFlags = flags;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "public DecoratedDurationField(DurationField field, DurationFieldType type) {\nsuper(type);\nif (field == null) {\nif (!field.isSupported()) {\niField = field;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iWallOffset;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}",
                                    "suspicious_rank": 0.02
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\nint offsetLocal = getOffset(instantLocal);\nint offset = getOffset(instantLocal - offsetLocal);\nif (offsetLocal != offset) {\nlong instantUTC = instantLocal - offset;\nif ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {\nreturn instantUTC;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstance(\nreturn getInstance(zone, gregorianCutover, 4);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.01
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.01
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.009
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.009
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.009
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.008
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.008
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)",
                            "test_id": 4
                        }
                    ]
                },
                {
                    "bug_id": 7,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo_endOfYear",
                            "test_body": "957: public void testParseInto_monthDay_feb29_tokyo_endOfYear() {\n958: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n959: MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);\n960: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n961: assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);\n962: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:prependMessage(Ljava/lang/String;)V",
                                    "method_body": "public void prependMessage(String message) {\nif (iMessage == null) {\n} else if (message != null) {\niMessage = message + \": \" + iMessage;\n}",
                                    "suspicious_rank": 1.0
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nint defaultYear = chrono.year().get(instantLocal);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.124
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n} catch (IllegalFieldValueException e) {\nif (text != null) {\ne.prependMessage(\"Cannot parse \\\"\" + text + '\"');\nthrow e;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.contains(null) || printerList.isEmpty()) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.contains(null) || parserList.isEmpty()) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nthisDom = maxDom;\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = transitions[i - 1];\nif (prev > Long.MIN_VALUE) {\nreturn prev - 1;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\nat org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:366)\nat org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:359)\nat org.joda.time.format.DateTimeFormatter.parseInto(DateTimeFormatter.java:715)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo_endOfYear(TestDateTimeFormatter.java:960)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork_startOfYear",
                            "test_body": "929: public void testParseInto_monthDay_feb29_newYork_startOfYear() {\n930: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n931: MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);\n932: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n933: assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);\n934: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:prependMessage(Ljava/lang/String;)V",
                                    "method_body": "public void prependMessage(String message) {\nif (iMessage == null) {\n} else if (message != null) {\niMessage = message + \": \" + iMessage;\n}",
                                    "suspicious_rank": 1.0
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nint defaultYear = chrono.year().get(instantLocal);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.124
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n} catch (IllegalFieldValueException e) {\nif (text != null) {\ne.prependMessage(\"Cannot parse \\\"\" + text + '\"');\nthrow e;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long localInstant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(localInstant);\nlocalInstant -= offset;\nif (offset != zone.getOffset(localInstant)) {\nreturn localInstant;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.contains(null) || printerList.isEmpty()) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.contains(null) || parserList.isEmpty()) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nthisDom = maxDom;\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\nreturn info;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\nat org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:366)\nat org.joda.time.format.DateTimeParserBucket.computeMillis(DateTimeParserBucket.java:359)\nat org.joda.time.format.DateTimeFormatter.parseInto(DateTimeFormatter.java:715)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork_startOfYear(TestDateTimeFormatter.java:932)",
                            "test_id": 1
                        }
                    ]
                },
                {
                    "bug_id": 8,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
                            "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: 307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\n308: assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\n309: try {\n310: DateTimeZone.forOffsetHoursMinutes(2, -15);\n311: fail();\n312: } catch (IllegalArgumentException ex) {}\n313: 314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\n315: assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\n316: assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n317: 318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n319: assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\n320: assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n321: 322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n323: try {\n324: DateTimeZone.forOffsetHoursMinutes(2, 60);\n325: fail();\n326: } catch (IllegalArgumentException ex) {}\n327: try {\n328: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n329: fail();\n330: } catch (IllegalArgumentException ex) {}\n331: try {\n332: DateTimeZone.forOffsetHoursMinutes(24, 0);\n333: fail();\n334: } catch (IllegalArgumentException ex) {}\n335: try {\n336: DateTimeZone.forOffsetHoursMinutes(-24, 0);\n337: fail();\n338: } catch (IllegalArgumentException ex) {}\n339: }        \n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:parseOffset(Ljava/lang/String;)I",
                                    "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\nif (cOffsetFormatter == null) {\nreturn cOffsetFormatter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nreturn DateTimeZone.UTC;\nif (hoursOffset < -23 || hoursOffset > 23) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nthrow new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\nint offset = 0;\nint hoursInMinutes = hoursOffset * 60;\nif (hoursInMinutes < 0) {\nminutesOffset = hoursInMinutes + minutesOffset;\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nif (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\nzone = new FixedDateTimeZone(id, null, offset, offset);\niFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\nreturn zone;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nbuf.append('-');\noffset = -offset;\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
                                    "method_body": "public void setOffset(Integer offset) {\niSavedState = null;\niOffset = offset;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(Integer.valueOf(negative ? -offset : offset));\nreturn position;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nif (resetFields) {\nfor (int i = 0; i < count; i++) {\n}\nif (iOffset != null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nif (id.startsWith(\"+\") || id.startsWith(\"-\")) {\nint offset = parseOffset(id);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\nid = printOffset(offset);\nreturn fixedOffsetZone(id, offset);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nreturn null;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone$1:<init>()V",
                                    "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}"
                                }
                            ],
                            "stack_trace": "java.lang.IllegalArgumentException: Minutes out of range: -15\nat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:316)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 9,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
                            "test_body": "303: public void testForOffsetHoursMinutes_int_int() {\n304: assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n305: assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n306: assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n307: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n308: assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n309: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n310: try {\n311: DateTimeZone.forOffsetHoursMinutes(2, 60);\n312: fail();\n313: } catch (IllegalArgumentException ex) {}\n314: try {\n315: DateTimeZone.forOffsetHoursMinutes(-2, 60);\n316: fail();\n317: } catch (IllegalArgumentException ex) {}\n318: try {\n319: DateTimeZone.forOffsetHoursMinutes(2, -1);\n320: fail();\n321: } catch (IllegalArgumentException ex) {}\n322: try {\n323: DateTimeZone.forOffsetHoursMinutes(-2, -1);\n324: fail();\n325: } catch (IllegalArgumentException ex) {}\n326: try {\n327: DateTimeZone.forOffsetHoursMinutes(24, 0);\n328: fail();\n329: } catch (IllegalArgumentException ex) {}\n330: try {\n331: DateTimeZone.forOffsetHoursMinutes(-24, 0);\n332: fail();\n333: } catch (IllegalArgumentException ex) {}\n334: }        \n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\ncOffsetFormatter = new DateTimeFormatterBuilder()\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nreturn DateTimeZone.UTC;\n}\nthrow new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n}\ntry {\nif (hoursInMinutes < 0) {\nminutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n} else {\n}\n} catch (ArithmeticException ex) {\nreturn forOffsetMillis(offset);\n}",
                                    "suspicious_rank": 0.127
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nreturn DateTimeZone.UTC;\niFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\n}\niFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\nreturn zone;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nif (offset >= 0) {\nbuf.append('+');\n} else {\noffset = -offset;\n}\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\n\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(Ljava/lang/Integer;)V",
                                    "method_body": "public void setOffset(Integer offset) {\niSavedState = null;\niOffset = offset;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(Integer.valueOf(negative ? -offset : offset));\nreturn position;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nif (resetFields) {\nfor (int i = 0; i < count; i++) {\n}\nif (iOffset != null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nif (sm != null) {\nsm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));\nthrow new IllegalArgumentException(\"The datetime zone must not be null\");\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nreturn getDefault();\nreturn DateTimeZone.UTC;\nif (zone != null) {\nreturn zone;\nint offset = parseOffset(id);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\nreturn fixedOffsetZone(id, offset);\n}\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\nthrow new IllegalArgumentException(\"Id must not be null\");\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nreturn null;\n}",
                                    "suspicious_rank": 0.016
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:328)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 10,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay",
                            "test_body": "123: public void testFactory_daysBetween_RPartial_MonthDay() {\n124: MonthDay start1 = new MonthDay(2, 1);\n125: MonthDay start2 = new MonthDay(2, 28);\n126: MonthDay end1 = new MonthDay(2, 28);\n127: MonthDay end2 = new MonthDay(2, 29);\n128: 129: assertEquals(27, Days.daysBetween(start1, end1).getDays());\n130: assertEquals(28, Days.daysBetween(start1, end2).getDays());\n131: assertEquals(0, Days.daysBetween(start2, end1).getDays());\n132: assertEquals(1, Days.daysBetween(start2, end2).getDays());\n133: 134: assertEquals(-27, Days.daysBetween(end1, start1).getDays());\n135: assertEquals(-28, Days.daysBetween(end2, start1).getDays());\n136: assertEquals(0, Days.daysBetween(end1, start2).getDays());\n137: assertEquals(-1, Days.daysBetween(end2, start2).getDays());\n138: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:between(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I",
                                    "method_body": "protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\nif (start == null || end == null) {\nif (start.size() != end.size()) {\nfor (int i = 0, isize = start.size(); i < isize; i++) {\nif (start.getFieldType(i) != end.getFieldType(i)) {\nif (DateTimeUtils.isContiguous(start) == false) {\nChronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\nint[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\nreturn values[0];\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.Days:daysBetween(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;)Lorg/joda/time/Days;",
                                    "method_body": "public static Days daysBetween(ReadablePartial start, ReadablePartial end) {\nif (start instanceof LocalDate && end instanceof LocalDate)   {\nint amount = BaseSingleFieldPeriod.between(start, end, ZERO);\nreturn Days.days(amount);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.Days:getFieldType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType() {\nreturn DurationFieldType.days();\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nif (index != 0) {\nreturn getFieldType();\n}",
                                    "suspicious_rank": 0.302
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:size()I",
                                    "method_body": "public abstract DurationFieldType getFieldType();\nreturn 1;\n}",
                                    "suspicious_rank": 0.295
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.263
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(II)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth) {\nthis(monthOfYear, dayOfMonth, null);\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.Days:getDays()I",
                                    "method_body": "public int getDays() {\nreturn getValue();\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\nint size = period.size();\nint[] values = new int[size];\nif (startInstant != endInstant) {\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nint value = field.getDifference(endInstant, startInstant);\nstartInstant = field.add(startInstant, value);\nvalues[i] = value;\nreturn values;\n}",
                                    "suspicious_rank": 0.139
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.139
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.135
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.Days:days(I)Lorg/joda/time/Days;",
                                    "method_body": "public static Days days(int days) {\nswitch (days) {\nreturn new Days(days);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:localDateParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter localDateParser() {\nif (ldp == null) {\nldp = dateElementParser().withZoneUTC();\nreturn ldp;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.Days:<init>(I)V",
                                    "method_body": "private Days(int days) {\nsuper(days);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.111
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getValue()I",
                                    "method_body": "protected int getValue() {\nreturn iPeriod;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:<init>(I)V",
                                    "method_body": "protected BaseSingleFieldPeriod(int period) {\nsuper();\niPeriod = period;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withZoneUTC()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withZoneUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\nint length = pattern.length();\nint[] indexRef = new int[1];\nfor (int i=0; i<length; i++) {\nindexRef[0] = i;\nString token = parseToken(pattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nif (tokenLen >= 3) {\nbuilder.appendMonthOfYear(tokenLen);\nbreak;\nbuilder.appendDayOfMonth(tokenLen);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nbuilder.appendLiteral(sub.charAt(0));\nbuilder.appendLiteral(new String(sub));\nbreak;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "private static String parseToken(String pattern, int[] indexRef) {\nStringBuilder buf = new StringBuilder();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withZone(DateTimeZone zone) {\nif (iZone == zone) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateElementParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateElementParser() {\nif (dpe == null) {\nreturn dpe;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iValue.length();\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(String text) {\nif (text == null) {\nswitch (text.length()) {\nreturn append0(new StringLiteral(text));\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:<init>(Ljava/lang/String;)V",
                                    "method_body": "StringLiteral(String value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iValue.length();\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iParsedLengthEstimate;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:<init>([Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "MatchingParser(DateTimeParser[] parsers) {\nsuper();\niParsers = parsers;\nint est = 0;\nfor (int i=parsers.length; --i>=0 ;) {\nDateTimeParser parser = parsers[i];\nif (parser != null) {\nint len = parser.estimateParsedLength();\nif (len > est) {\nest = len;\n}\niParsedLengthEstimate = est;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iParsedLengthEstimate;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendOptional(Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendOptional(DateTimeParser parser) {\ncheckParser(parser);\nDateTimeParser[] parsers = new DateTimeParser[] {parser, null};\nreturn append0(null, new MatchingParser(parsers));\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:checkParser(Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "private void checkParser(DateTimeParser parser) {\nif (parser == null) {\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\nif ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\nreturn diff;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.contains(null) || printerList.isEmpty()) {\niPrinters = null;\niPrintedLengthEstimate = 0;\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.contains(null) || parserList.isEmpty()) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof Composite) {\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.021
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Days.daysBetween(Days.java:141)\nat org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay(TestDays.java:130)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay",
                            "test_body": "130: public void testFactory_monthsBetween_RPartial_MonthDay() {\n131: MonthDay start = new MonthDay(2, 1);\n132: MonthDay end1 = new MonthDay(2, 28);\n133: MonthDay end2 = new MonthDay(2, 29);\n134: MonthDay end3 = new MonthDay(3, 1);\n135: 136: assertEquals(0, Months.monthsBetween(start, end1).getMonths());\n137: assertEquals(0, Months.monthsBetween(start, end2).getMonths());\n138: assertEquals(1, Months.monthsBetween(start, end3).getMonths());\n139: 140: assertEquals(0, Months.monthsBetween(end1, start).getMonths());\n141: assertEquals(0, Months.monthsBetween(end2, start).getMonths());\n142: assertEquals(-1, Months.monthsBetween(end3, start).getMonths());\n143: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:between(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I",
                                    "method_body": "protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\nif (start == null || end == null) {\nif (start.size() != end.size()) {\nfor (int i = 0, isize = start.size(); i < isize; i++) {\nif (start.getFieldType(i) != end.getFieldType(i)) {\nif (DateTimeUtils.isContiguous(start) == false) {\nChronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\nint[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\nreturn values[0];\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.Months:monthsBetween(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;)Lorg/joda/time/Months;",
                                    "method_body": "public static Months monthsBetween(ReadablePartial start, ReadablePartial end) {\nif (start instanceof LocalDate && end instanceof LocalDate)   {\nint amount = BaseSingleFieldPeriod.between(start, end, ZERO);\nreturn Months.months(amount);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.Months:getFieldType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType() {\nreturn DurationFieldType.months();\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nif (index != 0) {\nreturn getFieldType();\n}",
                                    "suspicious_rank": 0.302
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:size()I",
                                    "method_body": "public abstract DurationFieldType getFieldType();\nreturn 1;\n}",
                                    "suspicious_rank": 0.295
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.263
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(II)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth) {\nthis(monthOfYear, dayOfMonth, null);\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.Months:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getValue();\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.Months:months(I)Lorg/joda/time/Months;",
                                    "method_body": "public static Months months(int months) {\nswitch (months) {\nreturn ZERO;\n}",
                                    "suspicious_rank": 0.147
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;JJ)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long startInstant, long endInstant) {\nint size = period.size();\nint[] values = new int[size];\nif (startInstant != endInstant) {\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nint value = field.getDifference(endInstant, startInstant);\nstartInstant = field.add(startInstant, value);\nvalues[i] = value;\nreturn values;\n}",
                                    "suspicious_rank": 0.139
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.139
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.135
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuilder buf = new StringBuilder()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.111
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseSingleFieldPeriod:getValue()I",
                                    "method_body": "protected int getValue() {\nreturn iPeriod;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getDifferenceAsLong(JJ)J",
                                    "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nif (minuendInstant < subtrahendInstant) {\nint minuendYear = iChronology.getYear(minuendInstant);\nint minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);\nint subtrahendYear = iChronology.getYear(subtrahendInstant);\nint subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);\nlong difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;\nint minuendDom = iChronology.getDayOfMonth\nif (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {\nint subtrahendDom = iChronology.getDayOfMonth\nif (subtrahendDom > minuendDom) {\nlong minuendRem = minuendInstant\nlong subtrahendRem = subtrahendInstant\nif (minuendRem < subtrahendRem) {\nreturn difference;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn ImpreciseDateTimeField.this\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDifference(JJ)I",
                                    "method_body": "public abstract int get(long instant);\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.073
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn ImpreciseDateTimeField.this.add(instant, value);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.033
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nreturn instant; // the easy case\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\nat org.joda.time.base.BaseSingleFieldPeriod.between(BaseSingleFieldPeriod.java:104)\nat org.joda.time.Months.monthsBetween(Months.java:161)\nat org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay(TestMonths.java:137)",
                            "test_id": 1
                        }
                    ]
                },
                {
                    "bug_id": 12,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1",
                            "test_body": "150: public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n151: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n152: cal.set(Calendar.ERA, GregorianCalendar.BC);\n153: cal.set(Calendar.MILLISECOND, 7);\n154: LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n155: assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n156: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.471
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nlong millis = partial.getChronology().set(partial, 0L);\nprintTo(buf, null, millis, partial.getChronology());\n}\n}",
                                    "suspicious_rank": 0.324
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nswitch (index) {\nreturn getChronology().year().get(getLocalMillis());\nreturn getChronology().monthOfYear().get(getLocalMillis());\nreturn getChronology().dayOfMonth().get(getLocalMillis());\nreturn getChronology().millisOfDay().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public static LocalDateTime fromDateFields(Date date) {\nif (date == null) {\nreturn new LocalDateTime(\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "public int size() {\nreturn 4;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.year();\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\nreturn chrono.millisOfDay();\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDateTime) {\nLocalDateTime other = (LocalDateTime) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "public LocalDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.149
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.121
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (buf != null) {\nbuf.append('0');\nminDigits--;\ndigits--;\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn (instant + 1) % iUnitMillis + iUnitMillis - 1;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDateTime_Constructors.java:155)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3",
                            "test_body": "120: public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n121: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n122: cal.set(Calendar.ERA, GregorianCalendar.BC);\n123: cal.set(Calendar.MILLISECOND, 7);\n124: LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n125: assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n126: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.471
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public static LocalDateTime fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDateTime(\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nlong millis = partial.getChronology().set(partial, 0L);\nprintTo(buf, null, millis, partial.getChronology());\n}\n}",
                                    "suspicious_rank": 0.324
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nswitch (index) {\nreturn getChronology().year().get(getLocalMillis());\nreturn getChronology().monthOfYear().get(getLocalMillis());\nreturn getChronology().dayOfMonth().get(getLocalMillis());\nreturn getChronology().millisOfDay().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "public int size() {\nreturn 4;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.year();\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\nreturn chrono.millisOfDay();\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDateTime) {\nLocalDateTime other = (LocalDateTime) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "public LocalDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.149
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.121
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (buf != null) {\nbuf.append('0');\nminDigits--;\ndigits--;\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn (instant + 1) % iUnitMillis + iUnitMillis - 1;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "YearInfo(int year, long firstDayMillis) {\niYear = year;\niFirstDayMillis = firstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDateTime_Constructors.java:125)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1",
                            "test_body": "112: public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n113: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n114: cal.set(Calendar.ERA, GregorianCalendar.BC);\n115: cal.set(Calendar.MILLISECOND, 7);\n116: LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n117: assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n118: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.471
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public static LocalDateTime fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDateTime(\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nlong millis = partial.getChronology().set(partial, 0L);\nprintTo(buf, null, millis, partial.getChronology());\n}\n}",
                                    "suspicious_rank": 0.324
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nswitch (index) {\nreturn getChronology().year().get(getLocalMillis());\nreturn getChronology().monthOfYear().get(getLocalMillis());\nreturn getChronology().dayOfMonth().get(getLocalMillis());\nreturn getChronology().millisOfDay().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "public int size() {\nreturn 4;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.year();\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\nreturn chrono.millisOfDay();\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDateTime) {\nLocalDateTime other = (LocalDateTime) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "public LocalDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.149
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.121
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (buf != null) {\nbuf.append('0');\nminDigits--;\ndigits--;\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn (instant + 1) % iUnitMillis + iUnitMillis - 1;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "YearInfo(int year, long firstDayMillis) {\niYear = year;\niFirstDayMillis = firstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDateTime_Constructors.java:117)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1",
                            "test_body": "142: public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n143: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n144: cal.set(Calendar.ERA, GregorianCalendar.BC);\n145: cal.set(Calendar.MILLISECOND, 7);\n146: LocalDate expected = new LocalDate(0, 2, 3);\n147: assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n148: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public static LocalDate fromDateFields(Date date) {\nif (date == null) {\nreturn new LocalDate(\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.049
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDate_Constructors.java:147)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1",
                            "test_body": "104: public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n105: GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n106: cal.set(Calendar.ERA, GregorianCalendar.BC);\n107: cal.set(Calendar.MILLISECOND, 7);\n108: LocalDate expected = new LocalDate(0, 2, 3);\n109: assertEquals(expected, LocalDate.fromCalendarFields(cal));\n110: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public static LocalDate fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDate(\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.049
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDate_Constructors.java:109)",
                            "test_id": 4
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3",
                            "test_body": "150: public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n151: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n152: cal.set(Calendar.ERA, GregorianCalendar.BC);\n153: cal.set(Calendar.MILLISECOND, 7);\n154: LocalDate expected = new LocalDate(-2, 2, 3);\n155: assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n156: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public static LocalDate fromDateFields(Date date) {\nif (date == null) {\nreturn new LocalDate(\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.049
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDate_Constructors.java:155)",
                            "test_id": 5
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3",
                            "test_body": "112: public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n113: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n114: cal.set(Calendar.ERA, GregorianCalendar.BC);\n115: cal.set(Calendar.MILLISECOND, 7);\n116: LocalDate expected = new LocalDate(-2, 2, 3);\n117: assertEquals(expected, LocalDate.fromCalendarFields(cal));\n118: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:fromCalendarFields(Ljava/util/Calendar;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public static LocalDate fromCalendarFields(Calendar calendar) {\nif (calendar == null) {\nint yearOfEra = calendar.get(Calendar.YEAR);\nreturn new LocalDate(\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(III)V",
                                    "method_body": "public LocalDate(\nthis(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.14
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 6) == 6) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n}",
                                    "suspicious_rank": 0.125
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.049
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDate_Constructors.java:117)",
                            "test_id": 6
                        },
                        {
                            "test_name": "org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3",
                            "test_body": "158: public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n159: GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n160: cal.set(Calendar.ERA, GregorianCalendar.BC);\n161: cal.set(Calendar.MILLISECOND, 7);\n162: LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n163: assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n164: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.471
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.408
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nlong millis = partial.getChronology().set(partial, 0L);\nprintTo(buf, null, millis, partial.getChronology());\n}\n}",
                                    "suspicious_rank": 0.324
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nif (type == null) {\nreturn type.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.316
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nswitch (index) {\nreturn getChronology().year().get(getLocalMillis());\nreturn getChronology().monthOfYear().get(getLocalMillis());\nreturn getChronology().dayOfMonth().get(getLocalMillis());\nreturn getChronology().millisOfDay().get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.309
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.254
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.252
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.251
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:fromDateFields(Ljava/util/Date;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public static LocalDateTime fromDateFields(Date date) {\nif (date == null) {\nreturn new LocalDateTime(\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:size()I",
                                    "method_body": "public int size() {\nreturn 4;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.year();\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\nreturn chrono.millisOfDay();\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDateTime) {\nLocalDateTime other = (LocalDateTime) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:set(Lorg/joda/time/ReadablePartial;J)J",
                                    "method_body": "public long set(ReadablePartial partial, long instant) {\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));\nreturn instant;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIII)V",
                                    "method_body": "public LocalDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.149
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "protected abstract DateTimeField getField(int index, Chronology chrono);\nreturn getField(index, getChronology()).getType();\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.121
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\nreturn chronology.millisOfDay();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (buf != null) {\nbuf.append('0');\nminDigits--;\ndigits--;\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn (instant + 1) % iUnitMillis + iUnitMillis - 1;\n}",
                                    "suspicious_rank": 0.074
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\nreturn (DateTimeConstants.MILLIS_PER_DAY - 1)\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\ni2 = i2 - unitMillis + 1;\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDateTime_Constructors.java:163)",
                            "test_id": 7
                        }
                    ]
                },
                {
                    "bug_id": 13,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative",
                            "test_body": "118: public void testFormatStandard_negative() {\n119: Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n120: assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n121: 122: p = Period.years(-54);\n123: assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n124: 125: p = Period.seconds(4).withMillis(-8);\n126: assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n127: 128: p = Period.seconds(-4).withMillis(8);\n129: assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n130: 131: p = Period.seconds(-23);\n132: assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n133: 134: p = Period.millis(-8);\n135: assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n136: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.Period:withMillis(I)Lorg/joda/time/Period;",
                                    "method_body": "public Period withMillis(int millis) {\nint[] values = getValues();  // cloned\ngetPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\nreturn new Period(values, getPeriodType());\n}",
                                    "suspicious_rank": 0.707
                                },
                                {
                                    "method_signature": "org.joda.time.Period:millis(I)Lorg/joda/time/Period;",
                                    "method_body": "public static Period millis(int millis) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.378
                                },
                                {
                                    "method_signature": "org.joda.time.Period:seconds(I)Lorg/joda/time/Period;",
                                    "method_body": "public static Period seconds(int seconds) {\nreturn new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.333
                                },
                                {
                                    "method_signature": "org.joda.time.Period:years(I)Lorg/joda/time/Period;",
                                    "method_body": "public static Period years(int years) {\nreturn new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:setIndexedField(Lorg/joda/time/ReadablePeriod;I[II)Z",
                                    "method_body": "boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\nint realIndex = iIndices[index];\nif (realIndex == -1) {\nvalues[realIndex] = newValue;\nreturn true;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:calculatePrintedLength(I)I",
                                    "method_body": "int calculatePrintedLength(int value);\nreturn iText.length();\nbuf.append(iText);\n}\n}",
                                    "suspicious_rank": 0.204
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:printTo(Ljava/lang/StringBuffer;I)V",
                                    "method_body": "int calculatePrintedLength(int value);\nreturn iText.length();\nbuf.append(iText);\n}\n}",
                                    "suspicious_rank": 0.2
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nreturn iText.length();\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nbuf.append(iText);\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nPeriodPrinter before = iBeforePrinter;\nPeriodPrinter after = iAfterPrinter;\nint sum = before.calculatePrintedLength(period, locale)\nif (iUseBefore) {\n} else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\nsum += iText.length();\nreturn sum;\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nPeriodPrinter before = iBeforePrinter;\nPeriodPrinter after = iAfterPrinter;\nbefore.printTo(buf, period, locale);\nif (iUseBefore) {\n} else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\nbuf.append(iText);\nafter.printTo(buf, period, locale);\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isZero(Lorg/joda/time/ReadablePeriod;)Z",
                                    "method_body": "boolean isZero(ReadablePeriod period) {\nfor (int i = 0, isize = period.size(); i < isize; i++) {\nif (period.getValue(i) != 0) {\nreturn false;\n}",
                                    "suspicious_rank": 0.12
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:countFieldsToPrint(Lorg/joda/time/ReadablePeriod;ILjava/util/Locale;)I",
                                    "method_body": "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\nif (stopAt <= 0) {\nif (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {\nreturn 1;\nreturn 0;\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:countFieldsToPrint(Lorg/joda/time/ReadablePeriod;ILjava/util/Locale;)I",
                                    "method_body": "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\nint sum = 0;\nPeriodPrinter[] printers = iPrinters;\nfor (int i=printers.length; sum < stopAt && --i>=0; ) {\nsum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);\nreturn sum;\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>([ILorg/joda/time/PeriodType;)V",
                                    "method_body": "protected BasePeriod(int[] values, PeriodType type) {\nsuper();\niType = type;\niValues = values;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>([ILorg/joda/time/PeriodType;)V",
                                    "method_body": "private Period(int[] values, PeriodType type) {\nsuper(values, type);\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:isSupported(Lorg/joda/time/PeriodType;I)Z",
                                    "method_body": "boolean isSupported(PeriodType type, int field) {\nswitch (field) {\nreturn type.isSupported(DurationFieldType.years());\nreturn type.isSupported(DurationFieldType.months());\nreturn type.isSupported(DurationFieldType.weeks());\nreturn type.isSupported(DurationFieldType.days());\nreturn type.isSupported(DurationFieldType.hours());\nreturn type.isSupported(DurationFieldType.minutes());\nreturn type.isSupported(DurationFieldType.seconds()) ||\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:isSupported(Lorg/joda/time/DurationFieldType;)Z",
                                    "method_body": "public boolean isSupported(DurationFieldType type) {\nreturn (indexOf(type) >= 0);\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:calculateDigitCount(J)I",
                                    "method_body": "public static int calculateDigitCount(long value) {\nif (value < 0) {\nif (value != Long.MIN_VALUE) {\nreturn calculateDigitCount(-value) + 1;\nreturn\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn 0;\nint sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\nif (iFieldType >= SECONDS_MILLIS) {\nsum = Math.max(sum, 4);\nsum++;\nif (iFieldType == SECONDS_OPTIONAL_MILLIS &&\nsum -= 4; // remove three digits and decimal point\nvalueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\nint value = (int) valueLong;\nif (iPrefix != null) {\nif (iSuffix != null) {\nsum += iSuffix.calculatePrintedLength(value);\nreturn sum;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nlong valueLong = getFieldValue(period);\nif (valueLong == Long.MAX_VALUE) {\nreturn;\nint value = (int) valueLong;\nif (iFieldType >= SECONDS_MILLIS) {\nvalue = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\nif (iPrefix != null) {\nint minDigits = iMinPrintedDigits;\nif (minDigits <= 1) {\nFormatUtils.appendUnpaddedInteger(buf, value);\nif (iFieldType >= SECONDS_MILLIS) {\nint dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\nif (iFieldType == SECONDS_MILLIS || dp > 0) {\nbuf.append('.');\nFormatUtils.appendPaddedInteger(buf, dp, 3);\nif (iSuffix != null) {\niSuffix.printTo(buf, value);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:calculatePrintedLength(Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)I",
                                    "method_body": "public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\nint sum = 0;\nPeriodPrinter[] printers = iPrinters;\nfor (int i=printers.length; --i>=0; ) {\nsum += printers[i].calculatePrintedLength(period, locale);\nreturn sum;\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldValue(Lorg/joda/time/ReadablePeriod;)J",
                                    "method_body": "long getFieldValue(ReadablePeriod period) {\nif (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {\ntype = period.getPeriodType();\nif (type != null && isSupported(type, iFieldType) == false) {\nswitch (iFieldType) {\nvalue = period.get(DurationFieldType.years());\nbreak;\nvalue = period.get(DurationFieldType.months());\nbreak;\nvalue = period.get(DurationFieldType.weeks());\nbreak;\nvalue = period.get(DurationFieldType.days());\nbreak;\nvalue = period.get(DurationFieldType.hours());\nbreak;\nvalue = period.get(DurationFieldType.minutes());\nbreak;\nint seconds = period.get(DurationFieldType.seconds());\nint millis = period.get(DurationFieldType.millis());\nvalue = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;\nif (value == 0) {\nswitch (iPrintZeroSetting) {\nif (isZero(period) && iFieldFormatters[iFieldType] == this) {\nreturn Long.MAX_VALUE;\nreturn value;\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePeriod;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\nPeriodPrinter[] printers = iPrinters;\nint len = printers.length;\nfor (int i=0; i<len; i++) {\nprinters[i].printTo(buf, period, locale);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:print(Lorg/joda/time/ReadablePeriod;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePeriod period) {\ncheckPrinter();\ncheckPeriod(period);\nPeriodPrinter printer = getPrinter();\nStringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\nprinter.printTo(buf, period, iLocale);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkPrinter()V",
                                    "method_body": "private void checkPrinter() {\nif (iPrinter == null) {\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:get(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int get(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn getValue(index);\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "private void checkPeriod(ReadablePeriod period) {\nif (period == null) {\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendUnpaddedInteger(Ljava/lang/StringBuffer;I)V",
                                    "method_body": "public static void appendUnpaddedInteger(StringBuffer buf, int value) {\nif (value < 0) {\nbuf.append('-');\nif (value != Integer.MIN_VALUE) {\nvalue = -value;\nif (value < 10) {\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(IIIIIIII)V",
                                    "method_body": "public Period(int years, int months, int weeks, int days,\nsuper(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());\n}",
                                    "suspicious_rank": 0.073
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\nreturn cStandard;\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(IIIIIIIILorg/joda/time/PeriodType;)V",
                                    "method_body": "protected BasePeriod(int years, int months, int weeks, int days,\nsuper();\ntype = checkPeriodType(type);\niType = type;\niValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(IIIIIIII)[I",
                                    "method_body": "private int[] setPeriodInternal(int years, int months, int weeks, int days,\nint[] newValues = new int[size()];\ncheckAndUpdate(DurationFieldType.years(), newValues, years);\ncheckAndUpdate(DurationFieldType.months(), newValues, months);\ncheckAndUpdate(DurationFieldType.weeks(), newValues, weeks);\ncheckAndUpdate(DurationFieldType.days(), newValues, days);\ncheckAndUpdate(DurationFieldType.hours(), newValues, hours);\ncheckAndUpdate(DurationFieldType.minutes(), newValues, minutes);\ncheckAndUpdate(DurationFieldType.seconds(), newValues, seconds);\ncheckAndUpdate(DurationFieldType.millis(), newValues, millis);\nreturn newValues;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getPrinter()Lorg/joda/time/format/PeriodPrinter;",
                                    "method_body": "public PeriodPrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:size()I",
                                    "method_body": "public int size() {\nreturn getPeriodType().size();\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nif (value < 1000) {\ndigits = 3;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:years()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType years() {\nreturn YEARS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:weeks()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType weeks() {\nreturn WEEKS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:hours()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType hours() {\nreturn HOURS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:minutes()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType minutes() {\nreturn MINUTES_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 14,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust",
                            "test_body": "559: public void testMinusMonths_int_endOfMonthAdjust() {\n560: MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n561: MonthDay result = test.minusMonths(1);\n562: MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n563: assertEquals(expected, result);\n564: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nif (DateTimeUtils.isContiguous(partial)) {\nlong instant = 0L;\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\ninstant = add(instant, valueToAdd);\nreturn iChronology.get(partial, instant);\n}",
                                    "suspicious_rank": 0.617
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay minusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nList<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\nfields.add(DateTimeFieldType.monthOfYear());\nfields.add(DateTimeFieldType.dayOfMonth());\nreturn ISODateTimeFormat.forFields(fields, true, true).print(this);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "public static int safeNegate(int value) {\nif (value == Integer.MIN_VALUE) {\nreturn -value;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:appendSeparator(Lorg/joda/time/format/DateTimeFormatterBuilder;Z)V",
                                    "method_body": "private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\nif (extended) {\nbld.appendLiteral('-');\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateByMonth(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZ)Z",
                                    "method_body": "private static boolean dateByMonth(\nboolean reducedPrec = false;\nif (fields.remove(DateTimeFieldType.year())) {\n} else if (fields.remove(DateTimeFieldType.monthOfYear())) {\nbld.appendLiteral('-');\nbld.appendLiteral('-');\nbld.appendMonthOfYear(2);\nif (fields.remove(DateTimeFieldType.dayOfMonth())) {\nappendSeparator(bld, extended);\nbld.appendDayOfMonth(2);\nreturn reducedPrec;\n}",
                                    "suspicious_rank": 0.147
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
                                    "method_body": "MonthDay(MonthDay partial, int[] values) {\nsuper(partial, values);\n}",
                                    "suspicious_rank": 0.136
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:time(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZZZ)V",
                                    "method_body": "private static void time(\nboolean hour = fields.remove(DateTimeFieldType.hourOfDay());\nboolean minute = fields.remove(DateTimeFieldType.minuteOfHour());\nboolean second = fields.remove(DateTimeFieldType.secondOfMinute());\nboolean milli = fields.remove(DateTimeFieldType.millisOfSecond());\nif (!hour && !minute && !second && !milli) {\nreturn;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:canBuildFormatter()Z",
                                    "method_body": "public boolean canBuildFormatter() {\nreturn isFormatter(getFormatter());\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isFormatter(Object f) {\nreturn (isPrinter(f) || isParser(f));\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:forFields(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forFields(\nif (fields == null || fields.size() == 0) {\nSet<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);\nint inputSize = workingFields.size();\nboolean reducedPrec = false;\nDateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\nif (workingFields.contains(DateTimeFieldType.monthOfYear())) {\nreducedPrec = dateByMonth(bld, workingFields, extended, strictISO);\nboolean datePresent = (workingFields.size() < inputSize);\ntime(bld, workingFields, extended, strictISO, reducedPrec, datePresent);\nif (bld.canBuildFormatter() == false) {\nfields.retainAll(workingFields);\n}\nreturn bld.toFormatter();\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.073
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof ReadablePartial == false) {\nReadablePartial other = (ReadablePartial) partial;\nif (size() != other.size()) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {\nreturn false;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>(Lorg/joda/time/base/BasePartial;[I)V",
                                    "method_body": "protected BasePartial(BasePartial base, int[] values) {\nsuper();\niChronology = base.iChronology;\niValues = values;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nreturn (indexOf(type) != -1);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nreturn getValue(indexOfSupported(type));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DateTimeFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
                                    "method_body": "public int[] get(ReadablePartial partial, long instant) {\nint size = partial.size();\nint[] values = new int[size];\nfor (int i = 0; i < size; i++) {\nvalues[i] = partial.getFieldType(i).getField(this).get(instant);\nreturn values;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\ndayToUse = maxDay;\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.014
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust(TestMonthDay_Basics.java:563)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust",
                            "test_body": "472: public void testPlusMonths_int_negativeEndOfMonthAdjust() {\n473: MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());\n474: MonthDay result = test.plusMonths(-1);\n475: MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());\n476: assertEquals(expected, result);\n477: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nif (DateTimeUtils.isContiguous(partial)) {\nlong instant = 0L;\nfor (int i = 0, isize = partial.size(); i < isize; i++) {\ninstant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\ninstant = add(instant, valueToAdd);\nreturn iChronology.get(partial, instant);\n}",
                                    "suspicious_rank": 0.617
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay plusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), months);\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nList<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\nfields.add(DateTimeFieldType.monthOfYear());\nfields.add(DateTimeFieldType.dayOfMonth());\nreturn ISODateTimeFormat.forFields(fields, true, true).print(this);\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:appendSeparator(Lorg/joda/time/format/DateTimeFormatterBuilder;Z)V",
                                    "method_body": "private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\nif (extended) {\nbld.appendLiteral('-');\n}",
                                    "suspicious_rank": 0.158
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateByMonth(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZ)Z",
                                    "method_body": "private static boolean dateByMonth(\nboolean reducedPrec = false;\nif (fields.remove(DateTimeFieldType.year())) {\n} else if (fields.remove(DateTimeFieldType.monthOfYear())) {\nbld.appendLiteral('-');\nbld.appendLiteral('-');\nbld.appendMonthOfYear(2);\nif (fields.remove(DateTimeFieldType.dayOfMonth())) {\nappendSeparator(bld, extended);\nbld.appendDayOfMonth(2);\nreturn reducedPrec;\n}",
                                    "suspicious_rank": 0.147
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(Lorg/joda/time/MonthDay;[I)V",
                                    "method_body": "MonthDay(MonthDay partial, int[] values) {\nsuper(partial, values);\n}",
                                    "suspicious_rank": 0.136
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.104
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:time(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/util/Collection;ZZZZ)V",
                                    "method_body": "private static void time(\nboolean hour = fields.remove(DateTimeFieldType.hourOfDay());\nboolean minute = fields.remove(DateTimeFieldType.minuteOfHour());\nboolean second = fields.remove(DateTimeFieldType.secondOfMinute());\nboolean milli = fields.remove(DateTimeFieldType.millisOfSecond());\nif (!hour && !minute && !second && !milli) {\nreturn;\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:canBuildFormatter()Z",
                                    "method_body": "public boolean canBuildFormatter() {\nreturn isFormatter(getFormatter());\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isFormatter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isFormatter(Object f) {\nreturn (isPrinter(f) || isParser(f));\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:forFields(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forFields(\nif (fields == null || fields.size() == 0) {\nSet<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);\nint inputSize = workingFields.size();\nboolean reducedPrec = false;\nDateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\nif (workingFields.contains(DateTimeFieldType.monthOfYear())) {\nreducedPrec = dateByMonth(bld, workingFields, extended, strictISO);\nboolean datePresent = (workingFields.size() < inputSize);\ntime(bld, workingFields, extended, strictISO, reducedPrec, datePresent);\nif (bld.canBuildFormatter() == false) {\nfields.retainAll(workingFields);\n}\nreturn bld.toFormatter();\n}",
                                    "suspicious_rank": 0.075
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.073
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.072
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof ReadablePartial == false) {\nReadablePartial other = (ReadablePartial) partial;\nif (size() != other.size()) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {\nreturn false;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>(Lorg/joda/time/base/BasePartial;[I)V",
                                    "method_body": "protected BasePartial(BasePartial base, int[] values) {\nsuper();\niChronology = base.iChronology;\niValues = values;\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nreturn (indexOf(type) != -1);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType type) {\nreturn getValue(indexOfSupported(type));\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DateTimeFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int indexOf(DateTimeFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i) == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePartial;J)[I",
                                    "method_body": "public int[] get(ReadablePartial partial, long instant) {\nint size = partial.size();\nint[] values = new int[size];\nfor (int i = 0; i < size; i++) {\nvalues[i] = partial.getFieldType(i).getField(this).get(instant);\nreturn values;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\ndayToUse = maxDay;\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.014
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust(TestMonthDay_Basics.java:476)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap",
                            "test_body": "458: public void testPlusMonths_int_negativeFromLeap() {\n459: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n460: MonthDay result = test.plusMonths(-1);\n461: MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n462: assertEquals(expected, result);\n463: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay plusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), months);\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:460)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap",
                            "test_body": "451: public void testPlusMonths_int_fromLeap() {\n452: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n453: MonthDay result = test.plusMonths(1);\n454: MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n455: assertEquals(expected, result);\n456: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay plusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), months);\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.plusMonths(MonthDay.java:592)\nat org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap(TestMonthDay_Basics.java:453)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap",
                            "test_body": "608: public void testMinusDays_int_negativeFromLeap() {\n609: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n610: MonthDay result = test.minusDays(-1);\n611: MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n612: assertEquals(expected, result);\n613: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "public static int safeNegate(int value) {\nif (value == Integer.MIN_VALUE) {\nreturn -value;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusDays(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay minusDays(int days) {\nreturn withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nDateTimeField nextField = null;\nwhile (valueToAdd > 0) {\nint max = getMaximumValue(instant, values);\nlong proposed = values[fieldIndex] + valueToAdd;\nif (proposed <= max) {\nif (nextField == null) {\nif (fieldIndex == 0) {\nnextField = instant.getField(fieldIndex - 1);\nif (getRangeDurationField().getType() != nextField.getDurationField().getType()) {\nvalueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add\nvalues = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\nvalues[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero\n}\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.minusDays(MonthDay.java:672)\nat org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap(TestMonthDay_Basics.java:610)",
                            "test_id": 4
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap",
                            "test_body": "552: public void testMinusMonths_int_negativeFromLeap() {\n553: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n554: MonthDay result = test.minusMonths(-1);\n555: MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());\n556: assertEquals(expected, result);\n557: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay minusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "public static int safeNegate(int value) {\nif (value == Integer.MIN_VALUE) {\nreturn -value;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)\nat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap(TestMonthDay_Basics.java:554)",
                            "test_id": 5
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap",
                            "test_body": "507: public void testPlusDays_int_fromLeap() {\n508: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n509: MonthDay result = test.plusDays(1);\n510: MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());\n511: assertEquals(expected, result);\n512: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:plusDays(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay plusDays(int days) {\nreturn withFieldAdded(DurationFieldType.days(), days);\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(Lorg/joda/time/ReadablePartial;I[II)[I",
                                    "method_body": "public int[] add(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\nif (valueToAdd == 0) {\nDateTimeField nextField = null;\nwhile (valueToAdd > 0) {\nint max = getMaximumValue(instant, values);\nlong proposed = values[fieldIndex] + valueToAdd;\nif (proposed <= max) {\nif (nextField == null) {\nif (fieldIndex == 0) {\nnextField = instant.getField(fieldIndex - 1);\nif (getRangeDurationField().getType() != nextField.getDurationField().getType()) {\nvalueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add\nvalues = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field\nvalues[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero\n}\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.field.BaseDateTimeField.add(BaseDateTimeField.java:324)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.plusDays(MonthDay.java:612)\nat org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap(TestMonthDay_Basics.java:509)",
                            "test_id": 6
                        },
                        {
                            "test_name": "org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap",
                            "test_body": "545: public void testMinusMonths_int_fromLeap() {\n546: MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n547: MonthDay result = test.minusMonths(1);\n548: MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());\n549: assertEquals(expected, result);\n550: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.MonthDay:withFieldAdded(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {\nint index = indexOfSupported(fieldType);\nif (amount == 0) {\nint[] newValues = getValues();\nnewValues = getField(index).add(this, index, newValues, amount);\nreturn new MonthDay(this, newValues);\n}",
                                    "suspicious_rank": 0.525
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:isContiguous(Lorg/joda/time/ReadablePartial;)Z",
                                    "method_body": "public static final boolean isContiguous(ReadablePartial partial) {\nif (partial == null) {\nDurationFieldType lastType = null;\nfor (int i = 0; i < partial.size(); i++) {\nDateTimeField loopField = partial.getField(i);\nif (i > 0) {\nif (loopField.getRangeDurationField().getType() != lastType) {\nlastType = loopField.getDurationField().getType();\nreturn true;\n}",
                                    "suspicious_rank": 0.436
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:minusMonths(I)Lorg/joda/time/MonthDay;",
                                    "method_body": "public MonthDay minusMonths(int months) {\nreturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n}",
                                    "suspicious_rank": 0.375
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMax(I)I",
                                    "method_body": "int getDaysInMonthMax(int month) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.354
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:<init>(IILorg/joda/time/Chronology;)V",
                                    "method_body": "public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(new int[] {monthOfYear, dayOfMonth}, chronology);\n}",
                                    "suspicious_rank": 0.32
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getField(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "protected DateTimeField getField(int index, Chronology chrono) {\nswitch (index) {\nreturn chrono.monthOfYear();\nreturn chrono.dayOfMonth();\n}",
                                    "suspicious_rank": 0.312
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOfSupported(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOfSupported(DurationFieldType type) {\nint index = indexOf(type);\nif (index == -1) {\nreturn index;\n}",
                                    "suspicious_rank": 0.293
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:getFieldType(I)Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public DateTimeFieldType getFieldType(int index) {\nreturn FIELD_TYPES[index];\n}",
                                    "suspicious_rank": 0.28
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "protected int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (getFieldType(i).getDurationType() == type) {\nreturn i;\n}",
                                    "suspicious_rank": 0.277
                                },
                                {
                                    "method_signature": "org.joda.time.MonthDay:size()I",
                                    "method_body": "public int size() {\nreturn 2;\n}",
                                    "suspicious_rank": 0.273
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.247
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getValues()[I",
                                    "method_body": "public int[] getValues() {\nreturn (int[]) iValues.clone();\n}",
                                    "suspicious_rank": 0.237
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nif (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\nint month = values[i];\nfor (int j = 0; j < size; j++) {\nif (partial.getFieldType(j) == DateTimeFieldType.year()) {\nreturn iChronology.getDaysInMonthMax(month);\n}",
                                    "suspicious_rank": 0.223
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeNegate(I)I",
                                    "method_body": "public static int safeNegate(int value) {\nif (value == Integer.MIN_VALUE) {\nreturn -value;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax()I",
                                    "method_body": "int getDaysInMonthMax() {\nreturn 31;\n}",
                                    "suspicious_rank": 0.205
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iChronology.getDaysInMonthMax();\n}",
                                    "suspicious_rank": 0.188
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn MIN;\n}",
                                    "suspicious_rank": 0.164
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iMax;\n}",
                                    "suspicious_rank": 0.163
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:<init>([ILorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePartial(int[] values, Chronology chronology) {\nsuper();\nchronology = DateTimeUtils.getChronology(chronology);\niChronology = chronology.withUTC();\nchronology.validate(this, values);\niValues = values;\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePartial:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant, int[] values) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMaximumValue(ReadablePartial instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant) {\nreturn getMinimumValue();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMinimumValue(Lorg/joda/time/ReadablePartial;[I)I",
                                    "method_body": "public int getMinimumValue(ReadablePartial instant, int[] values) {\nreturn getMinimumValue(instant);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:validate(Lorg/joda/time/ReadablePartial;[I)V",
                                    "method_body": "public void validate(ReadablePartial partial, int[] values) {\nint size = partial.size();\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue()) {\nif (value > field.getMaximumValue()) {\nfor (int i = 0; i < size; i++) {\nint value = values[i];\nDateTimeField field = partial.getField(i);\nif (value < field.getMinimumValue(partial, values)) {\nif (value > field.getMaximumValue(partial, values)) {\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:getField(I)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(int index) {\nreturn getField(index, getChronology());\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.061
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.048
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:218)\nat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\nat org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(BasicMonthOfYearDateTimeField.java:213)\nat org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)\nat org.joda.time.MonthDay.minusMonths(MonthDay.java:652)\nat org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap(TestMonthDay_Basics.java:547)",
                            "test_id": 7
                        }
                    ]
                },
                {
                    "bug_id": 15,
                    "tests": [
                        {
                            "test_name": "org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt",
                            "test_body": "241: public void testSafeMultiplyLongInt() {\n242: assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n243: 244: assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n245: assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n246: assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n247: 248: assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n249: assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n250: assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n251: assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n252: 253: assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n254: 255: assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n256: assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n257: assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n258: 259: try {\n260: FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n261: fail();\n262: } catch (ArithmeticException e) {\n263: }\n264: 265: try {\n266: FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n267: fail();\n268: } catch (ArithmeticException e) {\n269: }\n270: 271: try {\n272: FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n273: fail();\n274: } catch (ArithmeticException e) {\n275: }\n276: 277: try {\n278: FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n279: fail();\n280: } catch (ArithmeticException e) {\n281: }\n282: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(JI)J",
                                    "method_body": "public static long safeMultiply(long val1, int val2) {\nswitch (val2) {\nreturn -val1;\nreturn 0L;\nreturn val1;\nlong total = val1 * val2;\nif (total / val2 != val1) {\nreturn total;\n}",
                                    "suspicious_rank": 0.139
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError\nat junit.framework.Assert.fail(Assert.java:55)\nat junit.framework.Assert.fail(Assert.java:64)\nat junit.framework.TestCase.fail(TestCase.java:235)\nat org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt(TestFieldUtils.java:261)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 16,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseEndYear",
                            "test_body": "887: public void testParseInto_monthOnly_baseEndYear() {\n888: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n889: MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO);\n890: assertEquals(1, f.parseInto(result, \"5\", 0));\n891: assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);\n892: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iWallOffsets[i - 1];\nreturn iTailZone.getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-05-31T12:20:30.000+09:00> but was:<2000-05-31T12:20:30.000+09:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseEndYear(TestDateTimeFormatter.java:891)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseStartYear",
                            "test_body": "880: public void testParseInto_monthOnly_parseStartYear() {\n881: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n882: MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO);\n883: assertEquals(1, f.parseInto(result, \"1\", 0));\n884: assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);\n885: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iWallOffsets[i - 1];\nreturn iTailZone.getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-01-01T12:20:30.000+09:00> but was:<2000-01-01T12:20:30.000+09:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseStartYear(TestDateTimeFormatter.java:884)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly",
                            "test_body": "866: public void testParseInto_monthOnly() {\n867: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n868: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n869: assertEquals(1, f.parseInto(result, \"5\", 0));\n870: assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);\n871: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\nlong prev = transitions[i - 1];\nif (prev > Long.MIN_VALUE) {\nreturn prev - 1;\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nprev = chrono.year().add(prev, -1);\nprev = chrono.monthOfYear().set(prev, iMonthOfYear);\nprev = setDayOfMonthPrevious(chrono, prev);\nprev = setDayOfWeek(chrono, prev);\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-05-09T12:20:30.000+01:00> but was:<2000-05-09T12:20:30.000+01:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly(TestDateTimeFormatter.java:870)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29",
                            "test_body": "901: public void testParseInto_monthDay_feb29() {\n902: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n903: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n904: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n905: assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n906: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\nint length = pattern.length();\nint[] indexRef = new int[1];\nfor (int i=0; i<length; i++) {\nindexRef[0] = i;\nString token = parseToken(pattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nif (tokenLen >= 3) {\nbuilder.appendMonthOfYear(tokenLen);\nbreak;\nbuilder.appendDayOfMonth(tokenLen);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nbuilder.appendLiteral(sub.charAt(0));\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "private static String parseToken(String pattern, int[] indexRef) {\nStringBuffer buf = new StringBuffer();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nbuf.append(iZeroOffsetPrintText);\nreturn;\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "protected UnpaddedNumber(DateTimeFieldType fieldType,\nsuper(fieldType, maxParsedDigits, signed);\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\nlong prev = transitions[i - 1];\nif (prev > Long.MIN_VALUE) {\nreturn prev - 1;\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.099
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new UnpaddedNumber(fieldType, maxDigits, false));\n}",
                                    "suspicious_rank": 0.088
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nprev = chrono.year().add(prev, -1);\nprev = chrono.monthOfYear().set(prev, iMonthOfYear);\nprev = setDayOfMonthPrevious(chrono, prev);\nprev = setDayOfWeek(chrono, prev);\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-02-29T12:20:30.000Z> but was:<2000-02-29T12:20:30.000Z>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29(TestDateTimeFormatter.java:905)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29",
                            "test_body": "908: public void testParseInto_monthDay_withDefaultYear_feb29() {\n909: DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withDefaultYear(2012);\n910: MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n911: assertEquals(4, f.parseInto(result, \"2 29\", 0));\n912: assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n913: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withDefaultYear(I)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withDefaultYear(int defaultYear) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.189
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nbuf.append(iZeroOffsetPrintText);\nreturn;\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone != null) {\nlong prev = iTailZone.previousTransition(instant);\nif (prev < instant) {\nreturn prev;\nlong prev = transitions[i - 1];\nif (prev > Long.MIN_VALUE) {\nreturn prev - 1;\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\ninstant++;\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.previous\nif (instant < 0 && start > 0) {\n}\nend = endRecurrence.previous\nif (instant < 0 && end > 0) {\n}\nreturn ((start > end) ? start : end) - 1;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.previous(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:previous(JII)J",
                                    "method_body": "public long previous(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong prev = chrono.monthOfYear().set(instant, iMonthOfYear);\nprev = chrono.millisOfDay().set(prev, 0);\nprev = chrono.millisOfDay().add(prev, iMillisOfDay);\nprev = setDayOfMonthPrevious(chrono, prev);\nif (iDayOfWeek == 0) {\nprev = setDayOfWeek(chrono, prev);\nif (prev >= instant) {\nprev = chrono.year().add(prev, -1);\nprev = chrono.monthOfYear().set(prev, iMonthOfYear);\nprev = setDayOfMonthPrevious(chrono, prev);\nprev = setDayOfWeek(chrono, prev);\nreturn prev - offset;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthPrevious(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthPrevious(Chronology chrono, long prev) {\nprev = setDayOfMonth(chrono, prev);\n}\nreturn prev;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.033
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-02-29T12:20:30.000Z> but was:<2012-02-29T12:20:30.000Z>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29(TestDateTimeFormatter.java:912)",
                            "test_id": 4
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseEndYear",
                            "test_body": "894: public void testParseInto_monthOnly_parseEndYear() {\n895: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n896: MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0,TOKYO);\n897: assertEquals(2, f.parseInto(result, \"12\", 0));\n898: assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);\n899: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iWallOffsets[i - 1];\nreturn iTailZone.getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-12-31T12:20:30.000+09:00> but was:<2000-12-31T12:20:30.000+09:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseEndYear(TestDateTimeFormatter.java:898)",
                            "test_id": 5
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseStartYear",
                            "test_body": "873: public void testParseInto_monthOnly_baseStartYear() {\n874: DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n875: MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);\n876: assertEquals(1, f.parseInto(result, \"5\", 0));\n877: assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);\n878: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseInto(Lorg/joda/time/ReadWritableInstant;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(ReadWritableInstant instant, String text, int position) {\nDateTimeParser parser = requireParser();\nif (instant == null) {\nlong instantMillis = instant.getMillis();\nChronology chrono = instant.getChronology();\nlong instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\nchrono = selectChronology(chrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(\nint newPos = parser.parseInto(bucket, text, position);\ninstant.setMillis(bucket.computeMillis(false, text));\nif (iOffsetParsed && bucket.getOffsetInteger() != null) {\n} else if (bucket.getZone() != null) {\nchrono = chrono.withZone(bucket.getZone());\ninstant.setChronology(chrono);\nif (iZone != null) {\nreturn newPos;\n}",
                                    "suspicious_rank": 0.683
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected void setChronology(Chronology chronology) {\niChronology = checkChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setChronology(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setChronology(Chronology chronology) {\nsuper.setChronology(chronology);\n}",
                                    "suspicious_rank": 0.552
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public MutableDateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.519
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.326
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.308
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.287
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.279
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.261
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.248
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withLocale(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withLocale(Locale locale) {\nif (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\nreturn new DateTimeFormatter(iPrinter, iParser, locale,\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getLocale()Ljava/util/Locale;",
                                    "method_body": "public Locale getLocale() {\nreturn iLocale;\n}",
                                    "suspicious_rank": 0.245
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:setMillis(J)V",
                                    "method_body": "protected void setMillis(long instant) {\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.MutableDateTime:setMillis(J)V",
                                    "method_body": "public void setMillis(long instant) {\nswitch (iRoundingMode) {\nbreak;\nsuper.setMillis(instant);\n}",
                                    "suspicious_rank": 0.235
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.21
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn 1;\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.157
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.154
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.152
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nsaveField(DateTimeFieldType.year(), iDefaultYear);\nreturn computeMillis(resetFields, text);\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\nif (resetFields) {\n}\nif (iOffset != null) {\n} else if (iZone != null) {\nint offset = iZone.getOffsetFromLocal(millis);\nmillis -= offset;\nif (offset != iZone.getOffset(millis)) {\nreturn millis;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\nSavedField t = array[j];\narray[j] = array[j-1];\narray[j-1] = t;\n}",
                                    "suspicious_rank": 0.151
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.148
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.142
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.141
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.138
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.131
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.13
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.129
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:previousTransition(J)J",
                                    "method_body": "public long previousTransition(long instant) {\nreturn iZone.previousTransition(instant);\n}",
                                    "suspicious_rank": 0.107
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.106
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.103
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nlong prev = previousTransition(instantAdjusted);\nif (prev < instantAdjusted) {\nint offsetPrev = getOffset(prev);\nint diff = offsetPrev - offsetLocal;\nif (instantAdjusted - prev <= diff) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.097
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.093
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.089
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.078
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.077
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.068
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.065
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iWallOffsets[i - 1];\nreturn iTailZone.getOffset(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.063
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.06
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\nyear--;\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nreturn year;\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.056
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.051
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.048
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.046
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.045
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseStartYear(TestDateTimeFormatter.java:877)",
                            "test_id": 6
                        }
                    ]
                },
                {
                    "bug_id": 17,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset",
                            "test_body": "1249: public void testBug3476684_adjustOffset() {\n1250: final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n1251: DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n1252: DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n1253: DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n1254: 1255: assertSame(base, base.withEarlierOffsetAtOverlap());\n1256: assertSame(base, base.withLaterOffsetAtOverlap());\n1257: 1258: assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\n1259: assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());\n1260: 1261: assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n1262: assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n1263: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:adjustOffset(JZ)J",
                                    "method_body": "public long adjustOffset(long instant, boolean earlierOrLater) {\nlong instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\nlong instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\nif (instantBefore == instantAfter) {\nlong local = convertUTCToLocal(instant);\nreturn convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n}",
                                    "suspicious_rank": 0.577
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withEarlierOffsetAtOverlap()Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withEarlierOffsetAtOverlap() {\nlong newMillis = getZone().adjustOffset(getMillis(), false);\nreturn withMillis(newMillis);\n}",
                                    "suspicious_rank": 0.577
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withLaterOffsetAtOverlap()Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withLaterOffsetAtOverlap() {\nlong newMillis = getZone().adjustOffset(getMillis(), true);\nreturn withMillis(newMillis);\n}",
                                    "suspicious_rank": 0.577
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.236
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:plusHours(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime plusHours(int hours) {\nif (hours == 0) {\nlong instant = getChronology().hours().add(getMillis(), hours);\nreturn withMillis(instant);\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn getChronology().getZone();\n}",
                                    "suspicious_rank": 0.136
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.059
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.057
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal >= 0) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.034
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZJ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\nint offsetOriginal = getOffset(originalInstantUTC);\nlong instantUTC = instantLocal - offsetOriginal;\nint offsetLocalFromOriginal = getOffset(instantUTC);\nif (offsetLocalFromOriginal == offsetOriginal) {\nreturn instantUTC;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iWallOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iWallOffsets[i - 1];\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nreturn transitions[i];\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:calculateFirstDayOfYearMillis(I)J",
                                    "method_body": "long calculateFirstDayOfYearMillis(int year) {\nint leapYears = year / 100;\nif (year < 0) {\nleapYears = (year >> 2) - leapYears + (leapYears >> 2);\nif (isLeapYear(year)) {\nleapYears--;\nreturn (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\ninfo = new YearInfo(year, calculateFirstDayOfYearMillis(year));\niYearInfoCache[year & CACHE_MASK] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology$YearInfo:<init>(IJ)V",
                                    "method_body": "YearInfo(int year, long firstDayMillis) {\niYear = year;\niFirstDayMillis = firstDayMillis;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (int) getUnitMillis();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (1 << iOrdinal);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\nswitch (v >> 6) {\nv = (v << (32 - 6)) >> (32 - 6);\nreturn v * (30 * 60000L);\nv = (v << (32 - 6)) >> (32 - 30);\nv |= (in.readUnsignedByte()) << 16;\nv |= (in.readUnsignedByte()) << 8;\nv |= (in.readUnsignedByte());\nreturn v * 60000L;\nlong w = (((long)v) << (64 - 6)) >> (64 - 38);\nw |= (in.readUnsignedByte()) << 24;\nw |= (in.readUnsignedByte()) << 16;\nw |= (in.readUnsignedByte()) << 8;\nw |= (in.readUnsignedByte());\nreturn w * 1000L;\nreturn in.readLong();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\nString[] pool = new String[poolSize];\nfor (int i=0; i<poolSize; i++) {\npool[i] = in.readUTF();\nint size = in.readInt();\nlong[] transitions = new long[size];\nint[] wallOffsets = new int[size];\nint[] standardOffsets = new int[size];\nString[] nameKeys = new String[size];\nfor (int i=0; i<size; i++) {\ntransitions[i] = readMillis(in);\nwallOffsets[i] = (int)readMillis(in);\nstandardOffsets[i] = (int)readMillis(in);\nif (poolSize < 256) {\nindex = in.readUnsignedByte();\nnameKeys[i] = pool[index];\n}\nDSTZone tailZone = null;\nif (in.readBoolean()) {\ntailZone = DSTZone.readFrom(in, id);\nreturn new PrecalculatedZone\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "OfYear(char mode,\n{\nif (mode != 'u' && mode != 'w' && mode != 's') {\niMode = mode;\niMonthOfYear = monthOfYear;\niDayOfMonth = dayOfMonth;\niDayOfWeek = dayOfWeek;\niAdvance = advanceDayOfWeek;\niMillisOfDay = millisOfDay;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\nreturn new CachedDateTimeZone(zone);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\nString path = iResourcePath.concat(name);\nif (iLoader != null) {\nin = iLoader.getResourceAsStream(path);\nif (in == null) {\nreturn in;\n}",
                                    "suspicious_rank": 0.017
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-02-25T23:15:00.000-03:00> but was:<2012-02-25T23:15:00.000-02:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset(TestDateTimeZoneCutover.java:1259)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 18,
                    "tests": [
                        {
                            "test_name": "org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction",
                            "test_body": "494: public void testLeapYearRulesConstruction() {\n495: // 1500 not leap in Gregorian, but is leap in Julian\n496: DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n497: assertEquals(dt.getYear(), 1500);\n498: assertEquals(dt.getMonthOfYear(), 2);\n499: assertEquals(dt.getDayOfMonth(), 29);\n500: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\ninstant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\n}",
                                    "suspicious_rank": 0.162
                                },
                                {
                                    "method_signature": "org.joda.time.DateMidnight:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\nsuper(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);\n}",
                                    "suspicious_rank": 0.123
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:<init>(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V",
                                    "method_body": "public IllegalFieldValueException(DateTimeFieldType fieldType,\nsuper(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));\niDateTimeFieldType = fieldType;\niDurationFieldType = null;\niFieldName = fieldType.getName();\niNumberValue = value;\niStringValue = null;\niLowerBound = lowerBound;\niUpperBound = upperBound;\niMessage = super.getMessage();\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.IllegalFieldValueException:createMessage(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static String createMessage(String fieldName, Number value,\nStringBuffer buf = new StringBuffer()\nif (lowerBound == null) {\n} else if (upperBound == null) {\nbuf.append(\"must be in the range [\")\nif (explain != null) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.064
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:getName()Ljava/lang/String;",
                                    "method_body": "public String getName() {\nreturn iName;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\nthrow new IllegalFieldValueException\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\nat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:233)\nat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\nat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\nat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\nat org.joda.time.chrono.GJChronology.getDateTimeMillis(GJChronology.java:364)\nat org.joda.time.base.BaseDateTime.<init>(BaseDateTime.java:254)\nat org.joda.time.DateMidnight.<init>(DateMidnight.java:343)\nat org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction(TestGJChronology.java:496)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 19,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_london",
                            "test_body": "1263: public void testDateTimeCreation_london() {\n1264: DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n1265: DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);\n1266: assertEquals(\"2011-10-30T01:15:00.000+01:00\", base.toString());\n1267: assertEquals(\"2011-10-30T01:15:00.000Z\", base.plusHours(1).toString());\n1268: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nbuf.append(iZeroOffsetPrintText);\nreturn;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal > 0) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\nswitch (v >> 6) {\nv = (v << (32 - 6)) >> (32 - 6);\nreturn v * (30 * 60000L);\nv = (v << (32 - 6)) >> (32 - 30);\nv |= (in.readUnsignedByte()) << 16;\nv |= (in.readUnsignedByte()) << 8;\nv |= (in.readUnsignedByte());\nreturn v * 60000L;\nlong w = (((long)v) << (64 - 6)) >> (64 - 38);\nw |= (in.readUnsignedByte()) << 24;\nw |= (in.readUnsignedByte()) << 16;\nw |= (in.readUnsignedByte()) << 8;\nw |= (in.readUnsignedByte());\nreturn w * 1000L;\nreturn in.readLong();\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\nString[] pool = new String[poolSize];\nfor (int i=0; i<poolSize; i++) {\npool[i] = in.readUTF();\nint size = in.readInt();\nlong[] transitions = new long[size];\nint[] wallOffsets = new int[size];\nint[] standardOffsets = new int[size];\nString[] nameKeys = new String[size];\nfor (int i=0; i<size; i++) {\ntransitions[i] = readMillis(in);\nwallOffsets[i] = (int)readMillis(in);\nstandardOffsets[i] = (int)readMillis(in);\nif (poolSize < 256) {\nindex = in.readUnsignedByte();\nnameKeys[i] = pool[index];\n}\nDSTZone tailZone = null;\nif (in.readBoolean()) {\ntailZone = DSTZone.readFrom(in, id);\nreturn new PrecalculatedZone\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "OfYear(char mode,\n{\nif (mode != 'u' && mode != 'w' && mode != 's') {\niMode = mode;\niMonthOfYear = monthOfYear;\niDayOfMonth = dayOfMonth;\niDayOfWeek = dayOfWeek;\niAdvance = advanceDayOfWeek;\niMillisOfDay = millisOfDay;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\niInfoCache = new Info[cInfoCacheMask + 1];\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\nreturn new CachedDateTimeZone(zone);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\nString path = iResourcePath.concat(name);\nif (iLoader != null) {\nin = iLoader.getResourceAsStream(path);\nif (in == null) {\nreturn in;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.022
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iTailZone.getOffset(instant);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.014
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof DSTZone) {\nDSTZone other = (DSTZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof Recurrence) {\nRecurrence other = (Recurrence)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof OfYear) {\nOfYear other = (OfYear)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof CachedDateTimeZone) {\nreturn iZone.equals(((CachedDateTimeZone)obj).iZone);\n}",
                                    "suspicious_rank": 0.0
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nif (obj instanceof PrecalculatedZone) {\nPrecalculatedZone other = (PrecalculatedZone)obj;\nreturn\n}",
                                    "suspicious_rank": 0.0
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_london(TestDateTimeZoneCutover.java:1266)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 20,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneDawsonCreek",
                            "test_body": "255: public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson\n256: DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n257: .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n258: DateTimeFormatter f = bld.toFormatter();\n259: 260: DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n261: assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));\n262: assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));\n263: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(displayZone != null ? displayZone.getID() : \"\");\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn MAX_LENGTH;\n}",
                                    "suspicious_rank": 0.25
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone;\n}",
                                    "suspicious_rank": 0.236
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nString str = text.substring(position);\nfor (String id : ALL_IDS) {\nif (str.startsWith(id)) {\nbucket.setZone(DateTimeZone.forID(id));\nreturn position + id.length();\n}\n}",
                                    "suspicious_rank": 0.236
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendTimeZoneId()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendTimeZoneId() {\nreturn append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn MAX_LENGTH;\n}",
                                    "suspicious_rank": 0.224
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendPattern(String pattern) {\nDateTimeFormat.appendPatternTo(this, pattern);\nreturn this;\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:appendPatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {\nparsePatternTo(builder, pattern);\n}",
                                    "suspicious_rank": 0.213
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "private static boolean isNumericToken(String token) {\nint tokenLen = token.length();\nif (tokenLen > 0) {\nchar c = token.charAt(0);\nswitch (c) {\nreturn false;\n}",
                                    "suspicious_rank": 0.081
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
                                    "method_body": "static String createErrorMessage(final String text, final int errorPos) {\nint sampleLen = errorPos + 32;\nif (text.length() <= sampleLen + 3) {\nsampleText = text;\nif (errorPos <= 0) {\nif (errorPos >= text.length()) {\nreturn \"Invalid format: \\\"\" + sampleText + \"\\\" is malformed at \\\"\" +\n}",
                                    "suspicious_rank": 0.069
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseDateTime(Ljava/lang/String;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime parseDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nthrow new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\nint length = pattern.length();\nint[] indexRef = new int[1];\nfor (int i=0; i<length; i++) {\nindexRef[0] = i;\nString token = parseToken(pattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nif (tokenLen == 2) {\nint maxDigits = 9;\nif (i + 1 < length) {\nindexRef[0]++;\nif (isNumericToken(parseToken(pattern, indexRef))) {\nindexRef[0]--;\nswitch (c) {\nbuilder.appendYear(tokenLen, maxDigits);\nbreak;\nbreak;\nif (tokenLen >= 3) {\nbuilder.appendMonthOfYear(tokenLen);\nbreak;\nbuilder.appendDayOfMonth(tokenLen);\nbreak;\nbuilder.appendHourOfDay(tokenLen);\nbreak;\nbuilder.appendMinuteOfHour(tokenLen);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nbuilder.appendLiteral(sub.charAt(0));\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "private static String parseToken(String pattern, int[] indexRef) {\nStringBuffer buf = new StringBuffer();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.045
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niZone = chrono.getZone();\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.031
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMinuteOfHour(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendHourOfDay(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendHourOfDay(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\n} else if (offsetLocal > 0) {\nreturn offsetAdjusted;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfMonth(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendYear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {\nreturn appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendSignedDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\nswitch (v >> 6) {\nv = (v << (32 - 6)) >> (32 - 6);\nreturn v * (30 * 60000L);\nv = (v << (32 - 6)) >> (32 - 30);\nv |= (in.readUnsignedByte()) << 16;\nv |= (in.readUnsignedByte()) << 8;\nv |= (in.readUnsignedByte());\nreturn v * 60000L;\nlong w = (((long)v) << (64 - 6)) >> (64 - 38);\nw |= (in.readUnsignedByte()) << 24;\nw |= (in.readUnsignedByte()) << 16;\nw |= (in.readUnsignedByte()) << 8;\nw |= (in.readUnsignedByte());\nreturn w * 1000L;\nreturn in.readLong();\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\nString[] pool = new String[poolSize];\nfor (int i=0; i<poolSize; i++) {\npool[i] = in.readUTF();\nint size = in.readInt();\nlong[] transitions = new long[size];\nint[] wallOffsets = new int[size];\nint[] standardOffsets = new int[size];\nString[] nameKeys = new String[size];\nfor (int i=0; i<size; i++) {\ntransitions[i] = readMillis(in);\nwallOffsets[i] = (int)readMillis(in);\nstandardOffsets[i] = (int)readMillis(in);\nif (poolSize < 256) {\nindex = in.readUnsignedByte();\nnameKeys[i] = pool[index];\n}\nDSTZone tailZone = null;\nif (in.readBoolean()) {\ntailZone = DSTZone.readFrom(in, id);\nreturn new PrecalculatedZone\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "OfYear(char mode,\n{\nif (mode != 'u' && mode != 'w' && mode != 's') {\niMode = mode;\niMonthOfYear = monthOfYear;\niDayOfMonth = dayOfMonth;\niDayOfWeek = dayOfWeek;\niAdvance = advanceDayOfWeek;\niMillisOfDay = millisOfDay;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\niInfoCache = new Info[cInfoCacheMask + 1];\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\nreturn new CachedDateTimeZone(zone);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\nString path = iResourcePath.concat(name);\nif (iLoader != null) {\nin = iLoader.getResourceAsStream(path);\nif (in == null) {\nreturn in;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.023
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iWallOffsets[i - 1];\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nreturn info;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.016
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}",
                                    "suspicious_rank": 0.015
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}",
                                    "suspicious_rank": 0.014
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn (int) getUnitMillis();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}",
                                    "suspicious_rank": 0.012
                                }
                            ],
                            "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"2007-03-04 12:30 America/Dawson_Creek\" is malformed at \"_Creek\"\nat org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:866)\nat org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneDawsonCreek(TestDateTimeFormatterBuilder.java:262)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 22,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone",
                            "test_body": "174: public void testConstructor_long_fixedZone() throws Throwable {\n175: DateTimeZone zone = DateTimeZone.getDefault();\n176: try {\n177: DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n178: long length =\n179: (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n180: 5L * DateTimeConstants.MILLIS_PER_HOUR +\n181: 6L * DateTimeConstants.MILLIS_PER_MINUTE +\n182: 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n183: Period test = new Period(length);\n184: assertEquals(PeriodType.standard(), test.getPeriodType());\n185: // only time fields are precise in AllType\n186: assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n187: assertEquals(0, test.getMonths());\n188: assertEquals(0, test.getWeeks());\n189: assertEquals(0, test.getDays());\n190: assertEquals((450 * 24) + 5, test.getHours());\n191: assertEquals(6, test.getMinutes());\n192: assertEquals(7, test.getSeconds());\n193: assertEquals(8, test.getMillis());\n194: } finally {\n195: DateTimeZone.setDefault(zone);\n196: }\n197: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.182
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:isFixed()Z",
                                    "method_body": "public boolean isFixed() {\nreturn true;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nreturn iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.years();\nreturn chronology.months();\nreturn chronology.weeks();\nreturn chronology.days();\nreturn chronology.hours();\nreturn chronology.minutes();\nreturn chronology.seconds();\nreturn chronology.millis();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(J)V",
                                    "method_body": "public Period(long duration) {\nsuper(duration);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHours(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {\nreturn forOffsetHoursMinutes(hoursOffset, 0);\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nint offset = 0;\nint hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\nif (hoursInMinutes < 0) {\nminutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:isPrecise()Z",
                                    "method_body": "public boolean isPrecise() {\nreturn iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "public boolean isPrecise() {\nreturn false;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nint offset = getOffsetToAdd(subtrahendInstant);\nreturn iField.getDifference\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}",
                                    "suspicious_rank": 0.03
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\nif ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\nreturn diff;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iWallOffset;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nlong current = 0;\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nif (field.isPrecise()) {\nint value = field.getDifference(duration, current);\ncurrent = field.add(current, value);\nvalues[i] = value;\nreturn values;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn PeriodType.standard();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.011
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<64>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone(TestPeriod_Constructors.java:188)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.TestDuration_Basics.testToPeriod_fixedZone",
                            "test_body": "470: public void testToPeriod_fixedZone() throws Throwable {\n471: DateTimeZone zone = DateTimeZone.getDefault();\n472: try {\n473: DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n474: long length =\n475: (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n476: 5L * DateTimeConstants.MILLIS_PER_HOUR +\n477: 6L * DateTimeConstants.MILLIS_PER_MINUTE +\n478: 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n479: Duration dur = new Duration(length);\n480: Period test = dur.toPeriod();\n481: assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n482: assertEquals(0, test.getMonths());\n483: assertEquals(0, test.getWeeks());\n484: assertEquals(0, test.getDays());\n485: assertEquals((450 * 24) + 5, test.getHours());\n486: assertEquals(6, test.getMinutes());\n487: assertEquals(7, test.getSeconds());\n488: assertEquals(8, test.getMillis());\n489: } finally {\n490: DateTimeZone.setDefault(zone);\n491: }\n492: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n}",
                                    "suspicious_rank": 0.182
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDuration:toPeriod()Lorg/joda/time/Period;",
                                    "method_body": "public Period toPeriod() {\nreturn new Period(getMillis());\n}",
                                    "suspicious_rank": 0.144
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:isFixed()Z",
                                    "method_body": "public boolean isFixed() {\nreturn true;\n}",
                                    "suspicious_rank": 0.118
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.105
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.101
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nreturn iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.085
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.years();\nreturn chronology.months();\nreturn chronology.weeks();\nreturn chronology.days();\nreturn chronology.hours();\nreturn chronology.minutes();\nreturn chronology.seconds();\nreturn chronology.millis();\n}",
                                    "suspicious_rank": 0.082
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(J)V",
                                    "method_body": "public Period(long duration) {\nsuper(duration);\n}",
                                    "suspicious_rank": 0.071
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHours(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {\nreturn forOffsetHoursMinutes(hoursOffset, 0);\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nint offset = 0;\nint hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\nif (hoursInMinutes < 0) {\nminutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}",
                                    "suspicious_rank": 0.054
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:isPrecise()Z",
                                    "method_body": "public boolean isPrecise() {\nreturn iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:isPrecise()Z",
                                    "method_body": "public boolean isPrecise() {\nreturn false;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getYears()I",
                                    "method_body": "public int getYears() {\nreturn getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getMonths()I",
                                    "method_body": "public int getMonths() {\nreturn getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.Period:getWeeks()I",
                                    "method_body": "public int getWeeks() {\nreturn getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.038
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetFromLocalToSubtract(J)I",
                                    "method_body": "private int getOffsetFromLocalToSubtract(long instant) {\nint offset = this.iZone.getOffsetFromLocal(instant);\nlong diff = instant - offset;\nif ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.035
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nint offset = getOffsetToAdd(subtrahendInstant);\nreturn iField.getDifference\n}",
                                    "suspicious_rank": 0.032
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getDifferenceAsLong(JJ)J",
                                    "method_body": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\nlong difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\nreturn difference / iUnitMillis;\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getDifference(JJ)I",
                                    "method_body": "public int getDifference(long minuendInstant, long subtrahendInstant) {\nreturn FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n}",
                                    "suspicious_rank": 0.029
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeSubtract(JJ)J",
                                    "method_body": "public static long safeSubtract(long val1, long val2) {\nlong diff = val1 - val2;\nif ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\nreturn diff;\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nint offset = getOffsetToAdd(instant);\ninstant = iField.add(instant + offset, value);\nreturn instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n}",
                                    "suspicious_rank": 0.027
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}",
                                    "suspicious_rank": 0.026
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getIndexedField(Lorg/joda/time/ReadablePeriod;I)I",
                                    "method_body": "int getIndexedField(ReadablePeriod period, int index) {\nint realIndex = iIndices[index];\nreturn (realIndex == -1 ? 0 : period.getValue(realIndex));\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iWallOffset;\n}",
                                    "suspicious_rank": 0.025
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getOffsetToAdd(J)I",
                                    "method_body": "private int getOffsetToAdd(long instant) {\nint offset = this.iZone.getOffset(instant);\nlong sum = instant + offset;\nif ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\nreturn offset;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeToInt(J)I",
                                    "method_body": "public static int safeToInt(long value) {\nif (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\nreturn (int) value;\n}",
                                    "suspicious_rank": 0.024
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iTypes[index];\n}",
                                    "suspicious_rank": 0.021
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nlong current = 0;\nfor (int i = 0; i < size; i++) {\nDurationField field = period.getFieldType(i).getField(this);\nif (field.isPrecise()) {\nint value = field.getDifference(duration, current);\ncurrent = field.add(current, value);\nvalues[i] = value;\nreturn values;\n}",
                                    "suspicious_rank": 0.019
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDuration:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.018
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn PeriodType.standard();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.Duration:<init>(J)V",
                                    "method_body": "public Duration(long duration) {\nsuper(duration);\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDuration:<init>()V",
                                    "method_body": "protected AbstractDuration() {\nsuper();\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDuration:<init>(J)V",
                                    "method_body": "protected BaseDuration(long duration) {\nsuper();\niMillis = duration;\n}",
                                    "suspicious_rank": 0.017
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}",
                                    "suspicious_rank": 0.013
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.012
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.011
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<0> but was:<64>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:234)\nat junit.framework.Assert.assertEquals(Assert.java:241)\nat junit.framework.TestCase.assertEquals(TestCase.java:409)\nat org.joda.time.TestDuration_Basics.testToPeriod_fixedZone(TestDuration_Basics.java:483)",
                            "test_id": 1
                        }
                    ]
                },
                {
                    "bug_id": 23,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZone.testForID_String_old",
                            "test_body": "243: public void testForID_String_old() {\n244: Map<String, String> map = new LinkedHashMap<String, String>();\n245: map.put(\"GMT\", \"UTC\");\n246: map.put(\"WET\", \"WET\");\n247: map.put(\"CET\", \"CET\");\n248: map.put(\"MET\", \"CET\");\n249: map.put(\"ECT\", \"CET\");\n250: map.put(\"EET\", \"EET\");\n251: map.put(\"MIT\", \"Pacific/Apia\");\n252: map.put(\"HST\", \"Pacific/Honolulu\");\n253: map.put(\"AST\", \"America/Anchorage\");\n254: map.put(\"PST\", \"America/Los_Angeles\");\n255: map.put(\"MST\", \"America/Denver\");\n256: map.put(\"PNT\", \"America/Phoenix\");\n257: map.put(\"CST\", \"America/Chicago\");\n258: map.put(\"EST\", \"America/New_York\");\n259: map.put(\"IET\", \"America/Indiana/Indianapolis\");\n260: map.put(\"PRT\", \"America/Puerto_Rico\");\n261: map.put(\"CNT\", \"America/St_Johns\");\n262: map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n263: map.put(\"BET\", \"America/Sao_Paulo\");\n264: map.put(\"ART\", \"Africa/Cairo\");\n265: map.put(\"CAT\", \"Africa/Harare\");\n266: map.put(\"EAT\", \"Africa/Addis_Ababa\");\n267: map.put(\"NET\", \"Asia/Yerevan\");\n268: map.put(\"PLT\", \"Asia/Karachi\");\n269: map.put(\"IST\", \"Asia/Kolkata\");\n270: map.put(\"BST\", \"Asia/Dhaka\");\n271: map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n272: map.put(\"CTT\", \"Asia/Shanghai\");\n273: map.put(\"JST\", \"Asia/Tokyo\");\n274: map.put(\"ACT\", \"Australia/Darwin\");\n275: map.put(\"AET\", \"Australia/Sydney\");\n276: map.put(\"SST\", \"Pacific/Guadalcanal\");\n277: map.put(\"NST\", \"Pacific/Auckland\");\n278: for (String key : map.keySet()) {\n279: String value = map.get(key);\n280: TimeZone juZone = TimeZone.getTimeZone(key);\n281: DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n282: assertEquals(value, zone.getID());\n283: //            System.out.println(juZone);\n284: //            System.out.println(juZone.getDisplayName());\n285: //            System.out.println(zone);\n286: //            System.out.println(\"------\");\n287: }\n288: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forTimeZone(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forTimeZone(TimeZone zone) {\nif (zone == null) {\nfinal String id = zone.getID();\nif (id.equals(\"UTC\")) {\nDateTimeZone dtz = null;\nString convId = getConvertedId(id);\nif (convId != null) {\ndtz = cProvider.getZone(convId);\nif (dtz == null) {\nif (dtz != null) {\nreturn dtz;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getConvertedId(Ljava/lang/String;)Ljava/lang/String;",
                                    "method_body": "private static synchronized String getConvertedId(String id) {\nMap<String, String> map = cZoneIdConversion;\nif (map == null) {\nreturn map.get(id);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\n}",
                                    "suspicious_rank": 0.08
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.008
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZone.testForID_String_old(TestDateTimeZone.java:282)",
                            "test_id": 0
                        }
                    ]
                },
                {
                    "bug_id": 24,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016",
                            "test_body": "487: public void testParseLocalDate_year_month_week_2016() {\n488: Chronology chrono = GJChronology.getInstanceUTC();\n489: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n490: assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(\"2016-01-01\"));\n491: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.202
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2016-01-04> but was:<2014-12-29>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016(TestDateTimeFormatter.java:490)",
                            "test_id": 0
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010",
                            "test_body": "425: public void testParseLocalDate_weekyear_month_week_2010() {\n426: Chronology chrono = GJChronology.getInstanceUTC();\n427: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n428: assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n429: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekOfWeekyear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.211
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.202
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.193
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendSignedDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n}",
                                    "suspicious_rank": 0.185
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.172
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekyear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits) {\nreturn appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);\n}",
                                    "suspicious_rank": 0.171
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "private static boolean isNumericToken(String token) {\nint tokenLen = token.length();\nif (tokenLen > 0) {\nchar c = token.charAt(0);\nswitch (c) {\nreturn false;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType weekOfWeekyear() {\nreturn WEEK_OF_WEEKYEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType weekyear() {\nreturn WEEKYEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\nint length = pattern.length();\nint[] indexRef = new int[1];\nfor (int i=0; i<length; i++) {\nindexRef[0] = i;\nString token = parseToken(pattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nif (tokenLen == 2) {\nint maxDigits = 9;\nif (i + 1 < length) {\nindexRef[0]++;\nif (isNumericToken(parseToken(pattern, indexRef))) {\nindexRef[0]--;\nswitch (c) {\nbuilder.appendWeekyear(tokenLen, maxDigits);\nbreak;\nbuilder.appendYear(tokenLen, maxDigits);\nbreak;\nbreak;\nif (tokenLen >= 3) {\nbuilder.appendMonthOfYear(tokenLen);\nbreak;\nbuilder.appendWeekOfWeekyear(tokenLen);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nbuilder.appendLiteral(sub.charAt(0));\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "private static String parseToken(String pattern, int[] indexRef) {\nStringBuffer buf = new StringBuffer();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\nworkInstant += DateTimeConstants.MILLIS_PER_WEEK;\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nreturn getWeeksInYear(year - 1);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\ninstant = iChronology.weekOfWeekyear().roundFloor(instant);\nint wow = iChronology.getWeekOfWeekyear(instant);\nif (wow > 1) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010(TestDateTimeFormatter.java:428)",
                            "test_id": 1
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011",
                            "test_body": "431: public void testParseLocalDate_weekyear_month_week_2011() {\n432: Chronology chrono = GJChronology.getInstanceUTC();\n433: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n434: assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n435: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\nworkInstant += DateTimeConstants.MILLIS_PER_WEEK;\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nreturn getWeeksInYear(year - 1);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\ninstant = iChronology.weekOfWeekyear().roundFloor(instant);\nint wow = iChronology.getWeekOfWeekyear(instant);\nif (wow > 1) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2011-01-03> but was:<2010-01-04>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011(TestDateTimeFormatter.java:434)",
                            "test_id": 2
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2010",
                            "test_body": "451: public void testParseLocalDate_year_month_week_2010() {\n452: Chronology chrono = GJChronology.getInstanceUTC();\n453: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n454: assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n455: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendWeekOfWeekyear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.211
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}",
                                    "suspicious_rank": 0.202
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendMonthOfYear(I)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {\nreturn appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);\n}",
                                    "suspicious_rank": 0.193
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendYear(II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {\nreturn appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);\n}",
                                    "suspicious_rank": 0.187
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendSignedDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendSignedDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));\n}",
                                    "suspicious_rank": 0.185
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDecimal(Lorg/joda/time/DateTimeFieldType;II)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDecimal(\nif (fieldType == null) {\nif (maxDigits < minDigits) {\nif (minDigits < 0 || maxDigits <= 0) {\nif (minDigits <= 1) {\nreturn append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));\n}",
                                    "suspicious_rank": 0.172
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:<init>(Lorg/joda/time/DateTimeFieldType;IZI)V",
                                    "method_body": "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\nsuper(fieldType, maxParsedDigits, signed);\niMinPrintedDigits = minPrintedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:<init>(Lorg/joda/time/DateTimeFieldType;IZ)V",
                                    "method_body": "NumberFormatter(DateTimeFieldType fieldType,\nsuper();\niFieldType = fieldType;\niMaxParsedDigits = maxParsedDigits;\niSigned = signed;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:isNumericToken(Ljava/lang/String;)Z",
                                    "method_body": "private static boolean isNumericToken(String token) {\nint tokenLen = token.length();\nif (tokenLen > 0) {\nchar c = token.charAt(0);\nswitch (c) {\nreturn false;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:weekOfWeekyear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType weekOfWeekyear() {\nreturn WEEK_OF_WEEKYEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parsePatternTo(Lorg/joda/time/format/DateTimeFormatterBuilder;Ljava/lang/String;)V",
                                    "method_body": "private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {\nint length = pattern.length();\nint[] indexRef = new int[1];\nfor (int i=0; i<length; i++) {\nindexRef[0] = i;\nString token = parseToken(pattern, indexRef);\ni = indexRef[0];\nint tokenLen = token.length();\nif (tokenLen == 0) {\nchar c = token.charAt(0);\nswitch (c) {\nif (tokenLen == 2) {\nint maxDigits = 9;\nif (i + 1 < length) {\nindexRef[0]++;\nif (isNumericToken(parseToken(pattern, indexRef))) {\nindexRef[0]--;\nswitch (c) {\nbuilder.appendWeekyear(tokenLen, maxDigits);\nbreak;\nbuilder.appendYear(tokenLen, maxDigits);\nbreak;\nbreak;\nif (tokenLen >= 3) {\nbuilder.appendMonthOfYear(tokenLen);\nbreak;\nbuilder.appendWeekOfWeekyear(tokenLen);\nbreak;\nString sub = token.substring(1);\nif (sub.length() == 1) {\nbuilder.appendLiteral(sub.charAt(0));\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:parseToken(Ljava/lang/String;[I)Ljava/lang/String;",
                                    "method_body": "private static String parseToken(String pattern, int[] indexRef) {\nStringBuffer buf = new StringBuffer();\nint i = indexRef[0];\nint length = pattern.length();\nchar c = pattern.charAt(i);\nif (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\nbuf.append(c);\nwhile (i + 1 < length) {\nchar peek = pattern.charAt(i + 1);\nif (peek == c) {\nbuf.append(c);\ni++;\n}\nbuf.append('\\'');\nboolean inLiteral = false;\nfor (; i < length; i++) {\nc = pattern.charAt(i);\nif (c == '\\'') {\n} else if (!inLiteral &&\ni--;\nbreak;\nbuf.append(c);\nindexRef[0] = i;\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:createFormatterForPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "private static DateTimeFormatter createFormatterForPattern(String pattern) {\nif (pattern == null || pattern.length() == 0) {\nDateTimeFormatter formatter = null;\nsynchronized (cPatternedCache) {\nformatter = cPatternedCache.get(pattern);\nif (formatter == null) {\nDateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\nparsePatternTo(builder, pattern);\nformatter = builder.toFormatter();\ncPatternedCache.put(pattern, formatter);\n}\nreturn formatter;\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2010(TestDateTimeFormatter.java:454)",
                            "test_id": 3
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2012",
                            "test_body": "437: public void testParseLocalDate_weekyear_month_week_2012() {\n438: Chronology chrono = GJChronology.getInstanceUTC();\n439: DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n440: assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n441: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds(this, Math.abs(year),\nint thisWeekyear = get( instant );\nif ( thisWeekyear == year ) {\nint thisDow = iChronology.getDayOfWeek(instant);\nint weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );\nint weeksInToYear = iChronology.getWeeksInYear( year );\nint maxOutWeeks = (weeksInToYear < weeksInFromYear) ?\nint setToWeek = iChronology.getWeekOfWeekyear(instant);\nif ( setToWeek > maxOutWeeks ) {\nlong workInstant = instant; // Get a copy\nworkInstant = iChronology.setYear( workInstant, year );\nint workWoyYear = get( workInstant );\nif ( workWoyYear < year ) {\nworkInstant += DateTimeConstants.MILLIS_PER_WEEK;\nint currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);\nworkInstant = workInstant + (setToWeek - currentWoyWeek)\nworkInstant = iChronology.dayOfWeek().set( workInstant, thisDow );\nreturn workInstant;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn getMaximumValue(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekyear(instant);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekyear(J)I",
                                    "method_body": "int getWeekyear(long instant) {\nint year = getYear(instant);\nint week = getWeekOfWeekyear(instant, year);\nif (week == 1) {\nreturn getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);\n} else if (week > 51) {\nreturn getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn DateTimeConstants.SUNDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn DateTimeConstants.MONDAY;\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(JI)I",
                                    "method_body": "int getWeekOfWeekyear(long instant, int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nif (instant < firstWeekMillis1) {\nreturn getWeeksInYear(year - 1);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nif (instant >= firstWeekMillis2) {\nreturn (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getMaximumValue(J)I",
                                    "method_body": "public int getMaximumValue(long instant) {\nreturn getMaximumValue();\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\ninstant = iChronology.weekOfWeekyear().roundFloor(instant);\nint wow = iChronology.getWeekOfWeekyear(instant);\nif (wow > 1) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-01-02> but was:<2011-01-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2012(TestDateTimeFormatter.java:440)",
                            "test_id": 4
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2012",
                            "test_body": "463: public void testParseLocalDate_year_month_week_2012() {\n464: Chronology chrono = GJChronology.getInstanceUTC();\n465: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n466: assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n467: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2012-01-02> but was:<2011-01-03>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2012(TestDateTimeFormatter.java:466)",
                            "test_id": 5
                        },
                        {
                            "test_name": "org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2011",
                            "test_body": "457: public void testParseLocalDate_year_month_week_2011() {\n458: Chronology chrono = GJChronology.getInstanceUTC();\n459: DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n460: assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n461: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.LocalDate:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.date().print(this);\n}",
                                    "suspicious_rank": 0.336
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = getBase()) != null) {\nlong instant = iGregorianChronology.getDateTimeMillis\nif (instant < iCutoverMillis) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.315
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}",
                                    "suspicious_rank": 0.289
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}",
                                    "suspicious_rank": 0.283
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}",
                                    "suspicious_rank": 0.282
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}",
                                    "suspicious_rank": 0.272
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:get(Lorg/joda/time/DateTimeFieldType;)I",
                                    "method_body": "public int get(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nif (isSupported(fieldType) == false) {\nreturn fieldType.getField(getChronology()).get(getLocalMillis());\n}",
                                    "suspicious_rank": 0.265
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDate(Ljava/lang/String;)Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate parseLocalDate(String text) {\nreturn parseLocalDateTime(text).toLocalDate();\n}",
                                    "suspicious_rank": 0.26
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn value > 52 ? getMaximumValue(instant) : 52;\n}",
                                    "suspicious_rank": 0.258
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:toLocalDate()Lorg/joda/time/LocalDate;",
                                    "method_body": "public LocalDate toLocalDate() {\nreturn new LocalDate(getLocalMillis(), getChronology());\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:date()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter date() {\nreturn yearMonthDay();\n}",
                                    "suspicious_rank": 0.255
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:yearMonthDay()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter yearMonthDay() {\nif (ymd == null) {\nreturn ymd;\n}",
                                    "suspicious_rank": 0.253
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object obj) {\nreturn super.equals(obj);\n}",
                                    "suspicious_rank": 0.246
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.244
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:isSupported(Lorg/joda/time/DateTimeFieldType;)Z",
                                    "method_body": "public boolean isSupported(DateTimeFieldType type) {\nif (type == null) {\nDurationFieldType durType = type.getDurationType();\nif (DATE_DURATION_TYPES.contains(durType) ||\nreturn type.getField(getChronology()).isSupported();\n}",
                                    "suspicious_rank": 0.241
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\nreturn position + 1;\n}",
                                    "suspicious_rank": 0.229
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}",
                                    "suspicious_rank": 0.226
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}",
                                    "suspicious_rank": 0.221
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseLocalDateTime(Ljava/lang/String;)Lorg/joda/time/LocalDateTime;",
                                    "method_body": "public LocalDateTime parseLocalDateTime(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nlong millis = bucket.computeMillis(true, text);\nif (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\nint parsedOffset = bucket.getOffset();\nDateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\nchrono = chrono.withZone(parsedZone);\nreturn new LocalDateTime(millis, chrono);\n}",
                                    "suspicious_rank": 0.22
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nint est = 1 + iMinFields << 1;\nif (iShowSeparators) {\nest += iMinFields - 1;\nif (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {\nreturn est;\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.218
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getOffset()I",
                                    "method_body": "public int getOffset() {\nreturn iOffset;\n}",
                                    "suspicious_rank": 0.198
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn iZone;\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getWeekOfWeekyear(instant);\n}",
                                    "suspicious_rank": 0.196
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.194
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:addArrayToList(Ljava/util/List;[Ljava/lang/Object;)V",
                                    "method_body": "private void addArrayToList(List<Object> list, Object[] array) {\nif (array != null) {\nfor (int i=0; i<array.length; i++) {\nlist.add(array[i]);\n}",
                                    "suspicious_rank": 0.183
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append(Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {\nif (formatter == null) {\nreturn append0(formatter.getPrinter(), formatter.getParser());\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(\niFormatter = null;\niElementPairs.add(printer);\niElementPairs.add(parser);\nreturn this;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "public DateTimeParser getParser() {\nreturn iParser;\n}",
                                    "suspicious_rank": 0.181
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:getPrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "public DateTimePrinter getPrinter() {\nreturn iPrinter;\n}",
                                    "suspicious_rank": 0.18
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object partial) {\nif (this == partial) {\nif (partial instanceof LocalDate) {\nLocalDate other = (LocalDate) partial;\nif (iChronology.equals(other.iChronology)) {\nreturn iLocalMillis == other.iLocalMillis;\n}",
                                    "suspicious_rank": 0.177
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}",
                                    "suspicious_rank": 0.174
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn 1;\n}",
                                    "suspicious_rank": 0.17
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeNoMillis()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeNoMillis() {\nif (dtx == null) {\nreturn dtx;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendLiteral(C)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendLiteral(char c) {\nreturn append0(new CharacterLiteral(c));\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:<init>(C)V",
                                    "method_body": "CharacterLiteral(char value) {\nsuper();\niValue = value;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iMaxParsedDigits;\n}",
                                    "suspicious_rank": 0.169
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isPrinter()Z",
                                    "method_body": "boolean isPrinter() {\nreturn iPrinters != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:isParser()Z",
                                    "method_body": "boolean isParser() {\nreturn iParsers != null;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nsuper();\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\nint size = printerList.size();\niPrinters = new DateTimePrinter[size];\nint printEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimePrinter printer = (DateTimePrinter) printerList.get(i);\nprintEst += printer.estimatePrintedLength();\niPrinters[i] = printer;\niPrintedLengthEstimate = printEst;\nif (parserList.size() <= 0) {\nint size = parserList.size();\niParsers = new DateTimeParser[size];\nint parseEst = 0;\nfor (int i=0; i<size; i++) {\nDateTimeParser parser = (DateTimeParser) parserList.get(i);\nparseEst += parser.estimateParsedLength();\niParsers[i] = parser;\niParsedLengthEstimate = parseEst;\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof DateTimePrinter) {\nif (element instanceof Composite) {\naddArrayToList(printerList, ((Composite)element).iPrinters);\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof DateTimeParser) {\nif (element instanceof Composite) {\naddArrayToList(parserList, ((Composite)element).iParsers);\nparserList.add(element);\n}",
                                    "suspicious_rank": 0.168
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}",
                                    "suspicious_rank": 0.167
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:toFormatter()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter toFormatter() {\nObject f = getFormatter();\nDateTimePrinter printer = null;\nif (isPrinter(f)) {\nprinter = (DateTimePrinter) f;\nDateTimeParser parser = null;\nif (isParser(f)) {\nparser = (DateTimeParser) f;\nif (printer != null || parser != null) {\nreturn new DateTimeFormatter(printer, parser);\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;)V",
                                    "method_body": "public DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niOffsetParsed = false;\niChrono = null;\niZone = null;\niPivotYear = null;\niDefaultYear = 2000;\n}",
                                    "suspicious_rank": 0.166
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isPrinter(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isPrinter(Object f) {\nif (f instanceof DateTimePrinter) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isPrinter();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:isParser(Ljava/lang/Object;)Z",
                                    "method_body": "private boolean isParser(Object f) {\nif (f instanceof DateTimeParser) {\nif (f instanceof Composite) {\nreturn ((Composite)f).isParser();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:append0(Ljava/lang/Object;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "private DateTimeFormatterBuilder append0(Object element) {\niFormatter = null;\niElementPairs.add(element);\niElementPairs.add(element);\nreturn this;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:getFormatter()Ljava/lang/Object;",
                                    "method_body": "private Object getFormatter() {\nObject f = iFormatter;\nif (f == null) {\nif (iElementPairs.size() == 2) {\nif (f == null) {\nf = new Composite(iElementPairs);\niFormatter = f;\nreturn f;\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:<init>()V",
                                    "method_body": "public DateTimeFormatterBuilder() {\nsuper();\niElementPairs = new ArrayList<Object>();\n}",
                                    "suspicious_rank": 0.165
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= iCutover) {\ninstant = iGregorianField.roundFloor(instant);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.16
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendDayOfWeekShortText()Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendDayOfWeekShortText() {\nreturn appendShortText(DateTimeFieldType.dayOfWeek());\n}",
                                    "suspicious_rank": 0.159
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.weekOfWeekyear();\n}",
                                    "suspicious_rank": 0.15
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\nreturn compareReverse\n}",
                                    "suspicious_rank": 0.146
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nreturn 0;\nif (thisMillis < otherMillis) {\nreturn 1;\n}",
                                    "suspicious_rank": 0.145
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder:appendShortText(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/format/DateTimeFormatterBuilder;",
                                    "method_body": "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {\nif (fieldType == null) {\nreturn append0(new TextField(fieldType, true));\n}",
                                    "suspicious_rank": 0.143
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}",
                                    "suspicious_rank": 0.134
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimateParsedLength()I",
                                    "method_body": "public int estimateParsedLength() {\nreturn estimatePrintedLength();\n}",
                                    "suspicious_rank": 0.133
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\nchronology = chronology.withUTC();\niLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\niChronology = chronology;\n}",
                                    "suspicious_rank": 0.132
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:<init>(Lorg/joda/time/DateTimeFieldType;Z)V",
                                    "method_body": "TextField(DateTimeFieldType fieldType, boolean isShort) {\nsuper();\niFieldType = fieldType;\niShort = isShort;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TextField:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iShort ? 6 : 20;\n}",
                                    "suspicious_rank": 0.126
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.122
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.119
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nbuf.append(iValue);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i=0; i<len; i++) {\nelements[i].printTo(buf, partial, locale);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}",
                                    "suspicious_rank": 0.117
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\nif (partial.isSupported(iFieldType)) {\nFormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);\n}\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadablePartial partial) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, partial);\nreturn buf.toString();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}",
                                    "suspicious_rank": 0.116
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadablePartial;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadablePartial partial) {\nDateTimePrinter printer = requirePrinter();\nif (partial == null) {\nprinter.printTo(buf, partial, iLocale);\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nif (isLeapYear(year)) {\noneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;\nyearStart += oneYear;\nif (yearStart <= instant) {\nyear++;\nreturn year;\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}",
                                    "suspicious_rank": 0.115
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDateTime(long instant, Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nlong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\niLocalMillis = localMillis;\niChronology = chronology.withUTC();\n}",
                                    "suspicious_rank": 0.114
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}",
                                    "suspicious_rank": 0.113
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}",
                                    "suspicious_rank": 0.112
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}",
                                    "suspicious_rank": 0.11
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}",
                                    "suspicious_rank": 0.109
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:<init>(IIILorg/joda/time/Chronology;)V",
                                    "method_body": "public LocalDate(\nsuper();\nchronology = DateTimeUtils.getChronology(chronology).withUTC();\nlong instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\niChronology = chronology;\niLocalMillis = instant;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}",
                                    "suspicious_rank": 0.108
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.102
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}",
                                    "suspicious_rank": 0.1
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDate:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.098
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstanceUTC()Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static GJChronology getInstanceUTC() {\nreturn getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getLocalMillis()J",
                                    "method_body": "protected long getLocalMillis() {\nreturn iLocalMillis;\n}",
                                    "suspicious_rank": 0.096
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.095
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\nreturn chrono;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.LocalDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}",
                                    "suspicious_rank": 0.094
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}",
                                    "suspicious_rank": 0.092
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfDay() {\nreturn MILLIS_OF_DAY_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfWeek()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfWeek() {\nreturn DAY_OF_WEEK_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getDurationType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getDurationType() {\nreturn iUnitType;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}",
                                    "suspicious_rank": 0.091
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}",
                                    "suspicious_rank": 0.09
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}",
                                    "suspicious_rank": 0.087
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}",
                                    "suspicious_rank": 0.086
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormat:forPattern(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter forPattern(String pattern) {\nreturn createFormatterForPattern(pattern);\n}",
                                    "suspicious_rank": 0.084
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}",
                                    "suspicious_rank": 0.079
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getMillisKeepLocal(Lorg/joda/time/DateTimeZone;J)J",
                                    "method_body": "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\nif (newZone == null) {\nif (newZone == this) {\nreturn oldInstant;\n}",
                                    "suspicious_rank": 0.076
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}",
                                    "suspicious_rank": 0.067
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}",
                                    "suspicious_rank": 0.066
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}",
                                    "suspicious_rank": 0.062
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}",
                                    "suspicious_rank": 0.058
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseLocal:<init>()V",
                                    "method_body": "protected BaseLocal() {\nsuper();\n}",
                                    "suspicious_rank": 0.055
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeeksInYear(I)I",
                                    "method_body": "int getWeeksInYear(int year) {\nlong firstWeekMillis1 = getFirstWeekOfYearMillis(year);\nlong firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);\nreturn (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);\n}",
                                    "suspicious_rank": 0.053
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getWeekOfWeekyear(J)I",
                                    "method_body": "int getWeekOfWeekyear(long instant) {\nreturn getWeekOfWeekyear(instant, getYear(instant));\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getFirstWeekOfYearMillis(I)J",
                                    "method_body": "long getFirstWeekOfYearMillis(int year) {\nlong jan1millis = getYearMillis(year);\nint jan1dayOfWeek = getDayOfWeek(jan1millis);\nif (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {\nreturn jan1millis + (8 - jan1dayOfWeek)\nreturn jan1millis - (jan1dayOfWeek - 1)\n}",
                                    "suspicious_rank": 0.052
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}",
                                    "suspicious_rank": 0.05
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}",
                                    "suspicious_rank": 0.049
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getGregorianCutover()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant getGregorianCutover() {\nreturn iCutoverInstant;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iGregorianChronology.getMinimumDaysInFirstWeek();\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn withZone(DateTimeZone.UTC);\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:withZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withZone(DateTimeZone zone) {\nif (zone == null) {\nif (zone == getZone()) {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:toInstant()Lorg/joda/time/Instant;",
                                    "method_body": "public Instant toInstant() {\nreturn this;\n}",
                                    "suspicious_rank": 0.047
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}",
                                    "suspicious_rank": 0.044
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= iCutover) {\nreturn iGregorianField.get(instant);\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nif (instant >= iCutover) {\ninstant = iGregorianField.set(instant, value);\nif (instant < iCutover) {\nreturn instant;\n}",
                                    "suspicious_rank": 0.043
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology:getInstance(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;I)Lorg/joda/time/chrono/GJChronology;",
                                    "method_body": "public static synchronized GJChronology getInstance(\nzone = DateTimeUtils.getZone(zone);\nif (gregorianCutover == null) {\ncutoverInstant = gregorianCutover.toInstant();\nArrayList<GJChronology> chronos = cCache.get(zone);\nif (chronos == null) {\nfor (int i=chronos.size(); --i>=0; ) {\nchrono = chronos.get(i);\nif (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\nreturn chrono;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJChronology$CutoverField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static final DateTimeZone getZone(DateTimeZone zone) {\nif (zone == null) {\nreturn zone;\n}",
                                    "suspicious_rank": 0.042
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMinimumDaysInFirstWeek()I",
                                    "method_body": "public int getMinimumDaysInFirstWeek() {\nreturn iMinDaysInFirstWeek;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}",
                                    "suspicious_rank": 0.041
                                },
                                {
                                    "method_signature": "org.joda.time.Instant:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}",
                                    "suspicious_rank": 0.04
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}",
                                    "suspicious_rank": 0.039
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPartial:<init>()V",
                                    "method_body": "protected AbstractPartial() {\nsuper();\n}",
                                    "suspicious_rank": 0.037
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}",
                                    "suspicious_rank": 0.036
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}",
                                    "suspicious_rank": 0.028
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}",
                                    "suspicious_rank": 0.028
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2011-01-03> but was:<2010-01-04>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2011(TestDateTimeFormatter.java:460)",
                            "test_id": 6
                        }
                    ]
                },
                {
                    "bug_id": 25,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_Moscow_Autumn",
                            "test_body": "920: public void test_DateTime_constructor_Moscow_Autumn() {\n921: DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);\n922: assertEquals(\"2007-10-28T02:30:00.000+04:00\", dt.toString());\n923: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:hashCode()I",
                                    "method_body": "public abstract boolean equals(Object object);\nreturn 57 + getID().hashCode();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = standardOffset;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\ni = ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nreturn iTailZone.getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_Moscow_Autumn(TestDateTimeZoneCutover.java:922)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn",
                            "test_body": "889: public void test_getOffsetFromLocal_Moscow_Autumn() {\n890: doTest_getOffsetFromLocal(10, 28, 0, 0, \"2007-10-28T00:00:00.000+04:00\", ZONE_MOSCOW);\n891: doTest_getOffsetFromLocal(10, 28, 0,30, \"2007-10-28T00:30:00.000+04:00\", ZONE_MOSCOW);\n892: doTest_getOffsetFromLocal(10, 28, 1, 0, \"2007-10-28T01:00:00.000+04:00\", ZONE_MOSCOW);\n893: doTest_getOffsetFromLocal(10, 28, 1,30, \"2007-10-28T01:30:00.000+04:00\", ZONE_MOSCOW);\n894: 895: doTest_getOffsetFromLocal(10, 28, 2, 0, \"2007-10-28T02:00:00.000+04:00\", ZONE_MOSCOW);\n896: doTest_getOffsetFromLocal(10, 28, 2,30, \"2007-10-28T02:30:00.000+04:00\", ZONE_MOSCOW);\n897: doTest_getOffsetFromLocal(10, 28, 2,30,59,999, \"2007-10-28T02:30:59.999+04:00\", ZONE_MOSCOW);\n898: doTest_getOffsetFromLocal(10, 28, 2,59,59,998, \"2007-10-28T02:59:59.998+04:00\", ZONE_MOSCOW);\n899: doTest_getOffsetFromLocal(10, 28, 2,59,59,999, \"2007-10-28T02:59:59.999+04:00\", ZONE_MOSCOW);\n900: 901: doTest_getOffsetFromLocal(10, 28, 3, 0, \"2007-10-28T03:00:00.000+03:00\", ZONE_MOSCOW);\n902: doTest_getOffsetFromLocal(10, 28, 3,30, \"2007-10-28T03:30:00.000+03:00\", ZONE_MOSCOW);\n903: doTest_getOffsetFromLocal(10, 28, 4, 0, \"2007-10-28T04:00:00.000+03:00\", ZONE_MOSCOW);\n904: doTest_getOffsetFromLocal(10, 28, 5, 0, \"2007-10-28T05:00:00.000+03:00\", ZONE_MOSCOW);\n905: doTest_getOffsetFromLocal(10, 28, 6, 0, \"2007-10-28T06:00:00.000+03:00\", ZONE_MOSCOW);\n906: doTest_getOffsetFromLocal(10, 28, 7, 0, \"2007-10-28T07:00:00.000+03:00\", ZONE_MOSCOW);\n907: doTest_getOffsetFromLocal(10, 28, 8, 0, \"2007-10-28T08:00:00.000+03:00\", ZONE_MOSCOW);\n908: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nfinal int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\nif (offsetLocal != offsetAdjusted) {\nif ((offsetLocal - offsetAdjusted) < 0) {\nlong nextLocal = nextTransition(instantAdjusted);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\nif (nextLocal != nextAdjusted) {\nreturn offsetAdjusted;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nreturn iZone.nextTransition(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(long instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(long instant, DateTimeZone zone) {\nthis(instant, ISOChronology.getInstance(zone));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\n} else if (iMode == 's') {\noffset = standardOffset;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nif (iTailZone == null) {\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (isLeapYear(year)) {\ndayOfYear++;\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: 2007-10-28T02:00:00.000+03:00 expected:<...10-28T02:00:00.000+0[4]:00> but was:<...10-28T02:00:00.000+0[3]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(TestDateTimeZoneCutover.java:1232)\nat org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(TestDateTimeZoneCutover.java:1217)\nat org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn(TestDateTimeZoneCutover.java:895)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn_overlap_mins",
                            "test_body": "910: public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {\n911: for (int min = 0; min < 60; min++) {\n912: if (min < 10) {\n913: doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:0\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n914: } else {\n915: doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n916: }\n917: }\n918: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(long instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(long instant, DateTimeZone zone) {\nthis(instant, ISOChronology.getInstance(zone));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn DateTimeZone.UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: 2007-10-28T02:00:00.000+03:00 expected:<...10-28T02:00:00.000+0[4]:00> but was:<...10-28T02:00:00.000+0[3]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.TestCase.assertEquals(TestCase.java:261)\nat org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(TestDateTimeZoneCutover.java:1232)\nat org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(TestDateTimeZoneCutover.java:1217)\nat org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn_overlap_mins(TestDateTimeZoneCutover.java:913)"
                        }
                    ]
                },
                {
                    "bug_id": 26,
                    "tests": [
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_usCentral",
                            "test_body": "1153: public void testBug2182444_usCentral() {\n1154: Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n1155: Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n1156: DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n1157: DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n1158: assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));\n1159: assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));\n1160: 1161: DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n1162: DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n1163: assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());\n1164: assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());\n1165: assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());\n1166: assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));\n1167: assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());\n1168: assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));\n1169: assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());\n1170: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTime:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime toDateTime(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nif (getChronology() == chronology) {\nreturn super.toDateTime(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd < 0) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iStandardOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iStandardOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "public static GregorianChronology getInstance(DateTimeZone zone) {\nreturn getInstance(zone, 4);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\niInfoCache = new Info[cInfoCacheMask + 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withHourOfDay(int hour) {\nreturn withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:isStandardOffset(J)Z",
                                    "method_body": "public boolean isStandardOffset(long instant) {\nreturn getOffset(instant) == getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:getHourOfDay()I",
                                    "method_body": "public int getHourOfDay() {\nreturn getChronology().hourOfDay().get(getMillis());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonth(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonth(Chronology chrono, long instant) {\nif (iDayOfMonth >= 0) {\ninstant = chrono.dayOfMonth().set(instant, iDayOfMonth);\ninstant = chrono.dayOfMonth().set(instant, 1);\ninstant = chrono.monthOfYear().add(instant, 1);\ninstant = chrono.dayOfMonth().add(instant, iDayOfMonth);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long instant) {\nreturn iStandardOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\noffset = standardOffset + saveMillis;\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iWallOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iWallOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iStandardOffset == Integer.MIN_VALUE) {\niStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);\nreturn iStandardOffset;\nreturn iNextInfo.getStandardOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\nreturn new CachedDateTimeZone(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase() == null) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nGregorianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchronos = new GregorianChronology[7];\ncCache.put(zone, chronos);\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\nif (zone == DateTimeZone.UTC) {\nchrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\nchrono = new GregorianChronology\nchronos[minDaysInFirstWeek - 1] = chrono;\n}\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long instant) {\nreturn getInfo(instant).getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\nreturn getZone((String)obj);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\nString[] pool = new String[poolSize];\nfor (int i=0; i<poolSize; i++) {\npool[i] = in.readUTF();\nint size = in.readInt();\nlong[] transitions = new long[size];\nint[] wallOffsets = new int[size];\nint[] standardOffsets = new int[size];\nString[] nameKeys = new String[size];\nfor (int i=0; i<size; i++) {\ntransitions[i] = readMillis(in);\nwallOffsets[i] = (int)readMillis(in);\nstandardOffsets[i] = (int)readMillis(in);\nif (poolSize < 256) {\nindex = in.readUnsignedByte();\nnameKeys[i] = pool[index];\n}\nDSTZone tailZone = null;\nif (in.readBoolean()) {\ntailZone = DSTZone.readFrom(in, id);\nreturn new PrecalculatedZone\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\nString path = iResourcePath.concat(name);\nif (iLoader != null) {\nin = iLoader.getResourceAsStream(path);\nif (in == null) {\nreturn in;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "OfYear(char mode,\n{\nif (mode != 'u' && mode != 'w' && mode != 's') {\niMode = mode;\niMonthOfYear = monthOfYear;\niDayOfMonth = dayOfMonth;\niDayOfWeek = dayOfWeek;\niAdvance = advanceDayOfWeek;\niMillisOfDay = millisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\nswitch (v >> 6) {\nv = (v << (32 - 6)) >> (32 - 6);\nreturn v * (30 * 60000L);\nv = (v << (32 - 6)) >> (32 - 30);\nv |= (in.readUnsignedByte()) << 16;\nv |= (in.readUnsignedByte()) << 8;\nv |= (in.readUnsignedByte());\nreturn v * 60000L;\nlong w = (((long)v) << (64 - 6)) >> (64 - 38);\nw |= (in.readUnsignedByte()) << 24;\nw |= (in.readUnsignedByte()) << 16;\nw |= (in.readUnsignedByte()) << 8;\nw |= (in.readUnsignedByte());\nreturn w * 1000L;\nreturn in.readLong();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param);\nif (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\niMinDaysInFirstWeek = minDaysInFirstWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime toDateTime(Chronology chronology) {\nreturn new DateTime(getMillis(), chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug2182444_usCentral(TestDateTimeZoneCutover.java:1166)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW",
                            "test_body": "1172: public void testBug2182444_ausNSW() {\n1173: Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n1174: Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n1175: DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n1176: DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n1177: assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));\n1178: assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));\n1179: 1180: DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n1181: DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n1182: assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\n1183: assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());\n1184: assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());\n1185: assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));\n1186: assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());\n1187: assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));\n1188: assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());\n1189: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.DateTime:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime toDateTime(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nif (getChronology() == chronology) {\nreturn super.toDateTime(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "private GregorianChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;",
                                    "method_body": "static OfYear readFrom(DataInput in) throws IOException {\nreturn new OfYear((char)in.readUnsignedByte(),\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:readFrom(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "static Recurrence readFrom(DataInput in) throws IOException {\nreturn new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iStandardOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iStandardOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "public static GregorianChronology getInstance(DateTimeZone zone) {\nreturn getInstance(zone, 4);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.OffsetDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:<init>(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private CachedDateTimeZone(DateTimeZone zone) {\nsuper(zone.getID());\niZone = zone;\niInfoCache = new Info[cInfoCacheMask + 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withHourOfDay(int hour) {\nreturn withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param, minDaysInFirstWeek);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:isStandardOffset(J)Z",
                                    "method_body": "public boolean isStandardOffset(long instant) {\nreturn getOffset(instant) == getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:getHourOfDay()I",
                                    "method_body": "public int getHourOfDay() {\nreturn getChronology().hourOfDay().get(getMillis());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = getBase()) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;",
                                    "method_body": "static DSTZone readFrom(DataInput in, String id) throws IOException {\nreturn new DSTZone(id, (int)readMillis(in),\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(DataInput in, String id) throws IOException {\nswitch (in.readUnsignedByte()) {\nreturn CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillisOfSecond(int millis) {\nreturn withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:<init>(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V",
                                    "method_body": "DSTZone(String id, int standardOffset,\nsuper(id);\niStandardOffset = standardOffset;\niStartRecurrence = startRecurrence;\niEndRecurrence = endRecurrence;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nreturn zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\ni = (i >= 0) ? (i + 1) : ~i;\nif (i < transitions.length) {\nreturn transitions[i];\nif (iTailZone == null) {\nlong end = transitions[transitions.length - 1];\nif (instant < end) {\nreturn iTailZone.nextTransition(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:loadZoneData(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private DateTimeZone loadZoneData(String id) {\nInputStream in = null;\nin = openResource(id);\nDateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\niZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\nreturn tz;\nif (in != null) {\nin.close();\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iWallOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iWallOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iStandardOffset == Integer.MIN_VALUE) {\niStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);\nreturn iStandardOffset;\nreturn iNextInfo.getStandardOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:forZone(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;",
                                    "method_body": "public static CachedDateTimeZone forZone(DateTimeZone zone) {\nif (zone instanceof CachedDateTimeZone) {\nreturn new CachedDateTimeZone(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:<init>(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V",
                                    "method_body": "Recurrence(OfYear ofYear, String nameKey, int saveMillis) {\niOfYear = ofYear;\niNameKey = nameKey;\niSaveMillis = saveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase() == null) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getInstance(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/GregorianChronology;",
                                    "method_body": "public static GregorianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {\nif (zone == null) {\nsynchronized (cCache) {\nGregorianChronology[] chronos = cCache.get(zone);\nif (chronos == null) {\nchronos = new GregorianChronology[7];\ncCache.put(zone, chronos);\nchrono = chronos[minDaysInFirstWeek - 1];\n}\nif (chrono == null) {\nif (zone == DateTimeZone.UTC) {\nchrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);\nchrono = new GregorianChronology\nchronos[minDaysInFirstWeek - 1] = chrono;\n}\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:equals(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean equals(Object readableInstant) {\nif (this == readableInstant) {\nreturn true;\nif (readableInstant instanceof ReadableInstant == false) {\nReadableInstant otherInstant = (ReadableInstant) readableInstant;\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readFrom(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone readFrom(InputStream in, String id) throws IOException {\nif (in instanceof DataInput) {\nreturn readFrom((DataInput)new DataInputStream(in), id);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getStandardOffset(J)I",
                                    "method_body": "public int getStandardOffset(long instant) {\nreturn getInfo(instant).getStandardOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:getZone(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone(String id) {\nif (id == null) {\nObject obj = iZoneInfoMap.get(id);\nif (obj == null) {\nif (id.equals(obj)) {\nreturn loadZoneData(id);\nif (obj instanceof SoftReference<?>) {\nSoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;\nDateTimeZone tz = ref.get();\nif (tz != null) {\nreturn tz;\nreturn getZone((String)obj);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:readFrom(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;",
                                    "method_body": "static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {\nint poolSize = in.readUnsignedShort();\nString[] pool = new String[poolSize];\nfor (int i=0; i<poolSize; i++) {\npool[i] = in.readUTF();\nint size = in.readInt();\nlong[] transitions = new long[size];\nint[] wallOffsets = new int[size];\nint[] standardOffsets = new int[size];\nString[] nameKeys = new String[size];\nfor (int i=0; i<size; i++) {\ntransitions[i] = readMillis(in);\nwallOffsets[i] = (int)readMillis(in);\nstandardOffsets[i] = (int)readMillis(in);\nif (poolSize < 256) {\nindex = in.readUnsignedByte();\nnameKeys[i] = pool[index];\n}\nDSTZone tailZone = null;\nif (in.readBoolean()) {\ntailZone = DSTZone.readFrom(in, id);\nreturn new PrecalculatedZone\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.ZoneInfoProvider:openResource(Ljava/lang/String;)Ljava/io/InputStream;",
                                    "method_body": "private InputStream openResource(String name) throws IOException {\nif (iFileDir != null) {\nString path = iResourcePath.concat(name);\nif (iLoader != null) {\nin = iLoader.getResourceAsStream(path);\nif (in == null) {\nreturn in;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:<init>(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V",
                                    "method_body": "private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,\nsuper(id);\niTransitions = transitions;\niWallOffsets = wallOffsets;\niStandardOffsets = standardOffsets;\niNameKeys = nameKeys;\niTailZone = tailZone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:<init>(CIIIZI)V",
                                    "method_body": "OfYear(char mode,\n{\nif (mode != 'u' && mode != 'w' && mode != 's') {\niMode = mode;\niMonthOfYear = monthOfYear;\niDayOfMonth = dayOfMonth;\niDayOfWeek = dayOfWeek;\niAdvance = advanceDayOfWeek;\niMillisOfDay = millisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder:readMillis(Ljava/io/DataInput;)J",
                                    "method_body": "static long readMillis(DataInput in) throws IOException {\nint v = in.readUnsignedByte();\nswitch (v >> 6) {\nv = (v << (32 - 6)) >> (32 - 6);\nreturn v * (30 * 60000L);\nv = (v << (32 - 6)) >> (32 - 30);\nv |= (in.readUnsignedByte()) << 16;\nv |= (in.readUnsignedByte()) << 8;\nv |= (in.readUnsignedByte());\nreturn v * 60000L;\nlong w = (((long)v) << (64 - 6)) >> (64 - 38);\nw |= (in.readUnsignedByte()) << 24;\nw |= (in.readUnsignedByte()) << 16;\nw |= (in.readUnsignedByte()) << 8;\nw |= (in.readUnsignedByte());\nreturn w * 1000L;\nreturn in.readLong();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V",
                                    "method_body": "BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {\nsuper(base, param);\nif (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {\niMinDaysInFirstWeek = minDaysInFirstWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInYearMonth(II)I",
                                    "method_body": "int getDaysInYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];\nreturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toDateTime(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime toDateTime(Chronology chronology) {\nreturn new DateTime(getMillis(), chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.AssertionFailedError: expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.Assert.failNotEquals(Assert.java:329)\nat junit.framework.Assert.assertEquals(Assert.java:78)\nat junit.framework.Assert.assertEquals(Assert.java:86)\nat junit.framework.TestCase.assertEquals(TestCase.java:253)\nat org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW(TestDateTimeZoneCutover.java:1187)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer",
                            "test_body": "1104: public void testWithMillisOfSecondInDstChange_Paris_summer() {\n1105: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1106: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1107: DateTime test = dateTime.withMillisOfSecond(0);\n1108: assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n1109: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeParser() {\nif (dtp == null) {\nreturn dtp;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "public void setOffset(int offset) {\niSavedState = null;\niOffset = offset;\niZone = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\niSavedFields = savedFields = (SavedField[])iSavedFields.clone();\niSavedFieldsShared = false;\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i=0; i<count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] parsers = iParsers;\nint length = parsers.length;\nfinal Object originalState = bucket.saveState();\nboolean isOptional = false;\nint bestValidPos = position;\nObject bestValidState = null;\nint bestInvalidPos = position;\nfor (int i=0; i<length; i++) {\nDateTimeParser parser = parsers[i];\nif (parser == null) {\nif (bestValidPos <= position) {\nisOptional = true;\nbreak;\nint parsePos = parser.parseInto(bucket, text, position);\nif (parsePos >= position) {\nif (parsePos > bestValidPos) {\nif (parsePos >= text.length() ||\nreturn parsePos;\nbestValidPos = parsePos;\nbestValidState = bucket.saveState();\nif (parsePos < 0) {\nparsePos = ~parsePos;\nif (parsePos > bestInvalidPos) {\nbestInvalidPos = parsePos;\nbucket.restoreState(originalState);\nif (bestValidPos > position || (bestValidPos == position && isOptional)) {\nif (bestValidState != null) {\nbucket.restoreState(bestValidState);\nreturn bestValidPos;\nreturn ~bestInvalidPos;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean restoreState(Object savedState) {\nif (savedState instanceof SavedState) {\nif (((SavedState) savedState).restoreState(this)) {\niSavedState = savedState;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "public void saveField(DateTimeField field, int value) {\nsaveField(new SavedField(field, value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillisOfSecond(int millis) {\nreturn withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\nif (!unit.isPrecise()) {\niUnitMillis = unit.getUnitMillis();\nif (iUnitMillis < 1) {\niUnitField = unit;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer(TestDateTimeZoneCutover.java:1108)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter",
                            "test_body": "1125: public void testWithMillisOfSecondInDstChange_NewYork_winter() {\n1126: DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n1127: assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());\n1128: DateTime test = dateTime.withMillisOfSecond(0);\n1129: assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());\n1130: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeParser() {\nif (dtp == null) {\nreturn dtp;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "public void setOffset(int offset) {\niSavedState = null;\niOffset = offset;\niZone = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\niSavedFields = savedFields = (SavedField[])iSavedFields.clone();\niSavedFieldsShared = false;\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i=0; i<count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] parsers = iParsers;\nint length = parsers.length;\nfinal Object originalState = bucket.saveState();\nboolean isOptional = false;\nint bestValidPos = position;\nObject bestValidState = null;\nint bestInvalidPos = position;\nfor (int i=0; i<length; i++) {\nDateTimeParser parser = parsers[i];\nif (parser == null) {\nif (bestValidPos <= position) {\nisOptional = true;\nbreak;\nint parsePos = parser.parseInto(bucket, text, position);\nif (parsePos >= position) {\nif (parsePos > bestValidPos) {\nif (parsePos >= text.length() ||\nreturn parsePos;\nbestValidPos = parsePos;\nbestValidState = bucket.saveState();\nif (parsePos < 0) {\nparsePos = ~parsePos;\nif (parsePos > bestInvalidPos) {\nbestInvalidPos = parsePos;\nbucket.restoreState(originalState);\nif (bestValidPos > position || (bestValidPos == position && isOptional)) {\nif (bestValidState != null) {\nbucket.restoreState(bestValidState);\nreturn bestValidPos;\nreturn ~bestInvalidPos;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean restoreState(Object savedState) {\nif (savedState instanceof SavedState) {\nif (((SavedState) savedState).restoreState(this)) {\niSavedState = savedState;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "public void saveField(DateTimeField field, int value) {\nsaveField(new SavedField(field, value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillisOfSecond(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillisOfSecond(int millis) {\nreturn withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\nif (!unit.isPrecise()) {\niUnitMillis = unit.getUnitMillis();\nif (iUnitMillis < 1) {\niUnitField = unit;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter(TestDateTimeZoneCutover.java:1129)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange",
                            "test_body": "1090: public void testWithMinuteOfHourInDstChange() {\n1091: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1092: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1093: DateTime test = dateTime.withMinuteOfHour(0);\n1094: assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());\n1095: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeParser() {\nif (dtp == null) {\nreturn dtp;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "public void setOffset(int offset) {\niSavedState = null;\niOffset = offset;\niZone = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\niSavedFields = savedFields = (SavedField[])iSavedFields.clone();\niSavedFieldsShared = false;\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i=0; i<count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] parsers = iParsers;\nint length = parsers.length;\nfinal Object originalState = bucket.saveState();\nboolean isOptional = false;\nint bestValidPos = position;\nObject bestValidState = null;\nint bestInvalidPos = position;\nfor (int i=0; i<length; i++) {\nDateTimeParser parser = parsers[i];\nif (parser == null) {\nif (bestValidPos <= position) {\nisOptional = true;\nbreak;\nint parsePos = parser.parseInto(bucket, text, position);\nif (parsePos >= position) {\nif (parsePos > bestValidPos) {\nif (parsePos >= text.length() ||\nreturn parsePos;\nbestValidPos = parsePos;\nbestValidState = bucket.saveState();\nif (parsePos < 0) {\nparsePos = ~parsePos;\nif (parsePos > bestInvalidPos) {\nbestInvalidPos = parsePos;\nbucket.restoreState(originalState);\nif (bestValidPos > position || (bestValidPos == position && isOptional)) {\nif (bestValidState != null) {\nbucket.restoreState(bestValidState);\nreturn bestValidPos;\nreturn ~bestInvalidPos;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean restoreState(Object savedState) {\nif (savedState instanceof SavedState) {\nif (((SavedState) savedState).restoreState(this)) {\niSavedState = savedState;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "public void saveField(DateTimeField field, int value) {\nsaveField(new SavedField(field, value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\nif (!unit.isPrecise()) {\niUnitMillis = unit.getUnitMillis();\nif (iUnitMillis < 1) {\niUnitField = unit;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMinuteOfHour(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMinuteOfHour(int minute) {\nreturn withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange(TestDateTimeZoneCutover.java:1094)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange",
                            "test_body": "1083: public void testWithHourOfDayInDstChange() {\n1084: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1085: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1086: DateTime test = dateTime.withHourOfDay(2);\n1087: assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n1088: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeParser() {\nif (dtp == null) {\nreturn dtp;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:getSaveMillis()I",
                                    "method_body": "public int getSaveMillis() {\nreturn iSaveMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfWeek(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfWeek(Chronology chrono, long instant) {\nint dayOfWeek = chrono.dayOfWeek().get(instant);\nint daysToAdd = iDayOfWeek - dayOfWeek;\nif (daysToAdd != 0) {\nif (iAdvance) {\nif (daysToAdd < 0) {\nif (daysToAdd > 0) {\ndaysToAdd -= 7;\ninstant = chrono.dayOfWeek().add(instant, daysToAdd);\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "public void setOffset(int offset) {\niSavedState = null;\niOffset = offset;\niZone = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:nextTransition(J)J",
                                    "method_body": "public long nextTransition(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\nif (instant > 0 && start < 0) {\n}\nend = endRecurrence.next\nif (instant > 0 && end < 0) {\n}\nreturn (start > end) ? end : start;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\niSavedFields = savedFields = (SavedField[])iSavedFields.clone();\niSavedFieldsShared = false;\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i=0; i<count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] parsers = iParsers;\nint length = parsers.length;\nfinal Object originalState = bucket.saveState();\nboolean isOptional = false;\nint bestValidPos = position;\nObject bestValidState = null;\nint bestInvalidPos = position;\nfor (int i=0; i<length; i++) {\nDateTimeParser parser = parsers[i];\nif (parser == null) {\nif (bestValidPos <= position) {\nisOptional = true;\nbreak;\nint parsePos = parser.parseInto(bucket, text, position);\nif (parsePos >= position) {\nif (parsePos > bestValidPos) {\nif (parsePos >= text.length() ||\nreturn parsePos;\nbestValidPos = parsePos;\nbestValidState = bucket.saveState();\nif (parsePos < 0) {\nparsePos = ~parsePos;\nif (parsePos > bestInvalidPos) {\nbestInvalidPos = parsePos;\nbucket.restoreState(originalState);\nif (bestValidPos > position || (bestValidPos == position && isOptional)) {\nif (bestValidState != null) {\nbucket.restoreState(bestValidState);\nreturn bestValidPos;\nreturn ~bestInvalidPos;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfWeek(J)I",
                                    "method_body": "int getDayOfWeek(long instant) {\nif (instant >= 0) {\ndaysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;\nreturn 1 + (int) ((daysSince19700101 + 3) % 7);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean restoreState(Object savedState) {\nif (savedState instanceof SavedState) {\nif (((SavedState) savedState).restoreState(this)) {\niSavedState = savedState;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "public void saveField(DateTimeField field, int value) {\nsaveField(new SavedField(field, value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withHourOfDay(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withHourOfDay(int hour) {\nreturn withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(JJ)J",
                                    "method_body": "public static long safeAdd(long val1, long val2) {\nlong sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:createInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info createInfo(long millis) {\nlong periodStart = millis & (0xffffffffL << 32);\nInfo info = new Info(iZone, periodStart);\nlong end = periodStart | 0xffffffffL;\nInfo chain = info;\nlong next = iZone.nextTransition(periodStart);\nif (next == periodStart || next > end) {\nbreak;\nperiodStart = next;\nchain = (chain.iNextInfo = new Info(iZone, periodStart));\n}\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int months) {\nif (months == 0) {\nlong timePart = iChronology.getMillisOfDay(instant);\nint thisYear = iChronology.getYear(instant);\nint thisMonth = iChronology.getMonthOfYear(instant, thisYear);\nint monthToUse = thisMonth - 1 + months;\nif (monthToUse >= 0) {\nyearToUse = thisYear + (monthToUse / iMax);\nmonthToUse = (monthToUse % iMax) + 1;\nint dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);\nint maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);\nif (dayToUse > maxDay) {\nlong datePart =\nreturn datePart + timePart;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstanceUTC()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstanceUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn FieldUtils.safeAdd(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\nif (!unit.isPrecise()) {\niUnitMillis = unit.getUnitMillis();\nif (iUnitMillis < 1) {\niUnitField = unit;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nif (iMode == 'w') {\noffset = standardOffset + saveMillis;\n} else if (iMode == 's') {\noffset = 0;\ninstant += offset;\nChronology chrono = ISOChronology.getInstanceUTC();\nlong next = chrono.monthOfYear().set(instant, iMonthOfYear);\nnext = chrono.millisOfDay().set(next, 0);\nnext = chrono.millisOfDay().add(next, iMillisOfDay);\nnext = setDayOfMonthNext(chrono, next);\nif (iDayOfWeek == 0) {\nnext = setDayOfWeek(chrono, next);\nif (next <= instant) {\nnext = chrono.year().add(next, 1);\nnext = chrono.monthOfYear().set(next, iMonthOfYear);\nnext = setDayOfMonthNext(chrono, next);\nnext = setDayOfWeek(chrono, next);\nreturn next - offset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$DSTZone:findMatchingRecurrence(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;",
                                    "method_body": "private Recurrence findMatchingRecurrence(long instant) {\nint standardOffset = iStandardOffset;\nRecurrence startRecurrence = iStartRecurrence;\nRecurrence endRecurrence = iEndRecurrence;\nstart = startRecurrence.next\n}\nend = endRecurrence.next\n}\nreturn (start > end) ? startRecurrence : endRecurrence;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nlong addition = value * iUnitMillis;  // safe\nreturn FieldUtils.safeAdd(instant, addition);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int value) {\nreturn getDurationField().add(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nlong[] transitions = iTransitions;\nint i = Arrays.binarySearch(transitions, instant);\nif (i >= 0) {\nreturn iWallOffsets[i];\ni = ~i;\nif (i < transitions.length) {\nif (i > 0) {\nreturn iWallOffsets[i - 1];\nif (iTailZone == null) {\nreturn iTailZone.getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:<init>(Lorg/joda/time/DateTimeZone;J)V",
                                    "method_body": "Info(DateTimeZone zone, long periodStart) {\niPeriodStart = periodStart;\niZoneRef = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfWeek(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$OfYear:setDayOfMonthNext(Lorg/joda/time/Chronology;J)J",
                                    "method_body": "private long setDayOfMonthNext(Chronology chrono, long next) {\nnext = setDayOfMonth(chrono, next);\n}\nreturn next;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.DateTimeZoneBuilder$Recurrence:next(JII)J",
                                    "method_body": "public long next(long instant, int standardOffset, int saveMillis) {\nreturn iOfYear.next(instant, standardOffset, saveMillis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:add(JI)J",
                                    "method_body": "public long add(long instant, int years) {\nif (years == 0) {\nint thisYear = get(instant);\nint newYear = FieldUtils.safeAdd(thisYear, years);\nreturn set(instant, newYear);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange(TestDateTimeZoneCutover.java:1087)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange",
                            "test_body": "1097: public void testWithSecondOfMinuteInDstChange() {\n1098: DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n1099: assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n1100: DateTime test = dateTime.withSecondOfMinute(0);\n1101: assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n1102: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:<init>(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "SavedField(DateTimeField field, int value) {\niField = field;\niValue = value;\niText = null;\niLocale = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
                                    "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTimeParser()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTimeParser() {\nif (dtp == null) {\nreturn dtp;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:getFractionData(JLorg/joda/time/DateTimeField;)[J",
                                    "method_body": "private long[] getFractionData(long fraction, DateTimeField field) {\nlong rangeMillis = field.getDurationField().getUnitMillis();\nint maxDigits = iMaxDigits;\nswitch (maxDigits) {\ncase 9:  scalar = 1000000000L; break;\nif (((rangeMillis * scalar) / scalar) == rangeMillis) {\nbreak;\nreturn new long[] {fraction * scalar / rangeMillis, maxDigits};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeField field = iFieldType.getField(bucket.getChronology());\nint limit = Math.min(iMaxDigits, text.length() - position);\nlong value = 0;\nlong n = field.getDurationField().getUnitMillis() * 10;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (c < '0' || c > '9') {\nlength++;\nlong nn = n / 10;\nvalue += (c - '0') * nn;\nn = nn;\n}\nvalue /= 10;\nif (length == 0) {\nif (value > Integer.MAX_VALUE) {\nDateTimeField parseField = new PreciseDateTimeField(\nbucket.saveField(parseField, (int) value);\nreturn position + length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:compareReverse(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I",
                                    "method_body": "static int compareReverse(DurationField a, DurationField b) {\nif (a == null || !a.isSupported()) {\nif (b == null || !b.isSupported()) {\nreturn -1;\nif (b == null || !b.isSupported()) {\nreturn -a.compareTo(b);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:restoreState(Lorg/joda/time/format/DateTimeParserBucket;)Z",
                                    "method_body": "boolean restoreState(DateTimeParserBucket enclosing) {\nif (enclosing != DateTimeParserBucket.this) {\nenclosing.iZone = this.iZone;\nenclosing.iOffset = this.iOffset;\nenclosing.iSavedFields = this.iSavedFields;\nif (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {\nenclosing.iSavedFieldsShared = true;\nenclosing.iSavedFieldsCount = this.iSavedFieldsCount;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn getInfo(instant).getOffset(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (iZeroOffsetParseText.length() == 0) {\nif (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(negative ? -offset : offset);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setOffset(I)V",
                                    "method_body": "public void setOffset(int offset) {\niSavedState = null;\niOffset = offset;\niZone = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nint year = iChronology.getYear(instant);\nint month = iChronology.getMonthOfYear(instant, year);\nreturn iChronology.getYearMonthMillis(year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:<init>(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V",
                                    "method_body": "public DateTimeParserBucket(long instantLocal, Chronology chrono,\nsuper();\nchrono = DateTimeUtils.getChronology(chrono);\niMillis = instantLocal;\niChrono = chrono.withUTC();\niLocale = (locale == null ? Locale.getDefault() : locale);\nsetZone(chrono.getZone());\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfYear(JI)I",
                                    "method_body": "int getDayOfYear(long instant, int year) {\nlong yearStart = getYearMillis(year);\nreturn (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:computeMillis(ZLjava/lang/String;)J",
                                    "method_body": "public long computeMillis(boolean resetFields, String text) {\nSavedField[] savedFields = iSavedFields;\nint count = iSavedFieldsCount;\nif (iSavedFieldsShared) {\niSavedFields = savedFields = (SavedField[])iSavedFields.clone();\niSavedFieldsShared = false;\nsort(savedFields, count);\nif (count > 0) {\nDurationField months = DurationFieldType.months().getField(iChrono);\nDurationField days = DurationFieldType.days().getField(iChrono);\nDurationField first = savedFields[0].iField.getDurationField();\nif (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\nlong millis = iMillis;\nfor (int i=0; i<count; i++) {\nmillis = savedFields[i].set(millis, resetFields);\n}\nif (iZone == null) {\nmillis -= iOffset;\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$MatchingParser:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] parsers = iParsers;\nint length = parsers.length;\nfinal Object originalState = bucket.saveState();\nboolean isOptional = false;\nint bestValidPos = position;\nObject bestValidState = null;\nint bestInvalidPos = position;\nfor (int i=0; i<length; i++) {\nDateTimeParser parser = parsers[i];\nif (parser == null) {\nif (bestValidPos <= position) {\nisOptional = true;\nbreak;\nint parsePos = parser.parseInto(bucket, text, position);\nif (parsePos >= position) {\nif (parsePos > bestValidPos) {\nif (parsePos >= text.length() ||\nreturn parsePos;\nbestValidPos = parsePos;\nbestValidState = bucket.saveState();\nif (parsePos < 0) {\nparsePos = ~parsePos;\nif (parsePos > bestInvalidPos) {\nbestInvalidPos = parsePos;\nbucket.restoreState(originalState);\nif (bestValidPos > position || (bestValidPos == position && isOptional)) {\nif (bestValidState != null) {\nbucket.restoreState(bestValidState);\nreturn bestValidPos;\nreturn ~bestInvalidPos;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:restoreState(Ljava/lang/Object;)Z",
                                    "method_body": "public boolean restoreState(Object savedState) {\nif (savedState instanceof SavedState) {\nif (((SavedState) savedState).restoreState(this)) {\niSavedState = savedState;\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:months()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType months() {\nreturn MONTHS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeField;I)V",
                                    "method_body": "public void saveField(DateTimeField field, int value) {\nsaveField(new SavedField(field, value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:set(JZ)J",
                                    "method_body": "long set(long millis, boolean reset) {\nif (iText == null) {\nmillis = iField.set(millis, iValue);\nif (reset) {\nmillis = iField.roundFloor(millis);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:setZone(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public void setZone(DateTimeZone zone) {\niSavedState = null;\niZone = zone == DateTimeZone.UTC ? null : zone;\niOffset = 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone$Info:getOffset(J)I",
                                    "method_body": "public int getOffset(long millis) {\nif (iNextInfo == null || millis < iNextInfo.iPeriodStart) {\nif (iOffset == Integer.MIN_VALUE) {\niOffset = iZoneRef.getOffset(iPeriodStart);\nreturn iOffset;\nreturn iNextInfo.getOffset(millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedState:<init>(Lorg/joda/time/format/DateTimeParserBucket;)V",
                                    "method_body": "SavedState() {\nthis.iZone = DateTimeParserBucket.this.iZone;\nthis.iOffset = DateTimeParserBucket.this.iOffset;\nthis.iSavedFields = DateTimeParserBucket.this.iSavedFields;\nthis.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType$StandardDurationFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.months();\nreturn chronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(Object instant, DateTimeZone zone) {\nsuper();\nInstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\nChronology chrono = checkChronology(converter.getChronology(instant, zone));\niChronology = chrono;\niMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nDateTimeParser[] elements = iParsers;\nif (elements == null) {\nint len = elements.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = elements[i].parseInto(bucket, text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn iZone.hashCode();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMillisOfDay(J)I",
                                    "method_body": "int getMillisOfDay(long instant) {\nif (instant >= 0) {\nreturn (int) (instant % DateTimeConstants.MILLIS_PER_DAY);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:days()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType days() {\nreturn DAYS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:compareTo(Lorg/joda/time/DurationField;)I",
                                    "method_body": "public int compareTo(DurationField otherField) {\nlong otherMillis = otherField.getUnitMillis();\nlong thisMillis = getUnitMillis();\nif (thisMillis == otherMillis) {\nif (thisMillis < otherMillis) {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (text.regionMatches(true, position, iValue, 0, iValue.length())) {\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JI)I",
                                    "method_body": "int getDayOfMonth(long millis, int year) {\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int month) {\nFieldUtils.verifyValueBounds(this, month, MIN, iMax);\nint thisYear = iChronology.getYear(instant);\nint thisDom = iChronology.getDayOfMonth(instant, thisYear);\nint maxDom = iChronology.getDaysInYearMonth(thisYear, month);\nif (thisDom > maxDom) {\nreturn iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
                                    "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nif (instant >= 0) {\nreturn instant - instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDurationDateTimeField(DateTimeFieldType type, DurationField unit) {\nsuper(type);\nif (!unit.isPrecise()) {\niUnitMillis = unit.getUnitMillis();\nif (iUnitMillis < 1) {\niUnitField = unit;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(),\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:sort([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V",
                                    "method_body": "private static void sort(SavedField[] array, int high) {\nif (high > 10) {\nfor (int i=0; i<high; i++) {\nfor (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
                                    "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstantConverter(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;",
                                    "method_body": "public InstantConverter getInstantConverter(Object object) {\nInstantConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(Object instant, DateTimeZone zone) {\nsuper(instant, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
                                    "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveState()Ljava/lang/Object;",
                                    "method_body": "public Object saveState() {\nif (iSavedState == null) {\niSavedState = new SavedState();\nreturn iSavedState;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthMillis(II)J",
                                    "method_body": "long getYearMonthMillis(int year, int month) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.StringConverter:getInstantMillis(Ljava/lang/Object;Lorg/joda/time/Chronology;)J",
                                    "method_body": "public long getInstantMillis(Object object, Chronology chrono) {\nString str = (String) object;\nDateTimeFormatter p = ISODateTimeFormat.dateTimeParser();\nreturn p.withChronology(chrono).parseMillis(str);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "public PreciseDateTimeField(DateTimeFieldType type,\nsuper(type, unit);\nif (!range.isPrecise()) {\nlong rangeMillis = range.getUnitMillis();\niRange = (int)(rangeMillis / getUnitMillis());\nif (iRange < 2) {\niRangeField = range;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.AbstractConverter:getChronology(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology(Object object, DateTimeZone zone) {\nreturn ISOChronology.getInstance(zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:roundFloor(J)J",
                                    "method_body": "public long roundFloor(long instant) {\nreturn iChronology.getYearMillis(get(instant));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:setYear(JI)J",
                                    "method_body": "long setYear(long instant, int year) {\nint thisYear = getYear(instant);\nint dayOfYear = getDayOfYear(instant, thisYear);\nint millisOfDay = getMillisOfDay(instant);\nif (dayOfYear > (31 + 28)) { // after Feb 28\nif (isLeapYear(thisYear)) {\nif (!isLeapYear(year)) {\ndayOfYear--;\nif (isLeapYear(year)) {\ninstant = getYearMonthDayMillis(year, 1, dayOfYear);\ninstant += millisOfDay;\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.CachedDateTimeZone:getInfo(J)Lorg/joda/time/tz/CachedDateTimeZone$Info;",
                                    "method_body": "private Info getInfo(long millis) {\nint period = (int)(millis >> 32);\nInfo[] cache = iInfoCache;\nint index = period & cInfoCacheMask;\nInfo info = cache[index];\nif (info == null || (int)((info.iPeriodStart >> 32)) != period) {\ninfo = createInfo(millis);\ncache[index] = info;\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:parseTwoDigits(Ljava/lang/String;I)I",
                                    "method_body": "static int parseTwoDigits(String text, int position) {\nint value = text.charAt(position) - '0';\nreturn ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)V",
                                    "method_body": "private void saveField(SavedField field) {\nSavedField[] savedFields = iSavedFields;\nint savedFieldsCount = iSavedFieldsCount;\nif (savedFieldsCount == savedFields.length || iSavedFieldsShared) {\nSavedField[] newArray = new SavedField\nSystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);\niSavedFields = savedFields = newArray;\niSavedFieldsShared = false;\niSavedState = null;\nsavedFields[savedFieldsCount] = field;\niSavedFieldsCount = savedFieldsCount + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;Ljava/io/Writer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\nDateTimeField field = iFieldType.getField(chrono);\nint minDigits = iMinDigits;\nfraction = field.remainder(instant);\n}\nif (fraction == 0) {\nif (buf != null) {\nwhile (--minDigits >= 0) {\nbuf.append('0');\nreturn;\nlong[] fractionData = getFractionData(fraction, field);\nlong scaled = fractionData[0];\nint maxDigits = (int) fractionData[1];\nif ((scaled & 0x7fffffff) == scaled) {\nstr = Integer.toString((int) scaled);\nint length = str.length();\nint digits = maxDigits;\nwhile (length < digits) {\nif (minDigits < digits) {\nwhile (minDigits < digits) {\nif (length <= 1 || str.charAt(length - 1) != '0') {\ndigits--;\nlength--;\nif (length < str.length()) {\nif (buf != null) {\nfor (int i=0; i<length; i++) {\nbuf.append(str.charAt(i));\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket$SavedField:compareTo(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I",
                                    "method_body": "public int compareTo(SavedField obj) {\nDateTimeField other = obj.iField;\nint result = compareReverse\nif (result != 0) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getDaysInMonthMaxForSet(JI)I",
                                    "method_body": "int getDaysInMonthMaxForSet(long instant, int value) {\nreturn (value > 28 ? getDaysInMonthMax(instant) : 28);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withSecondOfMinute(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withSecondOfMinute(int second) {\nreturn withMillis(getChronology().secondOfMinute().set(getMillis(), second));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeParserBucket:saveField(Lorg/joda/time/DateTimeFieldType;I)V",
                                    "method_body": "public void saveField(DateTimeFieldType fieldType, int value) {\nsaveField(new SavedField(fieldType.getField(iChrono), value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getMaximumValueForSet(JI)I",
                                    "method_body": "protected int getMaximumValueForSet(long instant, int value) {\nreturn iChronology.getDaysInMonthMaxForSet(instant, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = Math.min(iMaxParsedDigits, text.length() - position);\nboolean negative = false;\nint length = 0;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && iSigned) {\nif (c < '0' || c > '9') {\nlength++;\n}\nif (length == 0) {\nif (length >= 9) {\nint i = position;\nif (negative) {\nvalue = text.charAt(i++) - '0';\n}\nposition += length;\nwhile (i < position) {\nvalue = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';\nif (negative) {\nbucket.saveField(iFieldType, value);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int year) {\nFieldUtils.verifyValueBounds\nreturn iChronology.setYear(instant, year);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDaysInMonthMax(J)I",
                                    "method_body": "int getDaysInMonthMax(long instant) {\nint thisYear = getYear(instant);\nint thisMonth = getMonthOfYear(instant, thisYear);\nreturn getDaysInYearMonth(thisYear, thisMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
                                    "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nif (position >= text.length()) {\nchar a = text.charAt(position);\nchar b = iValue;\nif (a != b) {\na = Character.toUpperCase(a);\nb = Character.toUpperCase(b);\nif (a != b) {\na = Character.toLowerCase(a);\nb = Character.toLowerCase(b);\nif (a != b) {\nreturn ~position;\nreturn position + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isPrecise()Z",
                                    "method_body": "public final boolean isPrecise() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange(TestDateTimeZoneCutover.java:1101)"
                        },
                        {
                            "test_name": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone",
                            "test_body": "1063: public void testWithMinuteOfHourInDstChange_mockZone() {\n1064: DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n1065: assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\n1066: DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n1067: DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n1068: assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\n1069: DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n1070: assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n1071: 1072: DateTime testPre1 = pre.withMinuteOfHour(30);\n1073: assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\n1074: DateTime testPre2 = pre.withMinuteOfHour(50);\n1075: assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());\n1076: 1077: DateTime testPost1 = post.withMinuteOfHour(30);\n1078: assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());  // retain offset\n1079: DateTime testPost2 = post.withMinuteOfHour(10);\n1080: assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());\n1081: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfDay() {\nreturn iHourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nreturn iField.get(localInstant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfDay() {\nreturn iMinuteOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYear(J)I",
                                    "method_body": "int getYear(long instant) {\nlong unitMillis = getAverageMillisPerYearDividedByTwo();\nlong i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();\nif (i2 < 0) {\nint year = (int) (i2 / unitMillis);\nlong yearStart = getYearMillis(year);\nlong diff = instant - yearStart;\nif (diff < 0) {\n} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {\nreturn year;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nint offsetLocal = getOffset(instantLocal);\nint offsetAdjusted = getOffset(instantLocal - offsetLocal);\nif (offsetLocal != offsetAdjusted) {\nif ((offsetLocal - offsetAdjusted) < 0) {\nlong nextLocal = nextTransition(instantLocal - offsetLocal);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\nif (nextLocal != nextAdjusted) {\nreturn offsetAdjusted;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
                                    "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffsetFromLocal(J)I",
                                    "method_body": "public int getOffsetFromLocal(long instantLocal) {\nreturn iWallOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:<init>(Lorg/joda/time/DurationFieldType;)V",
                                    "method_body": "protected BaseDurationField(DurationFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:year()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField year() {\nreturn iYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(J)I",
                                    "method_body": "abstract int getMonthOfYear(long millis, int year);\nint year = getYear(millis);\nint month = getMonthOfYear(millis, year);\nreturn getDayOfMonth(millis, year, month);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfDay() {\nreturn iSecondOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nif (instant >= 0) {\nreturn (int) ((instant / getUnitMillis()) % iRange);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:<init>()V",
                                    "method_body": "protected AbstractInstant() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearInfo(I)Lorg/joda/time/chrono/BasicChronology$YearInfo;",
                                    "method_body": "abstract long getAverageMillisPerYear();\nYearInfo info = iYearInfoCache[year & CACHE_MASK];\nif (info == null || info.iYear != year) {\nreturn info;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:hashCode()I",
                                    "method_body": "public int hashCode() {\nreturn getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDayOfMonth(JII)I",
                                    "method_body": "int getDayOfMonth(long millis, int year, int month) {\nlong dateMillis = getYearMillis(year);\ndateMillis += getTotalMillisByYearMonth(year, month);\nreturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getMinimumValue()I",
                                    "method_body": "public int getMinimumValue() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getID()Ljava/lang/String;",
                                    "method_body": "public final String getID() {\nreturn iID;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ImpreciseDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:hourOfDay()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType hourOfDay() {\nreturn HOUR_OF_DAY_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getAverageMillisPerYearDividedByTwo()J",
                                    "method_body": "long getAverageMillisPerYearDividedByTwo() {\nreturn MILLIS_PER_YEAR / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:<init>(Lorg/joda/time/Chronology;Ljava/lang/Object;)V",
                                    "method_body": "protected AssembledChronology(Chronology base, Object param) {\niBase = base;\niParam = param;\nsetFields();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nint offset = 0;\nint hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\nif (hoursInMinutes < 0) {\nminutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:monthOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField monthOfYear() {\nreturn iMonthOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField eras() {\nreturn iEras;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:eras()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField eras() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:estimatePrintedLength()I",
                                    "method_body": "public int estimatePrintedLength() {\nreturn iPrintedLengthEstimate;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:remainder(J)J",
                                    "method_body": "public long remainder(long instant) {\nif (instant >= 0) {\nreturn instant % iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iUnitField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DateTimeField;)Z",
                                    "method_body": "private static boolean isSupported(DateTimeField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getChronology()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology getChronology() {\nreturn iChronology;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weeks()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weeks() {\nreturn iWeeks;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nif (getBase().getZone() == DateTimeZone.UTC) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:secondOfMinute()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType secondOfMinute() {\nreturn SECOND_OF_MINUTE_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMinYear()I",
                                    "method_body": "int getMinYear() {\nreturn MIN_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfYear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfYear() {\nreturn iDayOfYear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfCentury() {\nreturn iYearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hours()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField hours() {\nreturn iHours;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdays()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField halfdays() {\nreturn iHalfdays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.MillisDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getType() {\nreturn DurationFieldType.millis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:<init>(Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "ZonedDurationField(DurationField field, DateTimeZone zone) {\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niTimeField = useTimeArithmetic(field);\niZone = zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:eras()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType eras() {\nreturn ERAS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong scalar = iScalar;\nint hash = (int) (scalar ^ (scalar >>> 32));\nhash += getType().hashCode();\nhash += getWrappedField().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimeField field = iFieldType.getField(chrono);\nFormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:isSupported()Z",
                                    "method_body": "public boolean isSupported() {\nreturn false;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISODateTimeFormat:dateTime()Lorg/joda/time/format/DateTimeFormatter;",
                                    "method_body": "public static DateTimeFormatter dateTime() {\nif (dt == null) {\nreturn dt;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuries()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField centuries() {\nreturn iCenturies;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\nsynchronized (cCache) {\nchrono = cCache.get(zone);\nif (chrono == null) {\nchrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));\ncCache.put(zone, chrono);\n}\ncFastCache[index] = chrono;\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertLocalToUTC(JZ)J",
                                    "method_body": "public long convertLocalToUTC(long instantLocal, boolean strict) {\n// determine if we are in the DST gap\nif (nextLocal == (instantLocal - offsetLocal)) {\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nlong localInstant = iZone.convertUTCToLocal(instant);\nlocalInstant = iField.set(localInstant, value);\nlong result = iZone.convertLocalToUTC(localInstant, false);\nif (get(result) != value) {\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:requirePrinter()Lorg/joda/time/format/DateTimePrinter;",
                                    "method_body": "private DateTimePrinter requirePrinter() {\nDateTimePrinter printer = iPrinter;\nif (printer == null) {\nreturn printer;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ZeroIsMaxDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn getWrappedField().getLeapDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:monthOfYear()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType monthOfYear() {\nreturn MONTH_OF_YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:halfdayOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField halfdayOfDay() {\nreturn iHalfdayOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType$StandardDateTimeFieldType:getField(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "public DateTimeField getField(Chronology chronology) {\nchronology = DateTimeUtils.getChronology(chronology);\nswitch (iOrdinal) {\nreturn chronology.year();\nreturn chronology.dayOfYear();\nreturn chronology.monthOfYear();\nreturn chronology.dayOfMonth();\nreturn chronology.weekyear();\nreturn chronology.hourOfDay();\nreturn chronology.minuteOfHour();\nreturn chronology.secondOfDay();\nreturn chronology.secondOfMinute();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMonthOfYear(J)I",
                                    "method_body": "int getMonthOfYear(long millis) {\nreturn getMonthOfYear(millis, getYear(millis));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMillis(I)J",
                                    "method_body": "long getYearMillis(int year) {\nreturn getYearInfo(year).iFirstDayMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:<init>(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "private ZonedChronology(Chronology base, DateTimeZone zone) {\nsuper(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(long instant, Chronology chronology) {\nsuper();\niChronology = checkChronology(chronology);\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekyearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\nzone = new FixedDateTimeZone(id, null, offset, offset);\niFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\nreturn zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;)V",
                                    "method_body": "private void printTo(StringBuffer buf, long instant, Chronology chrono) {\nDateTimePrinter printer = requirePrinter();\nchrono = selectChronology(chrono);\nDateTimeZone zone = chrono.getZone();\nint offset = zone.getOffset(instant);\nlong adjustedInstant = instant + offset;\nif ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\nprinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:copyFieldsFrom(Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void copyFieldsFrom(Chronology chrono) {\nif (isSupported(f = chrono.millis())) {\nmillis = f;\nif (isSupported(f = chrono.seconds())) {\nseconds = f;\nif (isSupported(f = chrono.minutes())) {\nminutes = f;\nif (isSupported(f = chrono.hours())) {\nhours = f;\nif (isSupported(f = chrono.halfdays())) {\nhalfdays = f;\nif (isSupported(f = chrono.days())) {\ndays = f;\nif (isSupported(f = chrono.weeks())) {\nweeks = f;\nif (isSupported(f = chrono.weekyears())) {\nweekyears = f;\nif (isSupported(f = chrono.months())) {\nmonths = f;\nif (isSupported(f = chrono.years())) {\nyears = f;\nif (isSupported(f = chrono.centuries())) {\ncenturies = f;\nif (isSupported(f = chrono.eras())) {\nif (isSupported(f = chrono.millisOfSecond())) {\nmillisOfSecond = f;\nif (isSupported(f = chrono.millisOfDay())) {\nmillisOfDay = f;\nif (isSupported(f = chrono.secondOfMinute())) {\nsecondOfMinute = f;\nif (isSupported(f = chrono.secondOfDay())) {\nsecondOfDay = f;\nif (isSupported(f = chrono.minuteOfHour())) {\nminuteOfHour = f;\nif (isSupported(f = chrono.minuteOfDay())) {\nminuteOfDay = f;\nif (isSupported(f = chrono.hourOfDay())) {\nhourOfDay = f;\nif (isSupported(f = chrono.clockhourOfDay())) {\nclockhourOfDay = f;\nif (isSupported(f = chrono.hourOfHalfday())) {\nhourOfHalfday = f;\nif (isSupported(f = chrono.clockhourOfHalfday())) {\nclockhourOfHalfday = f;\nif (isSupported(f = chrono.halfdayOfDay())) {\nhalfdayOfDay = f;\nif (isSupported(f = chrono.dayOfWeek())) {\ndayOfWeek = f;\nif (isSupported(f = chrono.dayOfMonth())) {\ndayOfMonth = f;\nif (isSupported(f = chrono.dayOfYear())) {\ndayOfYear = f;\nif (isSupported(f = chrono.weekOfWeekyear())) {\nweekOfWeekyear = f;\nif (isSupported(f = chrono.weekyear())) {\nweekyear = f;\nif (isSupported(f = chrono.weekyearOfCentury())) {\nweekyearOfCentury = f;\nif (isSupported(f = chrono.monthOfYear())) {\nmonthOfYear = f;\nif (isSupported(f = chrono.year())) {\nyear = f;\nif (isSupported(f = chrono.yearOfEra())) {\nyearOfEra = f;\nif (isSupported(f = chrono.yearOfCentury())) {\nyearOfCentury = f;\nif (isSupported(f = chrono.centuryOfEra())) {\ncenturyOfEra = f;\nif (isSupported(f = chrono.era())) {\nera = f;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantMillis(Lorg/joda/time/ReadableInstant;)J",
                                    "method_body": "public static final long getInstantMillis(ReadableInstant instant) {\nif (instant == null) {\nreturn instant.getMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeField;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeField field,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iField.getDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getBase()Lorg/joda/time/Chronology;",
                                    "method_body": "protected abstract void assemble(Fields fields);\nreturn iBase;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.RemainderDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iRangeField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:seconds()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField seconds() {\nreturn iSeconds;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:dayOfMonth()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType dayOfMonth() {\nreturn DAY_OF_MONTH_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:<init>(Lorg/joda/time/DateTimeFieldType;)V",
                                    "method_body": "protected BaseDateTimeField(DateTimeFieldType type) {\nsuper();\nif (type == null) {\niType = type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateMidnightMillis(III)J",
                                    "method_body": "long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\nFieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));\nFieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));\nreturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJDayOfWeekDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weeks();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:getType()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public final DurationFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeAdd(II)I",
                                    "method_body": "public static int safeAdd(int val1, int val2) {\nint sum = val1 + val2;\nif ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\nreturn sum;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyear() {\nreturn iWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:yearOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField yearOfEra() {\nreturn iYearOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn 0;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfSecond()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfSecond() {\nreturn iMillisOfSecond;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:verifyValueBounds(Lorg/joda/time/DateTimeFieldType;III)V",
                                    "method_body": "public static void verifyValueBounds(DateTimeFieldType fieldType,\nif ((value < lowerBound) || (value > upperBound)) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;",
                                    "method_body": "private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nif (converted.containsKey(field)) {\nZonedDateTimeField zonedField =\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Composite:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nDateTimePrinter[] elements = iPrinters;\nif (elements == null) {\nif (locale == null) {\nlocale = Locale.getDefault();\nint len = elements.length;\nfor (int i = 0; i < len; i++) {\nelements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "protected Chronology checkChronology(Chronology chronology) {\nreturn DateTimeUtils.getChronology(chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
                                    "method_body": "protected BaseChronology() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getMonthOfYear(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:useTimeArithmetic(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "static boolean useTimeArithmetic(DurationField field) {\nreturn field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DividedDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn iDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:secondOfMinute()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField secondOfMinute() {\nreturn iSecondOfMinute;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(IIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public DateTime(\nsuper(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nif ((base = iBase) != null && (iBaseFlags & 5) == 5) {\nreturn base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minuteOfHour()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField minuteOfHour() {\nreturn iMinuteOfHour;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:printTo(Ljava/lang/StringBuffer;Lorg/joda/time/ReadableInstant;)V",
                                    "method_body": "public void printTo(StringBuffer buf, ReadableInstant instant) {\nlong millis = DateTimeUtils.getInstantMillis(instant);\nChronology chrono = DateTimeUtils.getInstantChronology(instant);\nprintTo(buf, millis, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millis()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField millis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:convertField(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;",
                                    "method_body": "private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {\nif (field == null || !field.isSupported()) {\nreturn field;\nif (converted.containsKey(field)) {\nreturn (DurationField)converted.get(field);\nZonedDurationField zonedField = new ZonedDurationField(field, getZone());\nconverted.put(field, zonedField);\nreturn zonedField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getMaxYear()I",
                                    "method_body": "int getMaxYear() {\nreturn MAX_YEAR;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:getApproxMillisAtEpochDividedByTwo()J",
                                    "method_body": "long getApproxMillisAtEpochDividedByTwo() {\nreturn (1970L * MILLIS_PER_YEAR) / 2;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
                                    "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:era()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField era() {\nreturn iEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:appendPaddedInteger(Ljava/lang/StringBuffer;II)V",
                                    "method_body": "public static void appendPaddedInteger(StringBuffer buf, int value, int size) {\nif (value < 0) {\nif (value < 10) {\nfor (; size > 1; size--) {\nbuf.append('0');\nbuf.append((char)(value + '0'));\n} else if (value < 100) {\nfor (; size > 2; size--) {\nint d = ((value + 1) * 13421772) >> 27;\nbuf.append((char) (d + '0'));\nbuf.append((char) (value - (d << 3) - (d << 1) + '0'));\n} else {\nif (value < 1000) {\n} else if (value < 10000) {\ndigits = 4;\nfor (; size > digits; size--) {\nbuf.append(Integer.toString(value));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nbuf.append(iValue);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:hourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField hourOfHalfday() {\nreturn iHourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractInstant:toString()Ljava/lang/String;",
                                    "method_body": "public String toString() {\nreturn ISODateTimeFormat.dateTime().print(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:<init>(Lorg/joda/time/Chronology;)V",
                                    "method_body": "private ISOChronology(Chronology base) {\nsuper(base, null);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:checkInstant(JLorg/joda/time/Chronology;)J",
                                    "method_body": "protected long checkInstant(long instant, Chronology chronology) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GregorianChronology:isLeapYear(I)Z",
                                    "method_body": "boolean isLeapYear(int year) {\nreturn ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:months()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField months() {\nreturn iMonths;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:getOffset(J)I",
                                    "method_body": "public int getOffset(long instant) {\nreturn iWallOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekOfWeekyear()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekOfWeekyear() {\nreturn iWeekOfWeekyear;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:<init>(JLorg/joda/time/Chronology;)V",
                                    "method_body": "public DateTime(long instant, Chronology chronology) {\nsuper(instant, chronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.ScaledDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn getWrappedField().getUnitMillis() * iScalar;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDurationField:getUnitMillis()J",
                                    "method_body": "public long getUnitMillis() {\nreturn iField.getUnitMillis();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDurationField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyearOfCentury()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField weekyearOfCentury() {\nreturn iWeekyearOfCentury;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
                                    "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/Chronology;)V",
                                    "method_body": "public BaseDateTime(\nsuper();\niChronology = checkChronology(chronology);\nlong instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\niMillis = checkInstant(instant, iChronology);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:<init>(IIIIIIILorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public BaseDateTime(\nthis(year, monthOfYear, dayOfMonth, hourOfDay,\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:assemble(Lorg/joda/time/chrono/AssembledChronology$Fields;)V",
                                    "method_body": "protected void assemble(Fields fields) {\nHashMap<Object, Object> converted = new HashMap<Object, Object>();\nfields.eras = convertField(fields.eras, converted);\nfields.centuries = convertField(fields.centuries, converted);\nfields.years = convertField(fields.years, converted);\nfields.months = convertField(fields.months, converted);\nfields.weekyears = convertField(fields.weekyears, converted);\nfields.weeks = convertField(fields.weeks, converted);\nfields.days = convertField(fields.days, converted);\nfields.halfdays = convertField(fields.halfdays, converted);\nfields.hours = convertField(fields.hours, converted);\nfields.minutes = convertField(fields.minutes, converted);\nfields.seconds = convertField(fields.seconds, converted);\nfields.millis = convertField(fields.millis, converted);\nfields.year = convertField(fields.year, converted);\nfields.yearOfEra = convertField(fields.yearOfEra, converted);\nfields.yearOfCentury = convertField(fields.yearOfCentury, converted);\nfields.centuryOfEra = convertField(fields.centuryOfEra, converted);\nfields.era = convertField(fields.era, converted);\nfields.dayOfWeek = convertField(fields.dayOfWeek, converted);\nfields.dayOfMonth = convertField(fields.dayOfMonth, converted);\nfields.dayOfYear = convertField(fields.dayOfYear, converted);\nfields.monthOfYear = convertField(fields.monthOfYear, converted);\nfields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\nfields.weekyear = convertField(fields.weekyear, converted);\nfields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\nfields.millisOfSecond = convertField(fields.millisOfSecond, converted);\nfields.millisOfDay = convertField(fields.millisOfDay, converted);\nfields.secondOfMinute = convertField(fields.secondOfMinute, converted);\nfields.secondOfDay = convertField(fields.secondOfDay, converted);\nfields.minuteOfHour = convertField(fields.minuteOfHour, converted);\nfields.minuteOfDay = convertField(fields.minuteOfDay, converted);\nfields.hourOfDay = convertField(fields.hourOfDay, converted);\nfields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);\nfields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);\nfields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);\nfields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:days()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField days() {\nreturn iDays;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:isSupported()Z",
                                    "method_body": "public final boolean isSupported() {\nreturn true;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology$Fields:isSupported(Lorg/joda/time/DurationField;)Z",
                                    "method_body": "private static boolean isSupported(DurationField field) {\nreturn field == null ? false : field.isSupported();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfWeek()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfWeek() {\nreturn iDayOfWeek;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfDay() {\nreturn iClockhourOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractDateTime:<init>()V",
                                    "method_body": "protected AbstractDateTime() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:getMaximumValue()I",
                                    "method_body": "public int getMaximumValue() {\nreturn iRange - 1;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getLeapDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getLeapDurationField() {\nreturn iChronology.days();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$Fraction:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nprintTo(buf, null, instant, chrono);\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getWrappedField()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:millisOfDay()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField millisOfDay() {\nreturn iMillisOfDay;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:printTo(Ljava/lang/StringBuffer;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V",
                                    "method_body": "public void printTo(\nif (displayZone == null) {\nif (displayOffset == 0 && iZeroOffsetPrintText != null) {\nif (displayOffset >= 0) {\nbuf.append('+');\nbuf.append('-');\ndisplayOffset = -displayOffset;\nint hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\nif (iMaxFields == 1) {\ndisplayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;\nif (displayOffset == 0 && iMinFields <= 1) {\nint minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;\nif (iShowSeparators) {\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\nif (iMaxFields == 2) {\ndisplayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (displayOffset == 0 && iMinFields <= 2) {\nreturn;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getDayOfMonth(instant);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:minutes()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField minutes() {\nreturn iMinutes;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:localToUTC(J)J",
                                    "method_body": "private long localToUTC(long instant) {\nDateTimeZone zone = getZone();\nint offset = zone.getOffsetFromLocal(instant);\ninstant -= offset;\nif (offset != zone.getOffset(instant)) {\nreturn instant;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:withUTC()Lorg/joda/time/Chronology;",
                                    "method_body": "public Chronology withUTC() {\nreturn INSTANCE_UTC;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMinuteOfHour(I)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMinuteOfHour(int minute) {\nreturn withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:millisOfSecond()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType millisOfSecond() {\nreturn MILLIS_OF_SECOND_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getInstantChronology(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getInstantChronology(ReadableInstant instant) {\nif (instant == null) {\nChronology chrono = instant.getChronology();\nif (chrono == null) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDurationField:getWrappedField()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField getWrappedField() {\nreturn iField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:centuryOfEra()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField centuryOfEra() {\nreturn iCenturyOfEra;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getInstance(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;",
                                    "method_body": "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {\nif (base == null) {\nbase = base.withUTC();\nif (base == null) {\nif (zone == null) {\nreturn new ZonedChronology(base, zone);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.FieldUtils:safeMultiply(II)I",
                                    "method_body": "public static int safeMultiply(int val1, int val2) {\nlong total = (long) val1 * (long) val2;\nif (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\nreturn (int) total;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getTotalMillisByYearMonth(II)J",
                                    "method_body": "long getTotalMillisByYearMonth(int year, int month) {\nif (isLeapYear(year)) {\nreturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\nreturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationDateTimeField:getUnitMillis()J",
                                    "method_body": "public final long getUnitMillis() {\nreturn iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getYearMonthDayMillis(III)J",
                                    "method_body": "long getYearMonthDayMillis(int year, int month, int dayOfMonth) {\nlong millis = getYearMillis(year);\nmillis += getTotalMillisByYearMonth(year, month);\nreturn millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDateTimeField:set(JI)J",
                                    "method_body": "public long set(long instant, int value) {\nFieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\nreturn instant + (value - get(instant)) * iUnitMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:convertUTCToLocal(J)J",
                                    "method_body": "public long convertUTCToLocal(long instantUTC) {\nint offset = getOffset(instantUTC);\nlong instantLocal = instantUTC + offset;\nif ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {\nreturn instantLocal;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:minuteOfHour()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType minuteOfHour() {\nreturn MINUTE_OF_HOUR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicGJChronology:getMonthOfYear(JI)I",
                                    "method_body": "int getMonthOfYear(long millis, int year) {\nint i = (int)((millis - getYearMillis(year)) >> 10);\nreturn\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeFieldType:year()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public static DateTimeFieldType year() {\nreturn YEAR_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BaseDateTime:getMillis()J",
                                    "method_body": "public long getMillis() {\nreturn iMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:years()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField years() {\nreturn iYears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth()I",
                                    "method_body": "int getMaxMonth() {\nreturn 12;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField:<init>(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V",
                                    "method_body": "ZonedDateTimeField(DateTimeField field,\nsuper(field.getType());\nif (!field.isSupported()) {\niField = field;\niZone = zone;\niDurationField = durationField;\niTimeField = useTimeArithmetic(durationField);\niRangeDurationField = rangeDurationField;\niLeapDurationField = leapDurationField;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicMonthOfYearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.years();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.BaseDateTimeField:getType()Lorg/joda/time/DateTimeFieldType;",
                                    "method_body": "public final DateTimeFieldType getType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.GJEraDateTimeField:getDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getDurationField() {\nreturn UnsupportedDurationField.getInstance(DurationFieldType.eras());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.PreciseDurationField:hashCode()I",
                                    "method_body": "public int hashCode() {\nlong millis = iUnitMillis;\nint hash = (int) (millis ^ (millis >>> 32));\nhash += getType().hashCode();\nreturn hash;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.UnsupportedDurationField:getInstance(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;",
                                    "method_body": "public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\nif (cCache == null) {\nfield = cCache.get(type);\nif (field == null) {\nreturn field;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.DateTimeFormatter:print(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;",
                                    "method_body": "public String print(ReadableInstant instant) {\nStringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());\nprintTo(buf, instant);\nreturn buf.toString();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTime:withMillis(J)Lorg/joda/time/DateTime;",
                                    "method_body": "public DateTime withMillis(long newMillis) {\nreturn (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:dayOfMonth()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField dayOfMonth() {\nreturn iDayOfMonth;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(\nif ((base = getBase()) != null) {\nFieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\nFieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\nFieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\nreturn getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicDayOfMonthDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.months();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:clockhourOfHalfday()Lorg/joda/time/DateTimeField;",
                                    "method_body": "public final DateTimeField clockhourOfHalfday() {\nreturn iClockhourOfHalfday;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:weekyears()Lorg/joda/time/DurationField;",
                                    "method_body": "public final DurationField weekyears() {\nreturn iWeekyears;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getDateTimeMillis(IIIIIII)J",
                                    "method_body": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\nreturn localToUTC(getBase().getDateTimeMillis\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicChronology:getMaxMonth(I)I",
                                    "method_body": "abstract long getYearDifference(long minuendInstant, long subtrahendInstant);\nreturn getMaxMonth();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.field.DecoratedDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iField.getRangeDurationField();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField:getRangeDurationField()Lorg/joda/time/DurationField;",
                                    "method_body": "public DurationField getRangeDurationField() {\nreturn iChronology.weekyears();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:setFields()V",
                                    "method_body": "private void setFields() {\nFields fields = new Fields();\nif (iBase != null) {\nfields.copyFieldsFrom(iBase);\nassemble(fields);\niMillis    = (f = fields.millis)    != null ? f : super.millis();\niSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\niMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\niHours     = (f = fields.hours)     != null ? f : super.hours();\niHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\niDays      = (f = fields.days)      != null ? f : super.days();\niWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\niWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\niMonths    = (f = fields.months)    != null ? f : super.months();\niYears     = (f = fields.years)     != null ? f : super.years();\niCenturies = (f = fields.centuries) != null ? f : super.centuries();\niEras      = (f = fields.eras)      != null ? f : super.eras();\niMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();\niMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();\niSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();\niSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();\niMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();\niMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();\niHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();\niClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();\niHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();\niClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();\niHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();\niDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();\niDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();\niDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\niWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\niWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\niWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\niMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\niYear               = (f = fields.year)               != null ? f : super.year();\niYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\niYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();\niCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();\niEra                = (f = fields.era)                != null ? f : super.era();\nif (iBase == null) {\nflags =\niBaseFlags = flags;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BasicYearDateTimeField:get(J)I",
                                    "method_body": "public int get(long instant) {\nreturn iChronology.getYear(instant);\n}"
                                }
                            ],
                            "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>\nat junit.framework.Assert.assertEquals(Assert.java:100)\nat junit.framework.Assert.assertEquals(Assert.java:107)\nat junit.framework.TestCase.assertEquals(TestCase.java:269)\nat org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone(TestDateTimeZoneCutover.java:1073)"
                        }
                    ]
                },
                {
                    "bug_id": 27,
                    "tests": [
                        {
                            "test_name": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455",
                            "test_body": "846: public void testBug2495455() {\n847: PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n848: .appendLiteral(\"P\")\n849: .appendYears()\n850: .appendSuffix(\"Y\")\n851: .appendMonths()\n852: .appendSuffix(\"M\")\n853: .appendWeeks()\n854: .appendSuffix(\"W\")\n855: .appendDays()\n856: .appendSuffix(\"D\")\n857: .appendSeparatorIfFieldsAfter(\"T\")\n858: .appendHours()\n859: .appendSuffix(\"H\")\n860: .appendMinutes()\n861: .appendSuffix(\"M\")\n862: .appendSecondsWithOptionalMillis()\n863: .appendSuffix(\"S\")\n864: .toFormatter();\n865: PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n866: .append(ISOPeriodFormat.standard())\n867: .toFormatter();\n868: pfmt1.parsePeriod(\"PT1003199059S\");\n869: pfmt2.parsePeriod(\"PT1003199059S\");\n870: }\n",
                            "covered_methods": [
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clearPrefix()V",
                                    "method_body": "private void clearPrefix() throws IllegalStateException {\nif (iPrefix != null) {\niPrefix = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "public int parseInto(\nboolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);\nif (position >= text.length()) {\nif (iPrefix != null) {\nint suffixPos = -1;\nif (iSuffix != null && !mustParse) {\nsuffixPos = iSuffix.scan(text, position);\nif (suffixPos >= 0) {\nmustParse = true;\nif (!mustParse) {\nreturn ~suffixPos;\nif (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {\nif (suffixPos > 0) {\nlimit = Math.min(iMaxParsedDigits, suffixPos - position);\nint length = 0;\nint fractPos = -1;\nboolean hasDigits = false;\nwhile (length < limit) {\nchar c = text.charAt(position + length);\nif (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {\nif (c >= '0' && c <= '9') {\nhasDigits = true;\nlength++;\n}\nif (!hasDigits) {\nif (suffixPos >= 0 && position + length != suffixPos) {\nif (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {\n} else if (fractPos < 0) {\nsetFieldValue(period, SECONDS, parseInt(text, position, length));\nsetFieldValue(period, MILLIS, 0);\nposition += length;\nif (position >= 0 && iSuffix != null) {\nposition = iSuffix.parse(text, position);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iTypes[index];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMinutes()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendMinutes() {\nappendField(MINUTES);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:size()I",
                                    "method_body": "public int size() {\nreturn iTypes.length;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getValue(I)I",
                                    "method_body": "public int getValue(int index) {\nreturn iValues[index];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:checkParser()V",
                                    "method_body": "private void checkParser() {\nif (iParser == null) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append(Lorg/joda/time/format/PeriodFormatter;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder append(PeriodFormatter formatter) {\nif (formatter == null) {\nclearPrefix();\nappend0(formatter.getPrinter(), formatter.getParser());\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:createComposite(Ljava/util/List;)[Ljava/lang/Object;",
                                    "method_body": "private static Object[] createComposite(List<Object> elementPairs) {\nswitch (elementPairs.size()) {\nreturn new Object[] {Literal.EMPTY, Literal.EMPTY};\nComposite comp = new Composite(elementPairs);\nreturn new Object[] {comp, comp};\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
                                    "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:getValues()[I",
                                    "method_body": "public int[] getValues() {\nint[] result = new int[size()];\nfor (int i = 0; i < result.length; i++) {\nresult[i] = getValue(i);\nreturn result;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getFieldType(I)Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public DurationFieldType getFieldType(int index) {\nreturn iType.getFieldType(index);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.ISOPeriodFormat:standard()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "public static PeriodFormatter standard() {\nif (cStandard == null) {\nreturn cStandard;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkAndUpdate(Lorg/joda/time/DurationFieldType;[II)V",
                                    "method_body": "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {\nint index = indexOf(type);\nif (index == -1) {\nvalues[index] = newValue;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "public int parseInto(\nif (periodStr.regionMatches(true, position, iText, 0, iText.length())) {\nreturn position + iText.length();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:size()I",
                                    "method_body": "public int size() {\nreturn iType.size();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter(Ljava/util/List;ZZ)Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\nif (notPrinter && notParser) {\nint size = elementPairs.size();\nif (size >= 2 && elementPairs.get(0) instanceof Separator) {\nSeparator sep = (Separator) elementPairs.get(0);\nPeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\nsep = sep.finish(f.getPrinter(), f.getParser());\nreturn new PeriodFormatter(sep, sep);\nObject[] comp = createComposite(elementPairs);\nif (notPrinter) {\n} else if (notParser) {\nreturn new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:finish(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder$Separator;",
                                    "method_body": "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\niAfterPrinter = afterPrinter;\niAfterParser = afterParser;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:getFieldType()I",
                                    "method_body": "int getFieldType() {\nreturn iFieldType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:clear()V",
                                    "method_body": "public void clear() {\niMinPrintedDigits = 1;\niPrintZeroSetting = PRINT_ZERO_RARELY_LAST;\niMaxParsedDigits = 10;\niRejectSignedValues = false;\niPrefix = null;\nif (iElementPairs == null) {\niElementPairs = new ArrayList<Object>();\niNotPrinter = false;\niNotParser = false;\niFieldFormatters = new FieldFormatter[10];\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSecondsWithOptionalMillis()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\nappendField(SECONDS_OPTIONAL_MILLIS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "public void setPeriod(ReadablePeriod period) {\nsuper.setPeriod(period);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nif ((base = iBase) != null) {\nreturn base.getZone();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\nif (iElementPairs.size() > 0) {\noriginalPrinter = iElementPairs.get(iElementPairs.size() - 2);\noriginalParser = iElementPairs.get(iElementPairs.size() - 1);\nif (originalPrinter == null || originalParser == null ||\nclearPrefix();\nFieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\niElementPairs.set(iElementPairs.size() - 2, newField);\niElementPairs.set(iElementPairs.size() - 1, newField);\niFieldFormatters[newField.getFieldType()] = newField;\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:<init>()V",
                                    "method_body": "public PeriodFormatterBuilder() {\nclear();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:toPeriod()Lorg/joda/time/Period;",
                                    "method_body": "public Period toPeriod() {\nreturn new Period(this);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriod(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "protected void setPeriod(ReadablePeriod period) {\nif (period == null) {\nsetPeriodInternal(period);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "public int parseInto(\nPeriodParser[] parsers = iParsers;\nif (parsers == null) {\nint len = parsers.length;\nfor (int i=0; i<len && position >= 0; i++) {\nposition = parsers[i].parseInto(period, periodStr, position, locale);\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:<init>(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;ZZ)V",
                                    "method_body": "Separator(String text, String finalText, String[] variants,\nboolean useBefore, boolean useAfter) {\niText = text;\niFinalText = finalText;\nif ((finalText == null || text.equals(finalText)) &&\niParsedForms = new String[] {text};\niBeforePrinter = beforePrinter;\niBeforeParser = beforeParser;\niUseBefore = useBefore;\niUseAfter = useAfter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.BaseChronology:get(Lorg/joda/time/ReadablePeriod;J)[I",
                                    "method_body": "public int[] get(ReadablePeriod period, long duration) {\nint size = period.size();\nint[] values = new int[size];\nif (duration != 0) {\nreturn values;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setField(Lorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "protected void setField(DurationFieldType field, int value) {\nsetFieldInto(iValues, field, value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ZonedChronology:getZone()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public DateTimeZone getZone() {\nreturn (DateTimeZone)getParam();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:checkPermission()V",
                                    "method_body": "private static void checkPermission() throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:millis()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType millis() {\nreturn MILLIS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public static final PeriodType getPeriodType(PeriodType type) {\nif (type == null) {\nreturn PeriodType.standard();\nreturn type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:standard()Lorg/joda/time/PeriodType;",
                                    "method_body": "public static PeriodType standard() {\nPeriodType type = cStandard;\nif (type == null) {\nreturn type;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "public MutablePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper(period, type, chrono);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:parse(Ljava/lang/String;I)I",
                                    "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparatorIfFieldsAfter(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) {\nreturn appendSeparator(text, text, null, false, true);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:parseInt(Ljava/lang/String;II)I",
                                    "method_body": "private int parseInt(String text, int position, int length) {\nif (length >= 10) {\nreturn Integer.parseInt(text.substring(position, position + length));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(Object period, PeriodType type, Chronology chrono) {\nsuper();\nPeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);\ntype = (type == null ? converter.getPeriodType(period) : type);\ntype = checkPeriodType(type);\niType = type;\nif (this instanceof ReadWritablePeriod) {\niValues = new int[size()];\nchrono = DateTimeUtils.getChronology(chrono);\nconverter.setInto((ReadWritablePeriod) this, period, chrono);\niValues = new MutablePeriod(period, type, chrono).getValues();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getParser()Lorg/joda/time/format/PeriodParser;",
                                    "method_body": "public PeriodParser getParser() {\nreturn iParser;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
                                    "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn ISOChronology.getInstance();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setSeconds(I)V",
                                    "method_body": "public void setSeconds(int seconds) {\nsuper.setField(DurationFieldType.seconds(), seconds);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendMonths()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendMonths() {\nappendField(MONTHS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendLiteral(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendLiteral(String text) {\nif (text == null) {\nclearPrefix();\nLiteral literal = new Literal(text);\nappend0(literal, literal);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setFieldInto([ILorg/joda/time/DurationFieldType;I)V",
                                    "method_body": "protected void setFieldInto(int[] values, DurationFieldType field, int value) {\nint index = indexOf(field);\nif (index == -1) {\nvalues[index] = value;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
                                    "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:<init>(JLorg/joda/time/PeriodType;)V",
                                    "method_body": "public MutablePeriod(long duration, PeriodType type) {\nsuper(duration, type, null);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.AssembledChronology:getParam()Ljava/lang/Object;",
                                    "method_body": "protected final Object getParam() {\nreturn iParam;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getInstance()Lorg/joda/time/convert/ConverterManager;",
                                    "method_body": "public static ConverterManager getInstance() {\nif (INSTANCE == null) {\nreturn INSTANCE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ReadablePeriodConverter:setInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V",
                                    "method_body": "public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {\nduration.setPeriod((ReadablePeriod) object);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:<init>(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V",
                                    "method_body": "protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\nsuper();\ntype = checkPeriodType(type);\nchrono = DateTimeUtils.getChronology(chrono);\niType = type;\niValues = chrono.get(this, duration);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSeparator(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZZ)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\nif (text == null || finalText == null) {\nclearPrefix();\nList<Object> pairs = iElementPairs;\nif (pairs.size() == 0) {\nSeparator lastSeparator = null;\nfor (i=pairs.size(); --i>=0; ) {\nif (pairs.get(i) instanceof Separator) {\ni--;  // element pairs\nif (lastSeparator != null && pairs.size() == 0) {\nObject[] comp = createComposite(pairs);\npairs.clear();\nSeparator separator = new Separator(\npairs.add(separator);\npairs.add(separator);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:toFormatter()Lorg/joda/time/format/PeriodFormatter;",
                                    "method_body": "public PeriodFormatter toFormatter() {\nPeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\niFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\nreturn formatter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendWeeks()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendWeeks() {\nappendField(WEEKS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.Period:<init>(Ljava/lang/Object;)V",
                                    "method_body": "public Period(Object period) {\nsuper(period, null, null);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance(DateTimeZone zone) {\nif (zone == null) {\nint index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);\nISOChronology chrono = cFastCache[index];\nif (chrono != null && chrono.getZone() == zone) {\nreturn chrono;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DurationFieldType:seconds()Lorg/joda/time/DurationFieldType;",
                                    "method_body": "public static DurationFieldType seconds() {\nreturn SECONDS_TYPE;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:decompose(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V",
                                    "method_body": "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {\nint size = elementPairs.size();\nfor (int i=0; i<size; i+=2) {\nObject element = elementPairs.get(i);\nif (element instanceof PeriodPrinter) {\nif (element instanceof Composite) {\nprinterList.add(element);\nelement = elementPairs.get(i + 1);\nif (element instanceof PeriodParser) {\nif (element instanceof Composite) {\nparserList.add(element);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:parsePeriod(Ljava/lang/String;)Lorg/joda/time/Period;",
                                    "method_body": "public Period parsePeriod(String text) {\ncheckParser();\nreturn parseMutablePeriod(text).toPeriod();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterSet:select(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;",
                                    "method_body": "Converter select(Class<?> type) throws IllegalStateException {\nEntry[] entries = iSelectEntries;\nint length = entries.length;\nint index = type == null ? 0 : type.hashCode() & (length - 1);\nwhile ((e = entries[index]) != null) {\nif (e.iType == type) {\nreturn e.iConverter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ConverterManager:getPeriodConverter(Ljava/lang/Object;)Lorg/joda/time/convert/PeriodConverter;",
                                    "method_body": "public PeriodConverter getPeriodConverter(Object object) {\nPeriodConverter converter =\nif (converter != null) {\nreturn converter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
                                    "method_body": "FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {\niMinPrintedDigits = field.iMinPrintedDigits;\niPrintZeroSetting = field.iPrintZeroSetting;\niMaxParsedDigits = field.iMaxParsedDigits;\niRejectSignedValues = field.iRejectSignedValues;\niFieldType = field.iFieldType;\niFieldFormatters = field.iFieldFormatters;\niPrefix = field.iPrefix;\nif (field.iSuffix != null) {\niSuffix = suffix;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendSuffix(Ljava/lang/String;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendSuffix(String text) {\nif (text == null) {\nreturn appendSuffix(new SimpleAffix(text));\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:getPeriodType()Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType() {\nreturn iType;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(II)V",
                                    "method_body": "private void appendField(int type, int minPrinted) {\nFieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\nappend0(field, field);\niFieldFormatters[type] = field;\niPrefix = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:append0(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\niElementPairs.add(printer);\niElementPairs.add(parser);\niNotPrinter |= (printer == null);\niNotParser |= (parser == null);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.PeriodType:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nfor (int i = 0, isize = size(); i < isize; i++) {\nif (iTypes[i] == type) {\nreturn i;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:getPrinter()Lorg/joda/time/format/PeriodPrinter;",
                                    "method_body": "public PeriodPrinter getPrinter() {\nreturn iPrinter;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:scan(Ljava/lang/String;I)I",
                                    "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Composite:<init>(Ljava/util/List;)V",
                                    "method_body": "Composite(List<Object> elementPairs) {\nList<Object> printerList = new ArrayList<Object>();\nList<Object> parserList = new ArrayList<Object>();\ndecompose(elementPairs, printerList, parserList);\nif (printerList.size() <= 0) {\niPrinters = printerList.toArray(\nif (parserList.size() <= 0) {\niParsers = parserList.toArray(\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:checkPeriodType(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;",
                                    "method_body": "protected PeriodType checkPeriodType(PeriodType type) {\nreturn DateTimeUtils.getPeriodType(type);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Separator:parseInto(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;ILjava/util/Locale;)I",
                                    "method_body": "public int parseInto(\nint oldPos = position;\nposition = iBeforeParser.parseInto(period, periodStr, position, locale);\nif (position < 0) {\nboolean found = false;\nif (position > oldPos) {\nString[] parsedForms = iParsedForms;\nint length = parsedForms.length;\nfor (int i=0; i < length; i++) {\nString parsedForm = parsedForms[i];\nif ((parsedForm == null || parsedForm.length() == 0) ||\nposition += parsedForm.length();\nfound = true;\nbreak;\noldPos = position;\nposition = iAfterParser.parseInto(period, periodStr, position, locale);\nif (position < 0) {\nif (found && position == oldPos) {\nreturn ~oldPos;\nif (position > oldPos && !found && !iUseBefore) {\nreturn position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.chrono.ISOChronology:getInstance()Lorg/joda/time/chrono/ISOChronology;",
                                    "method_body": "public static ISOChronology getInstance() {\nreturn getInstance(DateTimeZone.getDefault());\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils$FixedMillisProvider:<init>(J)V",
                                    "method_body": "FixedMillisProvider(long fixedMillis) {\niMillis = fixedMillis;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.MutablePeriod:setMillis(I)V",
                                    "method_body": "public void setMillis(int millis) {\nsuper.setField(DurationFieldType.millis(), millis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:<init>(Lorg/joda/time/format/PeriodPrinter;Lorg/joda/time/format/PeriodParser;)V",
                                    "method_body": "public PeriodFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = null;\niParseType = null;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.BasePeriod:setPeriodInternal(Lorg/joda/time/ReadablePeriod;)V",
                                    "method_body": "private void setPeriodInternal(ReadablePeriod period) {\nint[] newValues = new int[size()];\nfor (int i = 0, isize = period.size(); i < isize; i++) {\nDurationFieldType type = period.getFieldType(i);\nint value = period.getValue(i);\ncheckAndUpdate(type, newValues, value);\niValues = newValues;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.convert.ReadablePeriodConverter:getPeriodType(Ljava/lang/Object;)Lorg/joda/time/PeriodType;",
                                    "method_body": "public PeriodType getPeriodType(Object object) {\nReadablePeriod period = (ReadablePeriod) object;\nreturn period.getPeriodType();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendDays()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendDays() {\nappendField(DAYS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$Literal:<init>(Ljava/lang/String;)V",
                                    "method_body": "Literal(String text) {\niText = text;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisSystem()V",
                                    "method_body": "public static final void setCurrentMillisSystem() throws SecurityException {\ncheckPermission();\ncMillisProvider = SYSTEM_MILLIS_PROVIDER;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendHours()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendHours() {\nappendField(HOURS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:setFieldValue(Lorg/joda/time/ReadWritablePeriod;II)V",
                                    "method_body": "void setFieldValue(ReadWritablePeriod period, int field, int value) {\nswitch (field) {\nperiod.setSeconds(value);\nbreak;\nperiod.setMillis(value);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendField(I)V",
                                    "method_body": "private void appendField(int type) {\nappendField(type, iMinPrintedDigits);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.FormatUtils:createErrorMessage(Ljava/lang/String;I)Ljava/lang/String;",
                                    "method_body": "static String createErrorMessage(final String text, final int errorPos) {\nint sampleLen = errorPos + 32;\nif (text.length() <= sampleLen + 3) {\nsampleText = text;\nif (errorPos <= 0) {\nif (errorPos >= text.length()) {\nreturn \"Invalid format: \\\"\" + sampleText + \"\\\" is malformed at \\\"\" +\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter:<init>(IIIZI[Lorg/joda/time/format/PeriodFormatterBuilder$FieldFormatter;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;Lorg/joda/time/format/PeriodFormatterBuilder$PeriodFieldAffix;)V",
                                    "method_body": "FieldFormatter(int minPrintedDigits, int printZeroSetting,\nPeriodFieldAffix prefix, PeriodFieldAffix suffix) {\niMinPrintedDigits = minPrintedDigits;\niPrintZeroSetting = printZeroSetting;\niMaxParsedDigits = maxParsedDigits;\niRejectSignedValues = rejectSignedValues;\niFieldType = fieldType;\niFieldFormatters = fieldFormatters;\niPrefix = prefix;\niSuffix = suffix;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix:<init>(Ljava/lang/String;)V",
                                    "method_body": "int calculatePrintedLength(int value);\nSimpleAffix(String text) {\niText = text;\n}\nString text = iText;\nint textLength = text.length();\nif (periodStr.regionMatches(true, position, text, 0, textLength)) {\nreturn position + textLength;\nString text = iText;\nint textLength = text.length();\nint sourceLength = periodStr.length();\nfor (int pos = position; pos < sourceLength; pos++) {\nif (periodStr.regionMatches(true, pos, text, 0, textLength)) {\nreturn pos;\nswitch (periodStr.charAt(pos)) {\nbreak;\nbreak search;\nreturn ~position;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:<init>()V",
                                    "method_body": "protected AbstractPeriod() {\nsuper();\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.DateTimeUtils:setCurrentMillisFixed(J)V",
                                    "method_body": "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\ncheckPermission();\ncMillisProvider = new FixedMillisProvider(fixedMillis);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatterBuilder:appendYears()Lorg/joda/time/format/PeriodFormatterBuilder;",
                                    "method_body": "public PeriodFormatterBuilder appendYears() {\nappendField(YEARS);\nreturn this;\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.base.AbstractPeriod:indexOf(Lorg/joda/time/DurationFieldType;)I",
                                    "method_body": "public int indexOf(DurationFieldType type) {\nreturn getPeriodType().indexOf(type);\n}"
                                },
                                {
                                    "method_signature": "org.joda.time.format.PeriodFormatter:parseMutablePeriod(Ljava/lang/String;)Lorg/joda/time/MutablePeriod;",
                                    "method_body": "public MutablePeriod parseMutablePeriod(String text) {\ncheckParser();\nMutablePeriod period = new MutablePeriod(0, iParseType);\nint newPos = getParser().parseInto(period, text, 0, iLocale);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn period;\nnewPos = ~newPos;\nthrow new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n}"
                                }
                            ],
                            "stack_trace": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"\nat org.joda.time.format.PeriodFormatter.parseMutablePeriod(PeriodFormatter.java:326)\nat org.joda.time.format.PeriodFormatter.parsePeriod(PeriodFormatter.java:304)\nat org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455(TestPeriodFormatterBuilder.java:869)"
                        }
                    ]
                }
            ]
        }
    ]
}