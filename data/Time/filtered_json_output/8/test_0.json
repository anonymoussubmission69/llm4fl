{
    "bug_id": 8,
    "test_id": 0,
    "test_name": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int",
    "test_body": "public void testForOffsetHoursMinutes_int_int() {\nassertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n307: assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));\nassertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, -15);\nfail();\n} catch (IllegalArgumentException ex) {}\n314: assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));\nassertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));\nassertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));\n318: assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));\nassertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));\n322: assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\ntry {\nDateTimeZone.forOffsetHoursMinutes(2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-2, 60);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\ntry {\nDateTimeZone.forOffsetHoursMinutes(-24, 0);\nfail();\n} catch (IllegalArgumentException ex) {}\n}        \n",
    "stack_trace": "java.lang.IllegalArgumentException: Minutes out of range: -15\nat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:280)\nat org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int(TestDateTimeZone.java:316)",
    "covered_methods": [
        {
            "method_signature": "org.joda.time.DateTimeZone:parseOffset(Ljava/lang/String;)I",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:offsetFormatter()Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "private static synchronized DateTimeFormatter offsetFormatter() {\nif (cOffsetFormatter == null) {\nreturn cOffsetFormatter;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:getZone()Lorg/joda/time/DateTimeZone;",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:withUTC()Lorg/joda/time/Chronology;",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetHoursMinutes(II)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\nif (hoursOffset == 0 && minutesOffset == 0) {\nreturn DateTimeZone.UTC;\nif (hoursOffset < -23 || hoursOffset > 23) {\nif (minutesOffset < 0 || minutesOffset > 59) {\nthrow new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\nint offset = 0;\nint hoursInMinutes = hoursOffset * 60;\nif (hoursInMinutes < 0) {\nminutesOffset = hoursInMinutes + minutesOffset;\noffset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n}\nreturn forOffsetMillis(offset);\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forOffsetMillis(I)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forOffsetMillis(int millisOffset) {\nif (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\nString id = printOffset(millisOffset);\nreturn fixedOffsetZone(id, millisOffset);\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:digitCount(Ljava/lang/String;II)I",
            "method_body": "private int digitCount(String text, int position, int amount) {\nint limit = Math.min(text.length() - position, amount);\namount = 0;\nfor (; limit > 0; limit--) {\nchar c = text.charAt(position + amount);\nif (c < '0' || c > '9') {\namount++;\nreturn amount;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:fixedOffsetZone(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;",
            "method_body": "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\nif (offset == 0) {\nif (iFixedOffsetCache == null) {\nReference<DateTimeZone> ref = iFixedOffsetCache.get(id);\nif (ref != null) {\nzone = ref.get();\nif (zone != null) {\nreturn zone;\nzone = new FixedDateTimeZone(id, null, offset, offset);\niFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));\nreturn zone;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:printOffset(I)Ljava/lang/String;",
            "method_body": "private static String printOffset(int offset) {\nStringBuffer buf = new StringBuffer();\nif (offset >= 0) {\nbuf.append('+');\nbuf.append('-');\noffset = -offset;\nint hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\nFormatUtils.appendPaddedInteger(buf, hours, 2);\noffset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;\nint minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\nbuf.append(':');\nFormatUtils.appendPaddedInteger(buf, minutes, 2);\noffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nif (offset == 0) {\nreturn buf.toString();\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset:parseInto(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/String;I)I",
            "method_body": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\nint limit = text.length() - position;\nif (iZeroOffsetParseText != null) {\nif (limit <= 1) {\nchar c = text.charAt(position);\nif (c == '-') {\nnegative = true;\n} else if (c == '+') {\nnegative = false;\nlimit--;\nposition++;\nif (digitCount(text, position, 2) < 2) {\nint hours = FormatUtils.parseTwoDigits(text, position);\nif (hours > 23) {\noffset = hours * DateTimeConstants.MILLIS_PER_HOUR;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nc = text.charAt(position);\nif (c == ':') {\nexpectSeparators = true;\nlimit--;\nposition++;\nint count = digitCount(text, position, 2);\nif (count == 0 && !expectSeparators) {\n} else if (count < 2) {\nint minutes = FormatUtils.parseTwoDigits(text, position);\nif (minutes > 59) {\noffset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\nlimit -= 2;\nposition += 2;\nif (limit <= 0) {\nbreak parse;\nbucket.setOffset(Integer.valueOf(negative ? -offset : offset));\nreturn position;\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:parseMillis(Ljava/lang/String;)J",
            "method_body": "public long parseMillis(String text) {\nDateTimeParser parser = requireParser();\nChronology chrono = selectChronology(iChrono);\nDateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\nint newPos = parser.parseInto(bucket, text, 0);\nif (newPos >= 0) {\nif (newPos >= text.length()) {\nreturn bucket.computeMillis(true, text);\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:withChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;",
            "method_body": "public DateTimeFormatter withChronology(Chronology chrono) {\nif (iChrono == chrono) {\nreturn new DateTimeFormatter(iPrinter, iParser, iLocale,\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:requireParser()Lorg/joda/time/format/DateTimeParser;",
            "method_body": "private DateTimeParser requireParser() {\nDateTimeParser parser = iParser;\nif (parser == null) {\nreturn parser;\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:<init>(Lorg/joda/time/format/DateTimePrinter;Lorg/joda/time/format/DateTimeParser;Ljava/util/Locale;ZLorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;Ljava/lang/Integer;I)V",
            "method_body": "private DateTimeFormatter(\nsuper();\niPrinter = printer;\niParser = parser;\niLocale = locale;\niOffsetParsed = offsetParsed;\niChrono = chrono;\niZone = zone;\niPivotYear = pivotYear;\niDefaultYear = defaultYear;\n}"
        },
        {
            "method_signature": "org.joda.time.format.DateTimeFormatter:selectChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "private Chronology selectChronology(Chronology chrono) {\nchrono = DateTimeUtils.getChronology(chrono);\nif (iChrono != null) {\nchrono = iChrono;\nif (iZone != null) {\nreturn chrono;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:setDefault(Lorg/joda/time/DateTimeZone;)V",
            "method_body": "public static void setDefault(DateTimeZone zone) throws SecurityException {\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\nif (zone == null) {\nsynchronized(DateTimeZone.class) {\ncDefault = zone;\n}\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeUtils:getChronology(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;",
            "method_body": "public static final Chronology getChronology(Chronology chrono) {\nif (chrono == null) {\nreturn chrono;\n}"
        },
        {
            "method_signature": "org.joda.time.chrono.BaseChronology:<init>()V",
            "method_body": "protected BaseChronology() {\nsuper();\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:getDefault()Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone getDefault() {\nDateTimeZone zone = cDefault;\nif (zone == null) {\nreturn zone;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:forID(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;",
            "method_body": "public static DateTimeZone forID(String id) {\nif (id == null) {\nif (id.equals(\"UTC\")) {\nDateTimeZone zone = cProvider.getZone(id);\nif (zone != null) {\nif (id.startsWith(\"+\") || id.startsWith(\"-\")) {\nint offset = parseOffset(id);\nif (offset == 0L) {\nreturn DateTimeZone.UTC;\nid = printOffset(offset);\nreturn fixedOffsetZone(id, offset);\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone:<init>(Ljava/lang/String;)V",
            "method_body": "protected DateTimeZone(String id) {\nif (id == null) {\niID = id;\n}"
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:<init>(Ljava/lang/String;Ljava/lang/String;II)V",
            "method_body": "public FixedDateTimeZone(String id, String nameKey,\nsuper(id);\niNameKey = nameKey;\niWallOffset = wallOffset;\niStandardOffset = standardOffset;\n}"
        },
        {
            "method_signature": "org.joda.time.tz.FixedDateTimeZone:equals(Ljava/lang/Object;)Z",
            "method_body": "public boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}"
        },
        {
            "method_signature": "org.joda.time.DateTimeZone$1:<init>()V",
            "method_body": "private static int parseOffset(String str) {\nChronology chrono = new BaseChronology() {\nreturn null;\nreturn this;\nreturn -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n}"
        }
    ]
}