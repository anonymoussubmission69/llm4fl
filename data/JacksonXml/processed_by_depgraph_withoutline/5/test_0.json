{
    "bug_id": 5,
    "test_id": 0,
    "test_name": "com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith",
    "test_body": "74: public void testCopyWith() throws Exception\n75: {\n76: XmlMapper xmlMapper = newMapper();\n77: final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()\n78: .disable(MapperFeature.USE_ANNOTATIONS)\n79: .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\n80: 81: String xml1 = xmlMapper.writeValueAsString(new Pojo282());\n82: String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());\n83: 84: if (!xml1.contains(\"AnnotatedName\")) {\n85: fail(\"Should use name 'AnnotatedName', xml = \"+xml1);\n86: }\n87: if (!xml2.contains(\"Pojo282\")\n88: || xml2.contains(\"AnnotatedName\")) {\n89: fail(\"Should NOT use name 'AnnotatedName' but 'Pojo282', xml = \"+xml1);\n90: }",
    "stack_trace": "junit.framework.AssertionFailedError: Should NOT use name 'AnnotatedName' but 'Pojo282', xml = <AnnotatedName><a>3</a></AnnotatedName>\nat junit.framework.Assert.fail(Assert.java:57)\nat junit.framework.TestCase.fail(TestCase.java:227)\nat com.fasterxml.jackson.dataformat.xml.MapperCopyTest.testCopyWith(MapperCopyTest.java:89)",
    "covered_methods": [
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;)V",
            "method_body": "protected XmlMapper(XmlMapper src) {\nsuper(src);\n_xmlModule = src._xmlModule;\n}",
            "method_id": 1
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider;)V",
            "method_body": "protected XmlSerializerProvider(XmlSerializerProvider src) {\nsuper(src);\n_rootNameLookup = src._rootNameLookup;\n}",
            "method_id": 0
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:copy()Lcom/fasterxml/jackson/dataformat/xml/XmlMapper;",
            "method_body": "public XmlMapper copy()\n_checkInvalidCopy(XmlMapper.class);\nreturn new XmlMapper(this);\n}",
            "method_id": 2
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:copy()Lcom/fasterxml/jackson/databind/ser/DefaultSerializerProvider;",
            "method_body": "public DefaultSerializerProvider copy() {\nreturn new XmlSerializerProvider(this);\n}",
            "method_id": 3
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;Lcom/fasterxml/jackson/dataformat/xml/JacksonXmlModule;)V",
            "method_body": "public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module)\nsuper(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), null);\n_xmlModule = module;\nif (module != null) {\nregisterModule(module);\n_serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);\nenable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);\n}",
            "method_id": 4
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:serializeValue(Lcom/fasterxml/jackson/core/JsonGenerator;Ljava/lang/Object;)V",
            "method_body": "public void serializeValue(JsonGenerator gen, Object value) throws IOException\nif (value == null) {\nfinal Class<?> cls = value.getClass();\nfinal ToXmlGenerator xgen = _asXmlGenerator(gen);\nif (xgen == null) { // called by convertValue()\nQName rootName = _rootNameFromConfig();\nif (rootName == null) {\nrootName = _rootNameLookup.findRootName(cls, _config);\n_initWithRootName(xgen, rootName);\nasArray = TypeUtil.isIndexedType(cls);\nif (asArray) {\nfinal JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);\nser.serialize(value, gen, this);\n}\nif (asArray) {\n}",
            "method_id": 5
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature:getMask()I",
            "method_body": "@Override public int getMask() { return _mask; }\n@Override public int getMask() { return _mask; }",
            "method_id": 6
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>()V",
            "method_body": "public XmlMapper() {\nthis(new XmlFactory());\n}",
            "method_id": 7
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.XmlMapper:<init>(Lcom/fasterxml/jackson/dataformat/xml/XmlFactory;)V",
            "method_body": "public XmlMapper(XmlFactory xmlFactory) {\nthis(xmlFactory, DEFAULT_XML_MODULE);\n}",
            "method_id": 8
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_initWithRootName(Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;Ljavax/xml/namespace/QName;)V",
            "method_body": "protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException\nif (!xgen.setNextNameIfMissing(rootName)) {\nxgen.initGenerator();\nString ns = rootName.getNamespaceURI();\nif (ns != null && ns.length() > 0) {\n}",
            "method_id": 9
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider;Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)V",
            "method_body": "public XmlSerializerProvider(XmlSerializerProvider src,\nsuper(src, config, f);\n_rootNameLookup  = src._rootNameLookup;\n}",
            "method_id": 10
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_rootNameFromConfig()Ljavax/xml/namespace/QName;",
            "method_body": "protected QName _rootNameFromConfig()\nPropertyName name = _config.getFullRootName();\nif (name == null) {\nreturn null;\n}",
            "method_id": 11
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:_asXmlGenerator(Lcom/fasterxml/jackson/core/JsonGenerator;)Lcom/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator;",
            "method_body": "protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen)\nif (!(gen instanceof ToXmlGenerator)) {\nreturn (ToXmlGenerator) gen;\n}",
            "method_id": 12
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature:getMask()I",
            "method_body": "@Override public int getMask() { return _mask; }\n@Override public int getMask() { return _mask; }",
            "method_id": 13
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<init>(Lcom/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup;)V",
            "method_body": "public XmlSerializerProvider(XmlRootNameLookup rootNames)\nsuper();\n_rootNameLookup = rootNames;\n}",
            "method_id": 14
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:createInstance(Lcom/fasterxml/jackson/databind/SerializationConfig;Lcom/fasterxml/jackson/databind/ser/SerializerFactory;)Lcom/fasterxml/jackson/databind/ser/DefaultSerializerProvider;",
            "method_body": "public DefaultSerializerProvider createInstance(SerializationConfig config,\nreturn new XmlSerializerProvider(this, config, jsf);\n}",
            "method_id": 15
        },
        {
            "method_signature": "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider:<clinit>()V",
            "method_body": "private static final long serialVersionUID = 1L;\nprotected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\nsuper();\n_rootNameLookup = rootNames;\n}",
            "method_id": 16
        }
    ]
}