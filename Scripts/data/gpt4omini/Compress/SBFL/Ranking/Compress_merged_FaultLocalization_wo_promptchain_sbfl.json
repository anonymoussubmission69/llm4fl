{
    "project_name": "Compress",
    "bugs": {
        "35": {
            "0": {
                "method_ids": [
                    30,
                    22,
                    24,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ]
            }
        },
        "32": {
            "0": {
                "method_ids": [
                    8,
                    33,
                    1,
                    46,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getLongGroupId()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:addPaxHeaderForBigNumber(Ljava/util/Map;Ljava/lang/String;JJ)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V"
                ]
            }
        },
        "5": {
            "0": {
                "method_ids": [
                    5,
                    0,
                    4,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:skip(J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "2": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    8,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextArEntry()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:closeArchiveEntry()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextArEntry()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read()I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read([BII)I"
                ]
            }
        },
        "33": {
            "0": {
                "method_ids": [
                    11,
                    50,
                    51,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:init(Z)Z",
                    "org.apache.commons.compress.compressors.CompressorException:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;"
                ]
            }
        },
        "34": {
            "0": {
                "method_ids": [
                    9,
                    7,
                    8,
                    4,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getLocalFileDataData()[B",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:setUID(J)V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getGID()J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ]
            }
        },
        "3": {
            "0": {
                "method_ids": [
                    0,
                    63,
                    82,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeVersionNeededToExtractAndGeneralPurposeBits(IZ)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry()V"
                ]
            }
        },
        "4": {
            "0": {
                "method_ids": [
                    4,
                    2,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([B)J",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    6,
                    0,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "6": {
                "method_ids": [
                    8,
                    6,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "7": {
                "method_ids": [
                    8,
                    6,
                    1,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "8": {
                "method_ids": [
                    8,
                    6,
                    0,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "4": {
                "method_ids": [
                    8,
                    6,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "5": {
                "method_ids": [
                    8,
                    6,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "9": {
                "method_ids": [
                    8,
                    6,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "2": {
                "method_ids": [
                    8,
                    6,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "3": {
                "method_ids": [
                    8,
                    6,
                    9,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            }
        },
        "45": {
            "0": {
                "method_ids": [
                    1,
                    3,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatBigIntegerBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseBinaryLong([BIIZ)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I"
                ]
            }
        },
        "42": {
            "0": {
                "method_ids": [
                    68,
                    69,
                    96,
                    95
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getUnixMode()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExternalAttributes(J)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setInternalAttributes(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z"
                ]
            }
        },
        "27": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    4,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:isUTF8(Ljava/lang/String;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "18": {
            "0": {
                "method_ids": [
                    26,
                    4,
                    12,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Ljava/lang/String;Ljava/util/Map;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:setAddPaxHeadersForNonAsciiNames(Z)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Ljava/lang/String;Ljava/util/Map;)V"
                ]
            }
        },
        "20": {
            "0": {
                "method_ids": [
                    18,
                    9,
                    14,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setMode(J)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldAsciiEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldBinaryEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;"
                ]
            }
        },
        "16": {
            "0": {
                "method_ids": [
                    34,
                    20,
                    21,
                    1,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "29": {
            "0": {
                "method_ids": [
                    87,
                    2,
                    78,
                    46,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/lang/String;Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:setEntryEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "1": {
                "method_ids": [
                    68,
                    92,
                    98,
                    57
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "2": {
                "method_ids": [
                    45,
                    81,
                    93,
                    56
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        },
        "11": {
            "0": {
                "method_ids": [
                    30,
                    24,
                    16,
                    17,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "43": {
            "0": {
                "method_ids": [
                    50,
                    2,
                    57,
                    54
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:closeEntry(ZZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:usesDataDescriptor(I)Z"
                ]
            }
        },
        "44": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ]
            },
            "1": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ChecksumCalculatingInputStream:<init>(Ljava/util/zip/Checksum;Ljava/io/InputStream;)V"
                ]
            }
        },
        "10": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    34,
                    28
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:getInputStream(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream:read()I",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:readCentralDirectoryEntry(Ljava/util/Map;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:resolveLocalFileHeaderData(Ljava/util/Map;)V"
                ]
            }
        },
        "17": {
            "0": {
                "method_ids": [
                    8,
                    1,
                    2,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "28": {
            "0": {
                "method_ids": [
                    17,
                    18,
                    20,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:available()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I"
                ]
            }
        },
        "21": {
            "0": {
                "method_ids": [
                    35,
                    36,
                    37,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "1": {
                "method_ids": [
                    36,
                    35,
                    33,
                    46
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "6": {
                "method_ids": [
                    36,
                    35,
                    33,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "7": {
                "method_ids": [
                    36,
                    35,
                    34,
                    22,
                    19
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "4": {
                "method_ids": [
                    35,
                    36,
                    37,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "5": {
                "method_ids": [
                    35,
                    36,
                    37,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "2": {
                "method_ids": [
                    36,
                    35,
                    33,
                    34,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "3": {
                "method_ids": [
                    36,
                    35,
                    33,
                    46
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            }
        },
        "26": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            },
            "1": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            }
        },
        "19": {
            "0": {
                "method_ids": [
                    0,
                    19,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:reparseCentralDirectoryData(ZZZZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:setSizesAndOffsetFromZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$OffsetEntry;I)V",
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:parseFromCentralDirectoryData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory64()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:reparseCentralDirectoryData(ZZZZ)V"
                ]
            }
        },
        "8": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "1": {
            "0": {
                "method_ids": [
                    41,
                    38,
                    40,
                    36
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readFully([BII)I",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:closeEntry()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V"
                ]
            }
        },
        "6": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/util/zip/ZipEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "38": {
            "0": {
                "method_ids": [
                    28,
                    8,
                    29,
                    37,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:paxHeaders()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isDirectory()Z"
                ]
            }
        },
        "31": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            },
            "1": {
                "method_ids": [
                    21,
                    22,
                    23,
                    24,
                    25
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "36": {
            "0": {
                "method_ids": [
                    15,
                    39,
                    41,
                    64
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getCurrentStream()Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getNextEntry()Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:buildDecodingStream()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getCurrentStream()Ljava/io/InputStream;"
                ]
            }
        },
        "7": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatNameBytes(Ljava/lang/String;[BII)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;"
                ]
            }
        },
        "9": {
            "0": {
                "method_ids": [
                    28,
                    3,
                    15,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveOutputStream:getBytesWritten()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V"
                ]
            }
        },
        "37": {
            "0": {
                "method_ids": [
                    24,
                    7,
                    8,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:paxHeaders()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;"
                ]
            }
        },
        "30": {
            "0": {
                "method_ids": [
                    7,
                    44,
                    43,
                    50
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupBlock()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:initBlock()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I"
                ]
            }
        },
        "39": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>()V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;"
                ]
            }
        },
        "23": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder:decode(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readEncodedHeader(Ljava/io/DataInputStream;Lorg/apache/commons/compress/archivers/sevenz/Archive;[B)Ljava/io/DataInputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readPackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFolder(Ljava/io/DataInput;)Lorg/apache/commons/compress/archivers/sevenz/Folder;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder:decode(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;"
                ]
            }
        },
        "24": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    8,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "12": {
            "0": {
                "method_ids": [
                    15,
                    10,
                    3,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;"
                ]
            }
        },
        "15": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    4,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getPlatform()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "41": {
            "0": {
                "method_ids": [
                    11,
                    12,
                    13,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFirstLocalFileHeader([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFully([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            },
            "1": {
                "method_ids": [
                    119,
                    126,
                    80,
                    118,
                    99
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:processZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            }
        },
        "46": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    0,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:dateToZipLong(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyJavaTime(Ljava/util/Date;)V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyTime(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;"
                ]
            }
        },
        "14": {
            "0": {
                "method_ids": [
                    12,
                    6,
                    7,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([B)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "13": {
            "0": {
                "method_ids": [
                    69,
                    64,
                    58,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipEncodingHelper:getZipEncoding(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getUnicodeName()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            },
            "1": {
                "method_ids": [
                    17,
                    84,
                    1,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:getEntry(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getUnicodeName()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            }
        },
        "25": {
            "0": {
                "method_ids": [
                    47,
                    0,
                    114,
                    93
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readStored([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getSize()J",
                    "org.apache.commons.compress.archivers.zip.GeneralPurposeBit:usesDataDescriptor()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        },
        "22": {
            "0": {
                "method_ids": [
                    51,
                    50,
                    49,
                    39
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsR(I)I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:initBlock()V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:init(Z)Z",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:endBlock()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read0()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartC()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartC()I"
                ]
            }
        },
        "47": {
            "0": {
                "method_ids": [
                    12,
                    33,
                    34,
                    35
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:canHandleEntryData(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsEncryptionOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsMethodOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "40": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            },
            "1": {
                "method_ids": [
                    2,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            }
        }
    }
}