{
    "project_name": "Compress",
    "bugs": {
        "35": {
            "0": {
                "method_ids": [
                    30,
                    9,
                    10,
                    5,
                    4,
                    3,
                    2,
                    22,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:matches([BI)Z",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isCheckSumOK()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:verifyCheckSum([B)Z"
                ]
            }
        },
        "32": {
            "0": {
                "method_ids": [
                    8,
                    1,
                    2,
                    33,
                    11,
                    70,
                    46
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:addPaxHeaderForBigNumber(Ljava/util/Map;Ljava/lang/String;JJ)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:setGroupId(J)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getLongGroupId()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V"
                ]
            }
        },
        "5": {
            "0": {
                "method_ids": [
                    4,
                    1,
                    0,
                    2,
                    3,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:skip(J)J",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:closeEntry()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:fill()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFully([B)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "2": {
            "0": {
                "method_ids": [
                    8,
                    7,
                    1,
                    0,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:closeArchiveEntry()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextArEntry()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;",
                    "org.apache.commons.compress.utils.IOUtils:copy(Ljava/io/InputStream;Ljava/io/OutputStream;)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:getNextArEntry()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:close()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read()I",
                    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:read([BII)I"
                ]
            }
        },
        "33": {
            "0": {
                "method_ids": [
                    11,
                    9,
                    10,
                    17,
                    22,
                    26,
                    27
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.xz.XZCompressorInputStream:matches([BI)Z",
                    "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream:matches([BI)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.CompressorStreamFactory:createCompressorInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/compressors/CompressorInputStream;"
                ]
            }
        },
        "34": {
            "0": {
                "method_ids": [
                    9,
                    5,
                    6,
                    2,
                    3,
                    4,
                    0,
                    1,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:bigToLong(Ljava/math/BigInteger;)J",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:longToBig(J)Ljava/math/BigInteger;",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getUID()J",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getGID()J",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:setUID(J)V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:setGID(J)V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:trimLeadingZeroesForceMinLength([B)[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:<clinit>()V",
                    "org.apache.commons.compress.archivers.zip.X7875_NewUnix:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;"
                ]
            }
        },
        "3": {
            "0": {
                "method_ids": [
                    0,
                    83,
                    17,
                    30,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:closeArchiveEntry()V"
                ]
            }
        },
        "4": {
            "0": {
                "method_ids": [
                    4,
                    2,
                    0,
                    9,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    6,
                    0,
                    24,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "6": {
                "method_ids": [
                    8,
                    6,
                    0,
                    24,
                    25,
                    20,
                    1,
                    2,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setUseLanguageEncodingFlag(Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "7": {
                "method_ids": [
                    8,
                    6,
                    0,
                    20,
                    24,
                    25,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:finish()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "8": {
                "method_ids": [
                    8,
                    6,
                    0,
                    1,
                    2,
                    4,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "4": {
                "method_ids": [
                    8,
                    6,
                    9,
                    0,
                    1,
                    2,
                    4,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "5": {
                "method_ids": [
                    8,
                    6,
                    0,
                    25,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "9": {
                "method_ids": [
                    8,
                    6,
                    9,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory()V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "2": {
                "method_ids": [
                    8,
                    6,
                    0,
                    24,
                    25,
                    1,
                    19,
                    20,
                    2,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:deflate()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setUseLanguageEncodingFlag(Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            },
            "3": {
                "method_ids": [
                    8,
                    6,
                    0,
                    1,
                    2,
                    4,
                    12,
                    17
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:<init>(Ljava/io/File;Ljava/lang/String;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:startsWithLocalFileHeader()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:<init>(Ljava/io/File;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:close()V",
                    "org.apache.commons.compress.changes.ChangeSetPerformer:perform(Lorg/apache/commons/compress/archivers/ArchiveInputStream;Lorg/apache/commons/compress/archivers/ArchiveOutputStream;)Lorg/apache/commons/compress/changes/ChangeSetResults;"
                ]
            }
        },
        "45": {
            "0": {
                "method_ids": [
                    1,
                    3,
                    0,
                    2,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatBigIntegerBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongBinary(J[BIIZ)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseBinaryLong([BIIZ)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatLongOctalOrBinaryBytes(J[BII)I"
                ]
            }
        },
        "42": {
            "0": {
                "method_ids": [
                    69,
                    68,
                    96,
                    95,
                    102
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getUnixMode()I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExternalAttributes(J)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setInternalAttributes(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setExtra([B)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:isUnixSymlink()Z"
                ]
            }
        },
        "27": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "18": {
            "0": {
                "method_ids": [
                    4,
                    12,
                    26,
                    13,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Ljava/lang/String;Ljava/util/Map;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:failForBigNumbers(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:setSize(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:writePaxHeaders(Ljava/lang/String;Ljava/util/Map;)V"
                ]
            }
        },
        "20": {
            "0": {
                "method_ids": [
                    18,
                    9,
                    14,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry:setMode(J)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldAsciiEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readOldBinaryEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;"
                ]
            }
        },
        "16": {
            "0": {
                "method_ids": [
                    34,
                    1,
                    2,
                    35,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:matches([BI)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "29": {
            "0": {
                "method_ids": [
                    87,
                    2,
                    4,
                    1,
                    3,
                    0,
                    46,
                    59
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/lang/String;Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:setEntryEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "1": {
                "method_ids": [
                    68,
                    1,
                    98,
                    0,
                    44
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:setEntryEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            },
            "2": {
                "method_ids": [
                    1,
                    3,
                    0,
                    2,
                    4,
                    12,
                    5,
                    57
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:setEntryEncoding(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream:read8(Ljava/io/DataInputStream;)I",
                    "org.apache.commons.compress.archivers.ArchiveInputStream:pushedBackBytes(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:<init>(Ljava/io/InputStream;ILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:<init>(Ljava/io/OutputStream;SILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:<init>(Ljava/io/InputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:<init>(Ljava/io/OutputStream;IILjava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        },
        "11": {
            "0": {
                "method_ids": [
                    30,
                    32,
                    20,
                    0,
                    1,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.jar.JarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream:matches([BI)Z",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:matches([BI)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;"
                ]
            }
        },
        "43": {
            "0": {
                "method_ids": [
                    50,
                    54,
                    2,
                    3,
                    1,
                    0,
                    71,
                    102,
                    101,
                    74
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:copyFromZipInputStream(Ljava/io/InputStream;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:closeCopiedEntry(Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:getRawInputStream(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeCentralDirectoryInChunks()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:usesDataDescriptor(I)Z"
                ]
            }
        },
        "10": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:getInputStream(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream:read()I",
                    "org.apache.commons.compress.archivers.zip.UnrecognizedExtraField:parseFromCentralDirectoryData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream:<init>(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipFile:resolveLocalFileHeaderData(Ljava/util/Map;)V"
                ]
            }
        },
        "17": {
            "0": {
                "method_ids": [
                    8,
                    1,
                    2,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "28": {
            "0": {
                "method_ids": [
                    17,
                    2,
                    3,
                    20,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:skip(J)J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:available()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I"
                ]
            }
        },
        "21": {
            "0": {
                "method_ids": [
                    35,
                    36,
                    46,
                    19,
                    18,
                    14,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<init>(Ljava/io/File;[B)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:write([BII)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "1": {
                "method_ids": [
                    36,
                    35,
                    22,
                    19,
                    18,
                    8,
                    34,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:write([B)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "6": {
                "method_ids": [
                    36,
                    35,
                    24,
                    22,
                    26,
                    34
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyFiles(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileNames(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry:getName()Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "7": {
                "method_ids": [
                    36,
                    24,
                    25,
                    22,
                    46
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileEmptyFiles(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFileAntiItems(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "4": {
                "method_ids": [
                    35,
                    36,
                    37,
                    47
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "5": {
                "method_ids": [
                    35,
                    47,
                    36,
                    19,
                    18,
                    8,
                    9,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeader(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeHeader(Ljava/io/DataOutput;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:finish()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:write([BII)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "2": {
                "method_ids": [
                    36,
                    46,
                    35,
                    33,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readSubStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            },
            "3": {
                "method_ids": [
                    36,
                    35,
                    46,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeFilesInfo(Ljava/io/DataOutput;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:writeBits(Ljava/io/DataOutput;Ljava/util/BitSet;I)V"
                ]
            }
        },
        "26": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            },
            "1": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.IOUtils:skip(Ljava/io/InputStream;J)J"
                ]
            }
        },
        "19": {
            "0": {
                "method_ids": [
                    0,
                    19,
                    1,
                    2,
                    5,
                    26,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:reparseCentralDirectoryData(ZZZZ)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:setSizesAndOffsetFromZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$OffsetEntry;I)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:positionAtCentralDirectory64()V",
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:parseFromCentralDirectoryData([BII)V",
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.ZipFile:populateFromCentralDirectory()Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.zip.ZipFile:readCentralDirectoryEntry(Ljava/util/Map;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:reparseCentralDirectoryData(ZZZZ)V"
                ]
            }
        },
        "8": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "1": {
            "0": {
                "method_ids": [
                    38,
                    41,
                    40,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:readFully([BII)I",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:ensureOpen()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:close()V"
                ]
            }
        },
        "6": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/util/zip/ZipEntry;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "38": {
            "0": {
                "method_ids": [
                    28,
                    9,
                    8,
                    29,
                    30,
                    31
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:paxHeaders()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord([B)Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isDirectory()Z"
                ]
            }
        },
        "31": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            },
            "1": {
                "method_ids": [
                    21,
                    3,
                    22,
                    24,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:readRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:isEOFRecord([B)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "36": {
            "0": {
                "method_ids": [
                    15,
                    39,
                    12,
                    41,
                    25,
                    26,
                    50,
                    52
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getCurrentStream()Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getNextEntry()Lorg/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:read()I",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:buildDecodingStream()V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readPackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readStreamsInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFilesInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:getCurrentStream()Ljava/io/InputStream;"
                ]
            }
        },
        "7": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarUtils:formatNameBytes(Ljava/lang/String;[BII)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseName([BII)Ljava/lang/String;"
                ]
            }
        },
        "9": {
            "0": {
                "method_ids": [
                    3,
                    15,
                    4,
                    14,
                    7,
                    18,
                    27,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:close()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:finish()V",
                    "org.apache.commons.compress.utils.CountingOutputStream:write([BII)V",
                    "org.apache.commons.compress.archivers.tar.TarBuffer:writeRecord([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getSize()J",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:getName()Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:write([BII)V"
                ]
            }
        },
        "37": {
            "0": {
                "method_ids": [
                    8,
                    7,
                    24,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:paxHeaders()V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:read([BII)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;"
                ]
            }
        },
        "30": {
            "0": {
                "method_ids": [
                    42,
                    44,
                    38,
                    43,
                    7,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read0()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartB()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupBlock()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I",
                    "org.apache.commons.compress.compressors.bzip2.BlockSort:blockSort(Lorg/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream$Data;I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I"
                ]
            }
        },
        "39": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.ArchiveStreamFactory:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.ArchiveUtils:sanitize(Ljava/lang/String;)Ljava/lang/String;"
                ]
            }
        },
        "23": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    8,
                    4,
                    3,
                    2,
                    16,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder:decode(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readEncodedHeader(Ljava/io/DataInputStream;Lorg/apache/commons/compress/archivers/sevenz/Archive;[B)Ljava/io/DataInputStream;",
                    "org.apache.commons.compress.archivers.sevenz.Coders:addDecoder(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readFolder(Ljava/io/DataInput;)Lorg/apache/commons/compress/archivers/sevenz/Folder;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readUnpackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readPackInfo(Ljava/io/DataInput;Lorg/apache/commons/compress/archivers/sevenz/Archive;)V",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:readHeaders([B)Lorg/apache/commons/compress/archivers/sevenz/Archive;",
                    "org.apache.commons.compress.archivers.sevenz.SevenZFile:<init>(Ljava/io/File;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder:decode(Ljava/io/InputStream;Lorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;"
                ]
            }
        },
        "12": {
            "0": {
                "method_ids": [
                    3,
                    2,
                    8,
                    1,
                    9,
                    10,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getRecord()[B",
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctalOrBinary([BII)J",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;"
                ]
            }
        },
        "15": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getName()Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:<init>(Ljava/lang/String;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "41": {
            "0": {
                "method_ids": [
                    11,
                    12,
                    13,
                    0,
                    1,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFirstLocalFileHeader([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFully([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes()[B",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getBytes(J)[B",
                    "org.apache.commons.compress.archivers.zip.ZipLong:getValue([BI)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            },
            "1": {
                "method_ids": [
                    80,
                    119,
                    98,
                    81
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readDataDescriptor()V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFirstLocalFileHeader([B)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
                ]
            }
        },
        "46": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyJavaTime(Ljava/util/Date;)V",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:dateToZipLong(Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;",
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:setModifyTime(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:unixTimeToZipLong(J)Lorg/apache/commons/compress/archivers/zip/ZipLong;"
                ]
            }
        },
        "14": {
            "0": {
                "method_ids": [
                    12,
                    7,
                    6,
                    5,
                    0,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:parseTarHeader([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:<init>([B)V",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:evaluateType([B)I",
                    "org.apache.commons.compress.archivers.tar.TarUtils:exceptionMessage([BIIIB)Ljava/lang/String;",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isGNULongNameEntry()Z",
                    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:isPaxHeader()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.tar.TarUtils:parseOctal([BII)J"
                ]
            }
        },
        "13": {
            "0": {
                "method_ids": [
                    69,
                    7,
                    1,
                    3,
                    2,
                    5,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getUnicodeName()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryData()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:assembleData()V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getLocalFileDataData()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getNameCRC32()J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            },
            "1": {
                "method_ids": [
                    7,
                    1,
                    4,
                    3,
                    5,
                    0,
                    17,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:parseFromLocalFileData([BII)V",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getUnicodeName()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort;",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getCentralDirectoryData()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getLocalFileDataData()[B",
                    "org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField:getNameCRC32()J",
                    "org.apache.commons.compress.archivers.zip.ZipFile:getEntry(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:setNameAndCommentFromExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setName(Ljava/lang/String;)V"
                ]
            }
        },
        "25": {
            "0": {
                "method_ids": [
                    0,
                    47,
                    90,
                    44,
                    86
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readStored([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:readFully([B)V",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:close()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V"
                ]
            }
        },
        "22": {
            "0": {
                "method_ids": [
                    51,
                    53,
                    41,
                    42,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsR(I)I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:bsGetUByte()C",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read0()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartB()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read([BII)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:<init>(Ljava/io/InputStream;Z)V",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:read0()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartA()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupRandPartC()I",
                    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:setupNoRandPartC()I"
                ]
            }
        },
        "47": {
            "0": {
                "method_ids": [
                    24,
                    35,
                    34,
                    12,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:setMethod(I)V",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsMethodOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipUtil:supportsEncryptionOf(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveEntry:getMethod()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z",
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:read([BII)I"
                ]
            }
        },
        "40": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            },
            "1": {
                "method_ids": [
                    2,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J",
                    "org.apache.commons.compress.utils.BitInputStream:<init>(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V",
                    "org.apache.commons.compress.utils.BitInputStream:<clinit>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.compress.utils.BitInputStream:readBits(I)J"
                ]
            }
        }
    }
}