"Based on the analysis of the test body and stack trace, the test `testContainsNone_StringWithBadSupplementaryChars` is failing because it expected a `true` result from the `StringUtils.containsNone` method but received `false`. This indicates that there is likely an issue with how the `containsNone` method is determining whether the input string contains any of the invalid characters.\n\nThe covered methods by the failed test are:\n1. `StringUtils.containsNone(CharSequence cs, String invalidChars)`\n2. `StringUtils.containsNone(CharSequence cs, char[] searchChars)`\n\nBoth methods are responsible for checking if a given character sequence contains none of the specified invalid characters. The failure in the test suggests that there may be a problem in the logic of these methods, particularly in how they handle supplementary characters or the comparison logic.\n\n### Suspicious Methods:\n1. `StringUtils.containsNone(CharSequence cs, String invalidChars)` - This method is the entry point for the test and handles the case where the invalid characters are provided as a string.\n2. `StringUtils.containsNone(CharSequence cs, char[] searchChars)` - This method is called by the first method and contains the core logic for checking each character.\n\n### Conclusion:\nBoth methods are suspicious and should be analyzed further to identify the fault that is causing the test to fail.\n\n```json\n{\n    \"method_ids\": [0, 1]\n}\n```"