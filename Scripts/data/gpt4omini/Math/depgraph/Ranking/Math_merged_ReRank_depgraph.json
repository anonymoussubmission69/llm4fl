{
    "project_name": "Math",
    "bugs": {
        "89": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
                    "org.apache.commons.math.stat.Frequency:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V"
                ]
            }
        },
        "42": {
            "0": {
                "method_ids": [
                    2,
                    6,
                    39,
                    42,
                    4,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:dropPhase1Objective()V",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.util.Precision:compareTo(DDD)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "102": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    2,
                    0,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.stat.inference.TestUtils:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "4": {
                "method_ids": [
                    0,
                    2,
                    3,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "5": {
                "method_ids": [
                    0,
                    2,
                    3,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    2,
                    3,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "3": {
                "method_ids": [
                    1,
                    0,
                    3,
                    2,
                    4,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.TestUtils:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.TestUtils:chiSquareTest([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            }
        },
        "105": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D"
                ]
            }
        },
        "87": {
            "0": {
                "method_ids": [
                    1,
                    39,
                    0,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;"
                ]
            }
        },
        "73": {
            "0": {
                "method_ids": [
                    1,
                    8,
                    0,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifySequence(DDD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "74": {
            "0": {
                "method_ids": [
                    4,
                    1,
                    5,
                    2,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator:rescale(D)V",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector:end()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            }
        },
        "80": {
            "0": {
                "method_ids": [
                    3,
                    2,
                    4,
                    1,
                    0,
                    6,
                    8,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:eigenvaluesRange(II)[D",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:goodStep(II)I",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:flipIfWarranted(II)Z",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenVectors()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:getEigenvector(I)Lorg/apache/commons/math/linear/RealVector;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:flipIfWarranted(II)Z"
                ]
            }
        },
        "4": {
            "0": {
                "method_ids": [
                    0,
                    3,
                    1,
                    20,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/Line;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;",
                    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:getRemainingRegion()Lorg/apache/commons/math3/geometry/partitioning/Region;",
                    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:getHyperplane()Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    1,
                    7,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:getAbscissa(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D",
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;"
                ]
            }
        },
        "20": {
            "0": {
                "method_ids": [
                    54,
                    53,
                    4,
                    2,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repairAndDecode([D)[D"
                ]
            }
        },
        "27": {
            "0": {
                "method_ids": [
                    0,
                    3,
                    1,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:percentageValue()D",
                    "org.apache.commons.math3.fraction.Fraction:doubleValue()D",
                    "org.apache.commons.math3.fraction.Fraction:multiply(I)Lorg/apache/commons/math3/fraction/Fraction;",
                    "org.apache.commons.math3.fraction.Fraction:<init>(II)V",
                    "org.apache.commons.math3.util.ArithmeticUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:percentageValue()D"
                ]
            }
        },
        "18": {
            "0": {
                "method_ids": [
                    54,
                    4,
                    55,
                    1,
                    0,
                    2,
                    3,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:isFeasible([D)Z"
                ]
            }
        },
        "11": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    1,
                    3,
                    21,
                    29,
                    26,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:density([D)D",
                    "org.apache.commons.math3.distribution.NormalDistribution:density(D)D",
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:getExponentTerm([D)D",
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;[D[[D)V",
                    "org.apache.commons.math3.linear.EigenDecomposition:getDeterminant()D",
                    "org.apache.commons.math3.linear.EigenDecomposition:getRealEigenvalues()[D",
                    "org.apache.commons.math3.linear.EigenDecomposition:getSolver()Lorg/apache/commons/math3/linear/DecompositionSolver;",
                    "org.apache.commons.math3.linear.EigenDecomposition:hasComplexEigenvalues()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:density([D)D"
                ]
            }
        },
        "16": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    5,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math3.util.FastMath:exp(D)D",
                    "org.apache.commons.math3.util.FastMath:max(DD)D",
                    "org.apache.commons.math3.util.FastMath:ulp(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:sinh(D)D"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    4,
                    2,
                    1,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math3.util.FastMath:exp(D)D",
                    "org.apache.commons.math3.util.FastMath:ulp(D)D",
                    "org.apache.commons.math3.util.FastMath:max(DD)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:sinh(D)D"
                ]
            }
        },
        "29": {
            "0": {
                "method_ids": [
                    0,
                    3,
                    2,
                    5,
                    23,
                    1,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.linear.RealVector:checkVectorDimensions(I)V",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;",
                    "org.apache.commons.math3.linear.RealVector:checkIndex(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    2,
                    3,
                    5,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.linear.RealVector:checkIndex(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    2,
                    3,
                    5,
                    23,
                    4,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:setEntry(ID)V",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.linear.RealVector:checkVectorDimensions(I)V",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getDimension()I",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            }
        },
        "81": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    3,
                    1,
                    4,
                    5,
                    7,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:goodStep(II)I",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:eigenvaluesRange(II)[D",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:dqd(II)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:countEigenValues(DII)I",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:updateSigma(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeGershgorinCircles()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V"
                ]
            }
        },
        "5": {
            "0": {
                "method_ids": [
                    0,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math3.complex.Complex:reciprocal()Lorg/apache/commons/math3/complex/Complex;",
                    "org.apache.commons.math3.complex.Complex:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.complex.Complex:reciprocal()Lorg/apache/commons/math3/complex/Complex;"
                ]
            }
        },
        "75": {
            "0": {
                "method_ids": [
                    2,
                    4,
                    1,
                    6,
                    9,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D",
                    "org.apache.commons.math.stat.Frequency:getCumPct(Ljava/lang/Comparable;)D",
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D",
                    "org.apache.commons.math.stat.Frequency:getSumFreq()J",
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Comparable;)V",
                    "org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D"
                ]
            }
        },
        "72": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    4,
                    9,
                    8,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifySequence(DDD)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "86": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    9,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V",
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:getL()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:getLT()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
                    "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    4,
                    5,
                    1,
                    2,
                    3,
                    10,
                    9,
                    8,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V",
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
                    "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
                    "org.apache.commons.math.linear.DenseRealMatrix:<init>(II[[DZ)V",
                    "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.DenseRealMatrix:<init>([[D)V",
                    "org.apache.commons.math.linear.DenseRealMatrix:getRowDimension()I",
                    "org.apache.commons.math.linear.DenseRealMatrix:getColumnDimension()I",
                    "org.apache.commons.math.linear.DenseRealMatrix:blockHeight(I)I",
                    "org.apache.commons.math.linear.DenseRealMatrix:blockWidth(I)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V"
                ]
            }
        },
        "2": {
            "0": {
                "method_ids": [
                    12,
                    10,
                    0,
                    1,
                    3,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:sample()I",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:calculateNumericalVariance()D",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalVariance()D",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportUpperBound()I",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportLowerBound()I",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalMean()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalMean()D"
                ]
            }
        },
        "88": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    3,
                    2,
                    4,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()V",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:normalize(Lorg/apache/commons/math/optimization/linear/LinearConstraint;)Lorg/apache/commons/math/optimization/linear/LinearConstraint;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getNormalizedConstraints()Ljava/util/List;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "103": {
            "0": {
                "method_ids": [
                    10,
                    0,
                    6,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.special.Erf:erf(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:setStandardDeviation(D)V",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:setMean(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D"
                ]
            }
        },
        "43": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3,
                    9,
                    34
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DDII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:getResult()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "1": {
                "method_ids": [
                    5,
                    4,
                    16,
                    1,
                    0,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getGeometricMean()D",
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:increment(D)V",
                    "org.apache.commons.math.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math.stat.descriptive.moment.GeometricMean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:checkEmpty()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "4": {
                "method_ids": [
                    1,
                    0,
                    4,
                    17,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:increment(D)V",
                    "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DIIZ)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "5": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3,
                    9,
                    10,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DDII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getVariance()D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:clear()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    1,
                    5,
                    4,
                    22,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getMean()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([DIIZ)Z",
                    "org.apache.commons.math.stat.descriptive.moment.FirstMoment:increment(D)V",
                    "org.apache.commons.math.stat.descriptive.moment.SecondMoment:increment(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "3": {
                "method_ids": [
                    28,
                    4,
                    5,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.GeometricMean:getResult()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getGeometricMean()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math.stat.descriptive.moment.GeometricMean:evaluate([DII)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            }
        },
        "17": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    8,
                    23,
                    28
                ],
                "method_signatures": [
                    "org.apache.commons.math3.dfp.Dfp:multiply(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.Dfp:multiplyFast(I)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.Dfp:isNaN()Z",
                    "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.dfp.Dfp:multiply(I)Lorg/apache/commons/math3/dfp/Dfp;"
                ]
            }
        },
        "28": {
            "0": {
                "method_ids": [
                    22,
                    8,
                    7,
                    36,
                    0,
                    2,
                    24,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotRow(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotRow(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;"
                ]
            }
        },
        "10": {
            "0": {
                "method_ids": [
                    1,
                    4,
                    5,
                    2,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:atan2(Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;",
                    "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan2([DI[DI[DI)V",
                    "org.apache.commons.math3.util.FastMath:atan(D)D",
                    "org.apache.commons.math3.util.FastMath:pow(DI)D",
                    "org.apache.commons.math3.util.FastMath:sqrt(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan2([DI[DI[DI)V"
                ]
            }
        },
        "26": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    10,
                    11,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDI)V",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D",
                    "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V"
                ]
            }
        },
        "19": {
            "0": {
                "method_ids": [
                    0,
                    12,
                    13,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V"
                ]
            }
        },
        "21": {
            "0": {
                "method_ids": [
                    0,
                    11,
                    18,
                    7,
                    3,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:subtract(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:getNorm()D",
                    "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V"
                ]
            },
            "1": {
                "method_ids": [
                    11,
                    18,
                    0,
                    1,
                    7,
                    2,
                    12,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:subtract(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:getNorm()D",
                    "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
                    "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V"
                ]
            }
        },
        "32": {
            "0": {
                "method_ids": [
                    203,
                    0,
                    190,
                    76,
                    78,
                    32,
                    202
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:getAttribute()Ljava/lang/Object;",
                    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:computeGeometricalProperties()V",
                    "org.apache.commons.math3.geometry.partitioning.AbstractRegion:checkPoint(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/partitioning/Region$Location;",
                    "org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:getSize()D",
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:insertCut(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;)Z",
                    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor:visitInternalNode(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;)V",
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:getCut()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:computeGeometricalProperties()V"
                ]
            }
        },
        "35": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "3": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            }
        },
        "95": {
            "0": {
                "method_ids": [
                    1,
                    5,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.distribution.AbstractContinuousDistribution:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math.analysis.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D",
                    "org.apache.commons.math.distribution.FDistributionImpl:getInitialDomain(D)D",
                    "org.apache.commons.math.distribution.FDistributionImpl:inverseCumulativeProbability(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.FDistributionImpl:getInitialDomain(D)D"
                ]
            }
        },
        "61": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(DDI)V",
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(D)V",
                    "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(DDI)V"
                ]
            }
        },
        "66": {
            "0": {
                "method_ids": [
                    1,
                    19,
                    14,
                    24,
                    0,
                    4,
                    12,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.ConvergingAlgorithmImpl:getIterationCount()I",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I",
                    "org.apache.commons.math.stat.descriptive.rank.Percentile:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getPercentile(D)D",
                    "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getMean()D",
                    "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "1": {
                "method_ids": [
                    2,
                    19,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getEvaluations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "2": {
                "method_ids": [
                    2,
                    0,
                    1,
                    5,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptima()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getAbsoluteAccuracy()D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getRelativeAccuracy()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "3": {
                "method_ids": [
                    0,
                    6,
                    16,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            }
        },
        "92": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D"
                ]
            }
        },
        "59": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.FastMath:max(FF)F",
                    "org.apache.commons.math.util.FastMath:min(FF)F"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.FastMath:max(FF)F"
                ]
            }
        },
        "50": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    19,
                    17,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "57": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    6,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:getNearestCluster(Ljava/util/Collection;Lorg/apache/commons/math/stat/clustering/Clusterable;)Lorg/apache/commons/math/stat/clustering/Cluster;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
                    "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:equals(Ljava/lang/Object;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;"
                ]
            }
        },
        "68": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3,
                    19,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMDirection([D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qrDecomposition()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3,
                    19,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMDirection([D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qrDecomposition()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            }
        },
        "34": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    3,
                    1,
                    5,
                    7,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;",
                    "org.apache.commons.math3.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V",
                    "org.apache.commons.math3.genetics.BinaryChromosome:randomBinaryRepresentation(I)Ljava/util/List;",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V",
                    "org.apache.commons.math3.genetics.BinaryChromosome:checkValidity(Ljava/util/List;)V",
                    "org.apache.commons.math3.genetics.AbstractListChromosome:<init>(Ljava/util/List;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;"
                ]
            }
        },
        "33": {
            "0": {
                "method_ids": [
                    4,
                    51,
                    50,
                    7,
                    5,
                    3,
                    0,
                    1,
                    2,
                    42
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:createTableau(Z)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.util.Precision:compareTo(DDI)I",
                    "org.apache.commons.math3.util.Precision:compareTo(DDD)I",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V"
                ]
            }
        },
        "56": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    4,
                    2,
                    3,
                    8,
                    5,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MultidimensionalCounter:getCounts(I)[I",
                    "org.apache.commons.math.util.MultidimensionalCounter:getCount([I)I",
                    "org.apache.commons.math.util.MultidimensionalCounter:<init>([I)V",
                    "org.apache.commons.math.util.MultidimensionalCounter$Iterator:next()Ljava/lang/Integer;",
                    "org.apache.commons.math.util.MultidimensionalCounter$Iterator:hasNext()Z",
                    "org.apache.commons.math.util.MultidimensionalCounter$Iterator:getCount(I)I",
                    "org.apache.commons.math.util.MultidimensionalCounter:getSize()I",
                    "org.apache.commons.math.util.MultidimensionalCounter:iterator()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MultidimensionalCounter:getCounts(I)[I"
                ]
            }
        },
        "69": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3,
                    11,
                    13,
                    14,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:computeCorrelationMatrix(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getR()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare()D",
                    "org.apache.commons.math.linear.BlockRealMatrix:getColumn(I)[D",
                    "org.apache.commons.math.linear.BlockRealMatrix:getEntry(II)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3,
                    14,
                    23,
                    11,
                    18,
                    24,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:computeCorrelationMatrix(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:checkSufficientData(Lorg/apache/commons/math/linear/RealMatrix;)V",
                    "org.apache.commons.math.linear.BlockRealMatrix:getColumn(I)[D",
                    "org.apache.commons.math.linear.BlockRealMatrix:getEntry(II)D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getR()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
                    "org.apache.commons.math.distribution.TDistributionImpl:setDegreesOfFreedom(D)V",
                    "org.apache.commons.math.distribution.TDistributionImpl:cumulativeProbability(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            }
        },
        "51": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "93": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:factorial(I)J",
                    "org.apache.commons.math.util.MathUtils:factorialLog(I)D",
                    "org.apache.commons.math.util.MathUtils:factorialDouble(I)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:factorial(I)J",
                    "org.apache.commons.math.util.MathUtils:factorialDouble(I)D",
                    "org.apache.commons.math.util.MathUtils:factorialLog(I)D"
                ]
            }
        },
        "67": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    5,
                    1,
                    22,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptima()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getResult()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getFunctionValue()D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getResult()D"
                ]
            }
        },
        "58": {
            "0": {
                "method_ids": [
                    3,
                    2,
                    19,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.fitting.GaussianFitter:fit()[D",
                    "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:basicGuess([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;)[D",
                    "org.apache.commons.math.optimization.fitting.CurveFitter:addObservedPoint(DD)V",
                    "org.apache.commons.math.optimization.fitting.GaussianFitter$ParameterGuesser:getInterpolationPointsForY([Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;IID)[Lorg/apache/commons/math/optimization/fitting/WeightedObservedPoint;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.fitting.GaussianFitter:fit()[D"
                ]
            }
        },
        "60": {
            "0": {
                "method_ids": [
                    4,
                    9,
                    0,
                    11,
                    12,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.special.Erf:erf(D)D",
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DDD)V",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D"
                ]
            }
        },
        "94": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ]
            }
        },
        "24": {
            "0": {
                "method_ids": [
                    0,
                    16,
                    1,
                    23,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math3.analysis.FunctionUtils:add([Lorg/apache/commons/math3/analysis/UnivariateFunction;)Lorg/apache/commons/math3/analysis/UnivariateFunction;",
                    "org.apache.commons.math3.analysis.function.Sin:value(D)D",
                    "org.apache.commons.math3.analysis.function.StepFunction:value(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;"
                ]
            }
        },
        "23": {
            "0": {
                "method_ids": [
                    0,
                    17,
                    18,
                    1,
                    3,
                    2,
                    4,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DDD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:best(Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;Z)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.analysis.function.StepFunction:<init>([D[D)V",
                    "org.apache.commons.math3.analysis.FunctionUtils:add([Lorg/apache/commons/math3/analysis/UnivariateFunction;)Lorg/apache/commons/math3/analysis/UnivariateFunction;",
                    "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getPoint()D",
                    "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getValue()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;"
                ]
            }
        },
        "15": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:pow(DD)D",
                    "org.apache.commons.math3.util.FastMath:log(D[D)D",
                    "org.apache.commons.math3.util.FastMath:exp(DD[D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:pow(DD)D"
                ]
            }
        },
        "9": {
            "0": {
                "method_ids": [
                    0,
                    3,
                    2,
                    4,
                    5,
                    1,
                    10,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:revert()Lorg/apache/commons/math3/geometry/euclidean/threed/Line;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:getDirection()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:negate()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:subtract(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:reset(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:toArray()[D",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNormSq()D",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math3/geometry/Vector;)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:revert()Lorg/apache/commons/math3/geometry/euclidean/threed/Line;"
                ]
            }
        },
        "79": {
            "0": {
                "method_ids": [
                    2,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:distance([I[I)D"
                ]
            }
        },
        "106": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1,
                    3,
                    9,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.ProperFractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;",
                    "org.apache.commons.math.fraction.FractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;",
                    "org.apache.commons.math.fraction.FractionFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.fraction.FractionFormat:parse(Ljava/lang/String;)Lorg/apache/commons/math/fraction/Fraction;",
                    "org.apache.commons.math.fraction.FractionFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V",
                    "org.apache.commons.math.fraction.FractionFormat:getNumeratorFormat()Ljava/text/NumberFormat;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.ProperFractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;"
                ]
            }
        },
        "46": {
            "0": {
                "method_ids": [
                    3,
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    6,
                    5,
                    9,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:abs()D",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:isInfinite()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "41": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    5,
                    6,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DDII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([D[DII)D",
                    "org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic:test([D[DII)Z",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:clear()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DDII)D"
                ]
            }
        },
        "101": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.ComplexFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.complex.ComplexFormat:parseNumber(Ljava/lang/String;Ljava/text/NumberFormat;Ljava/text/ParsePosition;)Ljava/lang/Number;",
                    "org.apache.commons.math.complex.ComplexFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    2,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.ComplexFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.complex.ComplexFormat:parseNumber(Ljava/lang/String;Ljava/text/NumberFormat;Ljava/text/ParsePosition;)Ljava/lang/Number;",
                    "org.apache.commons.math.complex.ComplexFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "48": {
            "0": {
                "method_ids": [
                    24,
                    23,
                    1,
                    0,
                    26,
                    25,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)V",
                    "org.apache.commons.math.util.Incrementor:incrementCount()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "77": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:<init>([DD)V",
                    "org.apache.commons.math.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math.linear.OpenMapRealVector:sparseIterator()Ljava/util/Iterator;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.ArrayRealVector:getL1Norm()D",
                    "org.apache.commons.math.linear.ArrayRealVector:getNorm()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D"
                ]
            }
        },
        "7": {
            "0": {
                "method_ids": [
                    0,
                    19,
                    30,
                    7,
                    71,
                    10,
                    8,
                    16,
                    14,
                    73
                ],
                "method_signatures": [
                    "org.apache.commons.math3.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math3/ode/sampling/AbstractStepInterpolator;[D[DD)D",
                    "org.apache.commons.math3.ode.events.EventState:reset(D[D)Z",
                    "org.apache.commons.math3.ode.events.EventState:stepAccepted(D[D)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:integrate(Lorg/apache/commons/math3/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math3.ode.ExpandableStatefulODE:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:sanityChecks(Lorg/apache/commons/math3/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:addEventHandler(Lorg/apache/commons/math3/ode/events/EventHandler;DDILorg/apache/commons/math3/analysis/solvers/UnivariateSolver;)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:addStepHandler(Lorg/apache/commons/math3/ode/sampling/StepHandler;)V",
                    "org.apache.commons.math3.ode.ExpandableStatefulODE:getCompleteState()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math3/ode/sampling/AbstractStepInterpolator;[D[DD)D"
                ]
            }
        },
        "83": {
            "0": {
                "method_ids": [
                    0,
                    36,
                    1,
                    40,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(IZ)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "84": {
            "0": {
                "method_ids": [
                    12,
                    0,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:incrementIterationsCounter()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V"
                ]
            },
            "1": {
                "method_ids": [
                    15,
                    0,
                    1,
                    22,
                    21,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V",
                    "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.SimpleScalarValueChecker:converged(ILorg/apache/commons/math/optimization/RealPointValuePair;Lorg/apache/commons/math/optimization/RealPointValuePair;)Z",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:getEvaluations()I",
                    "org.apache.commons.math.optimization.RealPointValuePair:getValue()D",
                    "org.apache.commons.math.optimization.RealPointValuePair:getPoint()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V"
                ]
            }
        },
        "70": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    5,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(DD)D",
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "13": {
            "0": {
                "method_ids": [
                    6,
                    37,
                    40,
                    25,
                    4,
                    0,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.EigenDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.linear.TriDiagonalTransformer:<init>(Lorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.linear.DiagonalMatrix:getData()[[D",
                    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:optimize(ILorg/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction;[D[D[D)Lorg/apache/commons/math3/optimization/PointVectorValuePair;",
                    "org.apache.commons.math3.optimization.fitting.PolynomialFitter:fit([D)[D",
                    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D",
                    "org.apache.commons.math3.util.FastMath:max(DD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ]
            }
        },
        "14": {
            "0": {
                "method_ids": [
                    25,
                    26,
                    0,
                    1,
                    2,
                    30
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.BlockRealMatrix:<init>(II)V",
                    "org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
                    "org.apache.commons.math3.fitting.PolynomialFitter:fit([D)[D",
                    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:evaluate([DD)D",
                    "org.apache.commons.math3.analysis.polynomials.PolynomialFunction:value(D)D",
                    "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ]
            }
        },
        "22": {
            "0": {
                "method_ids": [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.FDistribution:getSupportLowerBound()D",
                    "org.apache.commons.math3.distribution.FDistribution:density(D)D",
                    "org.apache.commons.math3.distribution.FDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
                    "org.apache.commons.math3.distribution.FDistribution:<init>(DD)V",
                    "org.apache.commons.math3.distribution.FDistribution:<init>(DDD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:density(D)D",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:getSupportUpperBound()D",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(DDD)V",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z"
                ]
            }
        },
        "25": {
            "0": {
                "method_ids": [
                    7,
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guess()[D",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessPhi()V",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessAOmega()V",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:sortObservations()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessAOmega()V"
                ]
            }
        },
        "71": {
            "0": {
                "method_ids": [
                    0,
                    25,
                    36,
                    47,
                    6,
                    22,
                    29,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:estimateError([[D[D[DD)D",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:sanityChecks(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:setInitialStepSize(D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:addEndTimeChecker(DDLorg/apache/commons/math/ode/events/CombinedEventsManager;)Lorg/apache/commons/math/ode/events/CombinedEventsManager;",
                    "org.apache.commons.math.ode.events.CombinedEventsManager:stepAccepted(D[D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:eventOccurred(D[DZ)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    31,
                    40,
                    16,
                    22,
                    11,
                    7,
                    12,
                    30,
                    43
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:sanityChecks(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)V",
                    "org.apache.commons.math.ode.events.EventState:stepAccepted(D[D)V",
                    "org.apache.commons.math.ode.events.CombinedEventsManager:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:g(D[D)D",
                    "org.apache.commons.math.ode.AbstractIntegrator$EndTimeChecker:eventOccurred(D[DZ)I",
                    "org.apache.commons.math.ode.events.EventState:stop()Z",
                    "org.apache.commons.math.ode.AbstractIntegrator:setEquations(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:resetEvaluations()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            }
        },
        "1": {
            "0": {
                "method_ids": [
                    0,
                    3,
                    1,
                    2,
                    9,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.Fraction:<init>(DI)V",
                    "org.apache.commons.math3.fraction.Fraction:getDenominator()I",
                    "org.apache.commons.math3.fraction.Fraction:getNumerator()I",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DI)V",
                    "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V"
                ]
            }
        },
        "85": {
            "0": {
                "method_ids": [
                    6,
                    10,
                    0,
                    3,
                    4,
                    1,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math.distribution.NormalDistributionImpl:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:getDomainLowerBound(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:getDomainUpperBound(D)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:setStandardDeviation(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D"
                ]
            }
        },
        "49": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    19,
                    3,
                    2,
                    9,
                    10,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:setEntry(ID)V",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:advance()V",
                    "org.apache.commons.math.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math.linear.OpenMapRealVector:getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;",
                    "org.apache.commons.math.linear.AbstractRealVector:checkVectorDimensions(I)V",
                    "org.apache.commons.math.linear.AbstractRealVector:checkIndex(I)V",
                    "org.apache.commons.math.MathRuntimeException:createConcurrentModificationException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeDivide([D)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply([D)Lorg/apache/commons/math/linear/OpenMapRealVector;"
                ]
            }
        },
        "6": {
            "21": {
                "method_ids": [
                    0,
                    5,
                    49,
                    26,
                    20,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovarianceDiagonalOnly(ZLorg/apache/commons/math3/linear/RealMatrix;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "0": {
                "method_ids": [
                    57,
                    0,
                    60,
                    83,
                    7,
                    61,
                    64
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeResiduals([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:computeObjectiveValue([D)[D",
                    "org.apache.commons.math3.optim.SimpleVectorValueChecker:converged(ILorg/apache/commons/math3/optim/PointVectorValuePair;Lorg/apache/commons/math3/optim/PointVectorValuePair;)Z",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getTarget()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "17": {
                "method_ids": [
                    0,
                    1,
                    32,
                    30,
                    55,
                    26,
                    41
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "16": {
                "method_ids": [
                    0,
                    1,
                    33,
                    31,
                    56,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    3,
                    2,
                    55,
                    59,
                    99,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:qrDecomposition(Lorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:determineLMDirection([D[D[D[D)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeCost([D)D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeResiduals([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:getWeightSquareRoot()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:checkParameters()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "20": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    28,
                    56
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "11": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "27": {
                "method_ids": [
                    0,
                    10,
                    1,
                    24,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:newPointAndDirection([D[DD)[[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "6": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26,
                    19,
                    40,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:selectColumns(Lorg/apache/commons/math3/linear/RealMatrix;[I)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:copyColumn(Lorg/apache/commons/math3/linear/RealMatrix;ILorg/apache/commons/math3/linear/RealMatrix;I)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:randn1(II)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "7": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    28,
                    56,
                    26,
                    42,
                    36,
                    85
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:getStartPoint()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "26": {
                "method_ids": [
                    0,
                    1,
                    33,
                    56,
                    90
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "10": {
                "method_ids": [
                    61,
                    44,
                    0,
                    12,
                    4,
                    1,
                    27,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "13": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "8": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "4": {
                "method_ids": [
                    0,
                    7,
                    45,
                    27,
                    1,
                    4,
                    3,
                    50
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.PointValuePair:getPoint()[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "25": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "24": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "5": {
                "method_ids": [
                    0,
                    7,
                    12,
                    4,
                    1,
                    27
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "12": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    42,
                    26,
                    19,
                    40,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:selectColumns(Lorg/apache/commons/math3/linear/RealMatrix;[I)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:copyColumn(Lorg/apache/commons/math3/linear/RealMatrix;ILorg/apache/commons/math3/linear/RealMatrix;I)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:randn1(II)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "9": {
                "method_ids": [
                    0,
                    12,
                    44,
                    49,
                    1,
                    4,
                    7,
                    50,
                    46,
                    51
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:evaluateNewSimplex(Lorg/apache/commons/math3/analysis/MultivariateFunction;[Lorg/apache/commons/math3/optim/PointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:getPoint(I)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.PointValuePair:getPointRef()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "19": {
                "method_ids": [
                    0,
                    1,
                    28,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:findUpperBound(Lorg/apache/commons/math3/analysis/UnivariateFunction;DD)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    1,
                    32,
                    30,
                    55,
                    41
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "23": {
                "method_ids": [
                    0,
                    7,
                    61,
                    1,
                    44
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "15": {
                "method_ids": [
                    0,
                    7,
                    44,
                    61,
                    1,
                    2,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "14": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "22": {
                "method_ids": [
                    7,
                    0,
                    27,
                    45,
                    50,
                    1,
                    4,
                    2,
                    3,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.PointValuePair:getPoint()[D",
                    "org.apache.commons.math3.optim.PointValuePair:<init>([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "18": {
                "method_ids": [
                    7,
                    0,
                    27,
                    45,
                    50,
                    1,
                    4,
                    2,
                    3,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex:evaluate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.PointValuePair:getPoint()[D",
                    "org.apache.commons.math3.optim.PointValuePair:<init>([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "3": {
                "method_ids": [
                    0,
                    1,
                    33,
                    7,
                    56
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateCovariance(ZLorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;[ILorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:value([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            }
        },
        "82": {
            "0": {
                "method_ids": [
                    5,
                    3,
                    0,
                    4,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;"
                ]
            }
        },
        "76": {
            "0": {
                "method_ids": [
                    9,
                    2,
                    1,
                    39,
                    30,
                    35,
                    3,
                    55
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.BiDiagonalTransformer:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getS()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getVT()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:multiply(Lorg/apache/commons/math/linear/Array2DRowRealMatrix;)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:subtract(Lorg/apache/commons/math/linear/Array2DRowRealMatrix;)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
                    "org.apache.commons.math.linear.AbstractRealMatrix:getNorm()D",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;I)V",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:getData()[[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    41,
                    4,
                    3,
                    2,
                    33,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:multiply(Lorg/apache/commons/math/linear/Array2DRowRealMatrix;)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getS()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getSingularValues()[D",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getVT()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:subtract(Lorg/apache/commons/math/linear/Array2DRowRealMatrix;)Lorg/apache/commons/math/linear/Array2DRowRealMatrix;",
                    "org.apache.commons.math.linear.AbstractRealMatrix:getNorm()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            }
        },
        "100": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    1,
                    10,
                    2,
                    19,
                    23,
                    5,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
                    "org.apache.commons.math.estimation.AbstractEstimator:updateJacobian()V",
                    "org.apache.commons.math.estimation.GaussNewtonEstimator:estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
                    "org.apache.commons.math.estimation.AbstractEstimator:initializeEstimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
                    "org.apache.commons.math.estimation.AbstractEstimator:getRMS(Lorg/apache/commons/math/estimation/EstimationProblem;)D",
                    "org.apache.commons.math.estimation.SimpleEstimationProblem:getAllParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
                    "org.apache.commons.math.estimation.SimpleEstimationProblem:getUnboundParameters()[Lorg/apache/commons/math/estimation/EstimatedParameter;",
                    "org.apache.commons.math.estimation.WeightedMeasurement:isIgnored()Z",
                    "org.apache.commons.math.estimation.WeightedMeasurement:getWeight()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
                    "org.apache.commons.math.estimation.AbstractEstimator:guessParametersErrors(Lorg/apache/commons/math/estimation/EstimationProblem;)[D"
                ]
            }
        },
        "40": {
            "0": {
                "method_ids": [
                    22,
                    21,
                    1,
                    0,
                    2,
                    13,
                    17,
                    19,
                    20,
                    23
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:solve(ILorg/apache/commons/math/analysis/UnivariateFunction;DDDLorg/apache/commons/math/analysis/solvers/AllowedSolution;)D",
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:guessX(D[D[DII)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:verifySequence(DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:getFunctionValueAccuracy()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:getMin()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:getMax()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateFunction;DDD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:doSolve()D"
                ]
            }
        },
        "78": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    1,
                    5,
                    7,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDDDD)D",
                    "org.apache.commons.math.ode.events.EventState:stepAccepted(D[D)V",
                    "org.apache.commons.math.ode.events.EventState:reinitializeBegin(D[D)V",
                    "org.apache.commons.math.ode.events.EventState:getEventTime()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z"
                ]
            }
        },
        "8": {
            "0": {
                "method_ids": [
                    1,
                    2,
                    0,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;",
                    "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;Ljava/util/List;)V",
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample()Ljava/lang/Object;",
                    "org.apache.commons.math3.util.Pair:<init>(Ljava/lang/Object;Ljava/lang/Object;)V",
                    "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Ljava/util/List;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;"
                ]
            }
        },
        "47": {
            "0": {
                "method_ids": [
                    5,
                    1,
                    0,
                    3,
                    4,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
                    "org.apache.commons.math.complex.Complex:getReal()D",
                    "org.apache.commons.math.complex.Complex:getImaginary()D",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    5,
                    4,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:abs()D",
                    "org.apache.commons.math.complex.Complex:isInfinite()Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "65": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1,
                    5,
                    6,
                    7,
                    8,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:guessParametersErrors()[D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getCovariances()[[D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getChiSquare()D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getChiSquare()D"
                ]
            }
        },
        "91": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I",
                    "org.apache.commons.math.fraction.Fraction:doubleValue()D",
                    "org.apache.commons.math.fraction.Fraction:<init>(II)V",
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I"
                ]
            }
        },
        "96": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    5,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:hashCode()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "62": {
            "0": {
                "method_ids": [
                    24,
                    0,
                    21,
                    1,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getPoint()D",
                    "org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair:getValue()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;"
                ]
            }
        },
        "54": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    4,
                    6,
                    12,
                    13,
                    15,
                    19,
                    21,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.math.dfp.Dfp:divide(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:toDouble()D",
                    "org.apache.commons.math.dfp.Dfp:add(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:multiply(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:sqrt()Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:log10()I",
                    "org.apache.commons.math.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math/dfp/Dfp;Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.DfpField:newDfp(BB)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:isInfinite()Z",
                    "org.apache.commons.math.dfp.Dfp:subtract(Lorg/apache/commons/math/dfp/Dfp;)Lorg/apache/commons/math/dfp/Dfp;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;D)V",
                    "org.apache.commons.math.dfp.Dfp:toDouble()D"
                ]
            }
        },
        "53": {
            "0": {
                "method_ids": [
                    0,
                    5,
                    1,
                    2,
                    3,
                    4,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:getReal()D",
                    "org.apache.commons.math.complex.Complex:getImaginary()D",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "98": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    3,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.BigMatrixImpl:<init>([[Ljava/math/BigDecimal;Z)V",
                    "org.apache.commons.math.linear.BigMatrixImpl:getColumnDimension()I",
                    "org.apache.commons.math.linear.BigMatrixImpl:getRowDimension()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D",
                    "org.apache.commons.math.linear.RealMatrixImpl:<init>([[DZ)V",
                    "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
                    "org.apache.commons.math.linear.RealMatrixImpl:getRowDimension()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D"
                ]
            }
        },
        "38": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    3,
                    5,
                    4,
                    16,
                    14,
                    10,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:prelim([D[D)V",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:bobyqb([D[D)D",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:bobyqa([D[D)D",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:setup([D[D)V",
                    "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:getEvaluations()I",
                    "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:getLowerBound()[D",
                    "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:getUpperBound()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:prelim([D[D)V"
                ]
            }
        },
        "36": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F",
                    "org.apache.commons.math.fraction.BigFraction:<init>(Ljava/math/BigInteger;Ljava/math/BigInteger;)V",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:<init>(Ljava/math/BigInteger;Ljava/math/BigInteger;)V",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F"
                ]
            }
        },
        "31": {
            "0": {
                "method_ids": [
                    0,
                    7,
                    15,
                    10,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
                    "org.apache.commons.math3.distribution.BinomialDistribution:cumulativeProbability(I)D",
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
                    "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
                    "org.apache.commons.math3.special.Beta:regularizedBeta(DDDDI)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D"
                ]
            },
            "1": {
                "method_ids": [
                    18,
                    20,
                    0,
                    19,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.AbstractRealDistribution$1:value(D)D",
                    "org.apache.commons.math3.distribution.AbstractRealDistribution:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D",
                    "org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils:solve(Lorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D",
                    "org.apache.commons.math3.analysis.solvers.BrentSolver:doSolve()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D"
                ]
            }
        },
        "52": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    5,
                    7,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
                    "org.apache.commons.math.geometry.euclidean.threed.Rotation:getQ0()D",
                    "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getNormSq()D",
                    "org.apache.commons.math.geometry.euclidean.threed.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector;)Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math/geometry/Vector;)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V"
                ]
            }
        },
        "99": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:lcm(II)I",
                    "org.apache.commons.math.util.MathUtils:mulAndCheck(II)I",
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I",
                    "org.apache.commons.math.util.MathUtils:lcm(II)I"
                ]
            }
        },
        "55": {
            "0": {
                "method_ids": [
                    4,
                    0,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.geometry.Vector3D:<init>(DDD)V",
                    "org.apache.commons.math.geometry.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector3D;Lorg/apache/commons/math/geometry/Vector3D;)Lorg/apache/commons/math/geometry/Vector3D;",
                    "org.apache.commons.math.geometry.Vector3D:getX()D",
                    "org.apache.commons.math.geometry.Vector3D:getY()D",
                    "org.apache.commons.math.geometry.Vector3D:getZ()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.geometry.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector3D;Lorg/apache/commons/math/geometry/Vector3D;)Lorg/apache/commons/math/geometry/Vector3D;"
                ]
            }
        },
        "63": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:equals([D[D)Z",
                    "org.apache.commons.math.util.MathUtils:equals(DD)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:equals(DD)Z"
                ]
            }
        },
        "97": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.BrentSolver:solve(DD)D",
                    "org.apache.commons.math.analysis.BrentSolver:solve(DDDDDD)D",
                    "org.apache.commons.math.analysis.UnivariateRealSolverImpl:verifyInterval(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.BrentSolver:solve(DD)D"
                ]
            }
        },
        "90": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
                    "org.apache.commons.math.stat.Frequency:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V"
                ]
            }
        },
        "64": {
            "0": {
                "method_ids": [
                    1,
                    17,
                    0,
                    2,
                    3,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMDirection([D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qrDecomposition()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0,
                    2,
                    3,
                    17
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMDirection([D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:qrDecomposition()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            }
        },
        "30": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    0,
                    5,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyUTest([D[D)D",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyU([D[D)D",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:calculateAsymptoticPValue(DII)D",
                    "org.apache.commons.math3.stat.ranking.NaturalRanking:rank([D)[D",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:ensureDataConformance([D[D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:calculateAsymptoticPValue(DII)D"
                ]
            }
        },
        "37": {
            "0": {
                "method_ids": [
                    0,
                    15,
                    1,
                    2,
                    3,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:valueOf(DD)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sinh(D)D",
                    "org.apache.commons.math.util.FastMath:cosh(D)D",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    0,
                    1,
                    12,
                    2,
                    3,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:valueOf(DD)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.util.FastMath:cos(D)D",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    1,
                    2,
                    6,
                    14
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sinh(D)D",
                    "org.apache.commons.math.util.FastMath:cosh(D)D",
                    "org.apache.commons.math.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "3": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sinh(D)D",
                    "org.apache.commons.math.util.FastMath:cosh(D)D",
                    "org.apache.commons.math.util.FastMath:cos(D)D",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.util.FastMath:exp(DD[D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "39": {
            "0": {
                "method_ids": [
                    0,
                    20,
                    1,
                    26,
                    32,
                    38,
                    35,
                    192
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:initializeStep(ZI[DD[D[D[D[D)D",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:setStepSizeControl(DDDD)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:sanityChecks(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:setEquations(Lorg/apache/commons/math/ode/ExpandableStatefulODE;)V",
                    "org.apache.commons.math.ode.ExpandableStatefulODE:getCompleteState()[D",
                    "org.apache.commons.math.ode.ExpandableStatefulODE:getTotalDimension()I",
                    "Unknown Signature"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V"
                ]
            }
        }
    }
}