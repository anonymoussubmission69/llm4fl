{
    "project_name": "Math",
    "bugs": {
        "89": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
                    "org.apache.commons.math.stat.Frequency:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V"
                ]
            }
        },
        "42": {
            "0": {
                "method_ids": [
                    0,
                    64,
                    32,
                    25
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.util.Precision:compareTo(DDD)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "102": {
            "0": {
                "method_ids": [
                    24,
                    4,
                    2,
                    19,
                    16,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DD)D",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "1": {
                "method_ids": [
                    35,
                    1,
                    6,
                    14,
                    16,
                    28,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.TestUtils:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "4": {
                "method_ids": [
                    27,
                    4,
                    1,
                    22,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "5": {
                "method_ids": [
                    21,
                    3,
                    4,
                    17,
                    11,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "2": {
                "method_ids": [
                    23,
                    4,
                    5,
                    18,
                    12,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:setDegreesOfFreedom(D)V",
                    "org.apache.commons.math.distribution.ChiSquaredDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isPositive([D)Z",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:isNonNegative([J)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            },
            "3": {
                "method_ids": [
                    25,
                    3,
                    1,
                    6,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D",
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquareTest([D[J)D",
                    "org.apache.commons.math.distribution.GammaDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
                    "org.apache.commons.math.stat.inference.TestUtils:chiSquare([D[J)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.inference.ChiSquareTestImpl:chiSquare([D[J)D"
                ]
            }
        },
        "105": {
            "0": {
                "method_ids": [
                    1,
                    2,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D"
                ]
            }
        },
        "45": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1,
                    5,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.OpenMapRealMatrix:<init>(II)V",
                    "org.apache.commons.math.linear.AbstractRealMatrix:<init>(II)V",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(ID)V",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:computeCapacity(I)I",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:<init>(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.OpenMapRealMatrix:<init>(II)V"
                ]
            }
        },
        "87": {
            "0": {
                "method_ids": [
                    47,
                    23,
                    34,
                    1,
                    41,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
                    "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(I)Ljava/lang/Integer;"
                ]
            }
        },
        "3": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.MathArrays:linearCombination([D[D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.MathArrays:linearCombination([D[D)D"
                ]
            }
        },
        "73": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    4,
                    5,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifySequence(DDD)V",
                    "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "74": {
            "0": {
                "method_ids": [
                    49,
                    15,
                    36,
                    94,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.sampling.NordsieckStepInterpolator:computeInterpolatedStateAndDerivatives(DD)V",
                    "org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer:updateHighOrderDerivativesPhase2([D[DLorg/apache/commons/math/linear/Array2DRowRealMatrix;)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:getMaxStep()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            }
        },
        "80": {
            "0": {
                "method_ids": [
                    40,
                    37,
                    41,
                    5,
                    15,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:decompose()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:getEigenvector(I)Lorg/apache/commons/math/linear/RealVector;",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeGershgorinCircles()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
                    "org.apache.commons.math.linear.ArrayRealVector:dotProduct(Lorg/apache/commons/math/linear/RealVector;)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:flipIfWarranted(II)Z"
                ]
            }
        },
        "4": {
            "0": {
                "method_ids": [
                    12,
                    2,
                    6,
                    32
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/Line;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)Lorg/apache/commons/math3/geometry/euclidean/oned/IntervalsSet;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;"
                ]
            },
            "1": {
                "method_ids": [
                    22,
                    30,
                    19,
                    23,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:toSubSpace(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:getAbscissa(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:reset(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/threed/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;Z)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;"
                ]
            }
        },
        "20": {
            "0": {
                "method_ids": [
                    27,
                    86,
                    55,
                    85,
                    120,
                    8,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D[D[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:randn1(II)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:repairAndDecode([D)[D"
                ]
            }
        },
        "27": {
            "0": {
                "method_ids": [
                    3,
                    4,
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:percentageValue()D",
                    "org.apache.commons.math3.fraction.Fraction:doubleValue()D",
                    "org.apache.commons.math3.fraction.Fraction:multiply(I)Lorg/apache/commons/math3/fraction/Fraction;",
                    "org.apache.commons.math3.fraction.Fraction:<init>(II)V",
                    "org.apache.commons.math3.util.ArithmeticUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:percentageValue()D"
                ]
            }
        },
        "18": {
            "0": {
                "method_ids": [
                    81,
                    118,
                    7,
                    52,
                    3,
                    4,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:randn1(II)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:encode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:decode([D)[D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:isFeasible([D)Z"
                ]
            }
        },
        "11": {
            "0": {
                "method_ids": [
                    69,
                    75,
                    38,
                    19,
                    46,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:density([D)D",
                    "org.apache.commons.math3.distribution.NormalDistribution:density(D)D",
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:<init>([D[[D)V",
                    "org.apache.commons.math3.distribution.NormalDistribution:<init>(DDD)V",
                    "org.apache.commons.math3.linear.EigenDecomposition$Solver:getInverse()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.EigenDecomposition:getRealEigenvalues()[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.MultivariateNormalDistribution:density([D)D"
                ]
            }
        },
        "16": {
            "0": {
                "method_ids": [
                    4,
                    19,
                    9,
                    14,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:exp(D)D",
                    "org.apache.commons.math3.util.FastMath:ulp(D)D",
                    "org.apache.commons.math3.util.FastMath:max(DD)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:sinh(D)D"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    13,
                    1,
                    2,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:ulp(D)D",
                    "org.apache.commons.math3.util.FastMath:max(DD)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D",
                    "org.apache.commons.math3.util.FastMath:max(II)I",
                    "org.apache.commons.math3.util.FastMath:exp(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:cosh(D)D",
                    "org.apache.commons.math3.util.FastMath:sinh(D)D"
                ]
            }
        },
        "29": {
            "0": {
                "method_ids": [
                    25,
                    21,
                    14,
                    18,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.util.FastMath:ceil(D)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:<init>([D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            },
            "1": {
                "method_ids": [
                    31,
                    18,
                    14,
                    1,
                    21,
                    19
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:getEntry(I)D",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.util.FastMath:ceil(D)D",
                    "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            },
            "2": {
                "method_ids": [
                    25,
                    14,
                    19,
                    1,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math3.util.OpenIntToDoubleHashMap:get(I)D",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.util.FastMath:ceil(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;",
                    "org.apache.commons.math3.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;"
                ]
            }
        },
        "81": {
            "0": {
                "method_ids": [
                    4,
                    37,
                    11,
                    34,
                    10,
                    30,
                    26,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:goodStep(II)I",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:countEigenValues(DII)I",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:eigenvaluesRange(II)[D",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:initialSplits(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:decompose()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeGershgorinCircles()V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:processGeneralBlock(I)V",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:computeShiftIncrement(III)V"
                ]
            }
        },
        "5": {
            "0": {
                "method_ids": [
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math3.complex.Complex:reciprocal()Lorg/apache/commons/math3/complex/Complex;",
                    "org.apache.commons.math3.complex.Complex:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.complex.Complex:reciprocal()Lorg/apache/commons/math3/complex/Complex;"
                ]
            }
        },
        "75": {
            "0": {
                "method_ids": [
                    3,
                    4,
                    8,
                    13,
                    5,
                    0,
                    2,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Comparable;)D",
                    "org.apache.commons.math.stat.Frequency:getSumFreq()J",
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D",
                    "org.apache.commons.math.stat.Frequency:getCount(Ljava/lang/Comparable;)J",
                    "org.apache.commons.math.stat.Frequency:addValue(I)V",
                    "org.apache.commons.math.stat.Frequency:getPct(J)D",
                    "org.apache.commons.math.stat.Frequency:getPct(I)D",
                    "org.apache.commons.math.stat.Frequency:addValue(J)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:getPct(Ljava/lang/Object;)D"
                ]
            }
        },
        "72": {
            "0": {
                "method_ids": [
                    2,
                    4,
                    0,
                    1,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:setResult(DI)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:isSequence(DDD)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "86": {
            "0": {
                "method_ids": [
                    14,
                    21,
                    13,
                    16,
                    6,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V",
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:getLT()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:getL()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
                    "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math/linear/AnyMatrix;Lorg/apache/commons/math/linear/AnyMatrix;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V"
                ]
            },
            "1": {
                "method_ids": [
                    5,
                    2,
                    0,
                    8,
                    12,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
                    "org.apache.commons.math.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.DenseRealMatrix:getData()[[D",
                    "org.apache.commons.math.linear.AbstractRealMatrix:isSquare()Z",
                    "org.apache.commons.math.linear.DenseRealMatrix:getRowDimension()I",
                    "org.apache.commons.math.linear.DenseRealMatrix:getColumnDimension()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.CholeskyDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;DD)V"
                ]
            }
        },
        "2": {
            "0": {
                "method_ids": [
                    14,
                    18,
                    3,
                    21,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:sample()I",
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:<init>(III)V",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:calculateNumericalVariance()D",
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getSupportLowerBound()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.HypergeometricDistribution:getNumericalMean()D"
                ]
            }
        },
        "44": {
            "0": {
                "method_ids": [
                    31,
                    102,
                    66,
                    21,
                    100,
                    68,
                    94
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math/ode/sampling/AbstractStepInterpolator;[D[DD)D",
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math.ode.ExpandableStatefulODE:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:storeTime(D)V",
                    "org.apache.commons.math.ode.events.EventState$1:<init>(Lorg/apache/commons/math/ode/events/EventState;Lorg/apache/commons/math/ode/sampling/StepInterpolator;)V",
                    "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator:computeInterpolatedStateAndDerivatives(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math/ode/sampling/AbstractStepInterpolator;[D[DD)D"
                ]
            }
        },
        "88": {
            "0": {
                "method_ids": [
                    46,
                    41,
                    17,
                    34,
                    53
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:solvePhase1(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "103": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    7,
                    6,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
                    "org.apache.commons.math.special.Erf:erf(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:setStandardDeviation(D)V",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:setMean(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D"
                ]
            }
        },
        "43": {
            "0": {
                "method_ids": [
                    14,
                    9,
                    2,
                    5,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.util.FastMath:log(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "1": {
                "method_ids": [
                    22,
                    0,
                    5,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:evaluate([DII)D",
                    "org.apache.commons.math.util.FastMath:log(D)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getGeometricMean()D",
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "4": {
                "method_ids": [
                    2,
                    27,
                    28,
                    3,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:increment(D)V",
                    "org.apache.commons.math.util.FastMath:log(D[D)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getMean()D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:increment(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "5": {
                "method_ids": [
                    14,
                    29,
                    24,
                    5,
                    36,
                    30
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getVariance()D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:getResult()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([DDII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:clear()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "2": {
                "method_ids": [
                    2,
                    3,
                    4,
                    7,
                    25
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getMean()D",
                    "org.apache.commons.math.stat.descriptive.moment.Mean:getResult()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:setMeanImpl(Lorg/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            },
            "3": {
                "method_ids": [
                    8,
                    2,
                    22,
                    28,
                    30
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.GeometricMean:getResult()D",
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:getGeometricMean()D",
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.summary.SumOfLogs:increment(D)V",
                    "org.apache.commons.math.util.FastMath:log(D[D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.SummaryStatistics:addValue(D)V"
                ]
            }
        },
        "17": {
            "0": {
                "method_ids": [
                    31,
                    16,
                    2,
                    12,
                    27
                ],
                "method_signatures": [
                    "org.apache.commons.math3.dfp.Dfp:multiply(Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.Dfp:dotrap(ILjava/lang/String;Lorg/apache/commons/math3/dfp/Dfp;Lorg/apache/commons/math3/dfp/Dfp;)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.Dfp:isNaN()Z",
                    "org.apache.commons.math3.dfp.Dfp:multiply(I)Lorg/apache/commons/math3/dfp/Dfp;",
                    "org.apache.commons.math3.dfp.DfpField:setIEEEFlagsBits(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.dfp.Dfp:multiply(I)Lorg/apache/commons/math3/dfp/Dfp;"
                ]
            }
        },
        "28": {
            "0": {
                "method_ids": [
                    45,
                    56,
                    2,
                    1,
                    72
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:incrementIterationsCounter()V",
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:normalizeConstraints(Ljava/util/Collection;)Ljava/util/List;",
                    "org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math3/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math3/optimization/GoalType;Z)Lorg/apache/commons/math3/optimization/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:getPivotRow(Lorg/apache/commons/math3/optimization/linear/SimplexTableau;I)Ljava/lang/Integer;"
                ]
            }
        },
        "10": {
            "0": {
                "method_ids": [
                    7,
                    5,
                    19,
                    3,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:atan2(Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;)Lorg/apache/commons/math3/analysis/differentiation/DerivativeStructure;",
                    "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan2([DI[DI[DI)V",
                    "org.apache.commons.math3.analysis.differentiation.DSCompiler:pow([DII[DI)V",
                    "org.apache.commons.math3.util.FastMath:atan(D)D",
                    "org.apache.commons.math3.analysis.differentiation.DerivativeStructure:getValue()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.analysis.differentiation.DSCompiler:atan2([DI[DI[DI)V"
                ]
            }
        },
        "26": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    9,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
                    "org.apache.commons.math3.util.FastMath:abs(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V"
                ]
            }
        },
        "19": {
            "0": {
                "method_ids": [
                    54,
                    8,
                    27
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:value([D)D",
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/MultivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;[D)Lorg/apache/commons/math3/optimization/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizer:checkParameters()V"
                ]
            }
        },
        "21": {
            "0": {
                "method_ids": [
                    10,
                    23,
                    28,
                    12,
                    25,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:transpose()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
                    "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix([[D)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V"
                ]
            },
            "1": {
                "method_ids": [
                    10,
                    33,
                    23,
                    12,
                    17,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V",
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:getRootMatrix()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:multiply(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.MatrixUtils:checkSubtractionCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V",
                    "org.apache.commons.math3.linear.AbstractRealMatrix:getNorm()D",
                    "org.apache.commons.math3.linear.MatrixUtils:checkMultiplicationCompatible(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.linear.RectangularCholeskyDecomposition:<init>(Lorg/apache/commons/math3/linear/RealMatrix;D)V"
                ]
            }
        },
        "32": {
            "0": {
                "method_ids": [
                    56,
                    51,
                    155,
                    30,
                    77,
                    175,
                    82,
                    147,
                    71,
                    211
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.partitioning.AbstractRegion:getSize()D",
                    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet:computeGeometricalProperties()V",
                    "org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor:addContribution(Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;Z)V",
                    "org.apache.commons.math3.geometry.partitioning.AbstractRegion:recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;Lorg/apache/commons/math3/geometry/partitioning/AbstractRegion$Sides;)V",
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:visit(Lorg/apache/commons/math3/geometry/partitioning/BSPTreeVisitor;)V",
                    "org.apache.commons.math3.geometry.partitioning.AbstractRegion:checkPoint(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/partitioning/Region$Location;",
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:insertCut(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;)Z",
                    "org.apache.commons.math3.geometry.partitioning.AbstractRegion:characterize(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;Lorg/apache/commons/math3/geometry/partitioning/Characterization;)V",
                    "org.apache.commons.math3.geometry.partitioning.BSPTree:split(Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)Lorg/apache/commons/math3/geometry/partitioning/BSPTree;",
                    "org.apache.commons.math3.geometry.partitioning.BoundaryAttribute:getPlusOutside()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:computeGeometricalProperties()V"
                ]
            }
        },
        "35": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "2": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            },
            "3": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(Ljava/util/List;ID)V",
                    "org.apache.commons.math3.genetics.ElitisticListPopulation:<init>(ID)V"
                ]
            }
        },
        "95": {
            "0": {
                "method_ids": [
                    1,
                    6,
                    3,
                    2,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D",
                    "org.apache.commons.math.distribution.FDistributionImpl:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.FDistributionImpl:<init>(DD)V",
                    "org.apache.commons.math.distribution.FDistributionImpl:getInitialDomain(D)D",
                    "org.apache.commons.math.distribution.FDistributionImpl:getDenominatorDegreesOfFreedom()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.FDistributionImpl:getInitialDomain(D)D"
                ]
            }
        },
        "61": {
            "0": {
                "method_ids": [
                    1,
                    7,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(DDI)V",
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(D)V",
                    "org.apache.commons.math.MathRuntimeException:createIllegalArgumentException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.PoissonDistributionImpl:<init>(DDI)V"
                ]
            }
        },
        "66": {
            "0": {
                "method_ids": [
                    7,
                    14,
                    39,
                    1,
                    47
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:addValue(D)V",
                    "org.apache.commons.math.stat.descriptive.DescriptiveStatistics:getMean()D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getEvaluations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "1": {
                "method_ids": [
                    3,
                    9,
                    5,
                    4,
                    15
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getEvaluations()I",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "2": {
                "method_ids": [
                    11,
                    17,
                    4,
                    24
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            },
            "3": {
                "method_ids": [
                    5,
                    2,
                    13,
                    4,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:getResult()D",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:setResult(DDI)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:localMin(ZLorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDDDD)D"
                ]
            }
        },
        "92": {
            "0": {
                "method_ids": [
                    4,
                    2,
                    1,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D",
                    "org.apache.commons.math.util.MathUtils:addAndCheck(JJLjava/lang/String;)J",
                    "org.apache.commons.math.util.MathUtils:addAndCheck(JJ)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:binomialCoefficient(II)J",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientDouble(II)D",
                    "org.apache.commons.math.util.MathUtils:binomialCoefficientLog(II)D"
                ]
            }
        },
        "59": {
            "0": {
                "method_ids": [
                    1,
                    8,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.FastMath:max(FF)F",
                    "org.apache.commons.math.util.FastMath:min(FF)F",
                    "org.apache.commons.math.util.FastMath:max(II)I",
                    "org.apache.commons.math.dfp.DfpField:computeStringConstants(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.FastMath:max(FF)F"
                ]
            }
        },
        "50": {
            "0": {
                "method_ids": [
                    10,
                    12,
                    18,
                    14,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "57": {
            "0": {
                "method_ids": [
                    11,
                    2,
                    5,
                    9,
                    0,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
                    "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
                    "org.apache.commons.math.stat.clustering.Cluster:getCenter()Lorg/apache/commons/math/stat/clustering/Clusterable;",
                    "org.apache.commons.math.util.MathUtils:distance([I[I)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;"
                ]
            }
        },
        "68": {
            "0": {
                "method_ids": [
                    3,
                    21,
                    18,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    3,
                    4,
                    6,
                    1,
                    0,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:setParRelativeTolerance(D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:setInitialStepBoundFactor(D)V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:<init>()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            }
        },
        "34": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    4,
                    3,
                    2,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math3.genetics.ListPopulation:addChromosomes(Ljava/util/Collection;)V",
                    "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(Ljava/util/List;I)V",
                    "org.apache.commons.math3.genetics.ListPopulation:<init>(I)V",
                    "org.apache.commons.math3.genetics.AbstractListChromosome:<init>(Ljava/util/List;)V",
                    "org.apache.commons.math3.genetics.BinaryChromosome:checkValidity(Ljava/util/List;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.genetics.ListPopulation:iterator()Ljava/util/Iterator;"
                ]
            }
        },
        "33": {
            "0": {
                "method_ids": [
                    21,
                    3,
                    19,
                    20,
                    82,
                    37,
                    64,
                    70
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math3/optimization/PointValuePair;",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:isOptimal()Z",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:getEntry(II)D",
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:subtractRow(IID)V",
                    "org.apache.commons.math3.linear.Array2DRowRealMatrix:setSubMatrix([[DII)V",
                    "org.apache.commons.math3.optimization.linear.LinearObjectiveFunction:getValue([D)D",
                    "org.apache.commons.math3.optimization.linear.LinearConstraint:getCoefficients()Lorg/apache/commons/math3/linear/RealVector;",
                    "org.apache.commons.math3.util.Precision:compareTo(DDD)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.linear.SimplexTableau:dropPhase1Objective()V"
                ]
            }
        },
        "56": {
            "0": {
                "method_ids": [
                    0,
                    5,
                    1,
                    2,
                    7,
                    4,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MultidimensionalCounter:getCounts(I)[I",
                    "org.apache.commons.math.util.MultidimensionalCounter:getCount([I)I",
                    "org.apache.commons.math.util.MultidimensionalCounter:iterator()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;",
                    "org.apache.commons.math.util.MultidimensionalCounter$Iterator:next()Ljava/lang/Integer;",
                    "org.apache.commons.math.util.MultidimensionalCounter:getSize()I",
                    "org.apache.commons.math.util.MultidimensionalCounter:getDimension()I",
                    "org.apache.commons.math.util.MultidimensionalCounter$Iterator:getCount(I)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MultidimensionalCounter:getCounts(I)[I"
                ]
            }
        },
        "69": {
            "0": {
                "method_ids": [
                    6,
                    30,
                    41,
                    25,
                    5,
                    19,
                    33
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
                    "org.apache.commons.math.distribution.TDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getR()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSlope()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:getTotalSumSquares()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            },
            "1": {
                "method_ids": [
                    6,
                    30,
                    41,
                    16,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:correlation([D[D)D",
                    "org.apache.commons.math.distribution.TDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.stat.regression.SimpleRegression:addData(DD)V",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.correlation.PearsonsCorrelation:getCorrelationPValues()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            }
        },
        "51": {
            "0": {
                "method_ids": [
                    15,
                    24,
                    34,
                    13,
                    18
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "93": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:factorialDouble(I)D",
                    "org.apache.commons.math.util.MathUtils:factorialLog(I)D",
                    "org.apache.commons.math.util.MathUtils:factorial(I)J"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:factorial(I)J",
                    "org.apache.commons.math.util.MathUtils:factorialDouble(I)D",
                    "org.apache.commons.math.util.MathUtils:factorialLog(I)D"
                ]
            }
        },
        "67": {
            "0": {
                "method_ids": [
                    5,
                    8,
                    7,
                    15,
                    17,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptima()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getOptimaValues()[D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setRelativeAccuracy(D)V",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:setAbsoluteAccuracy(D)V",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(Lorg/apache/commons/math/analysis/UnivariateRealFunction;D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getFunctionValue()D",
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:getResult()D"
                ]
            }
        },
        "58": {
            "0": {
                "method_ids": [
                    67,
                    53,
                    37,
                    35,
                    33,
                    66
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.function.Gaussian$Parametric:validateParameters([D)V",
                    "org.apache.commons.math.optimization.fitting.GaussianFitter:fit()[D",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer:computeObjectiveValue([D)[D",
                    "org.apache.commons.math.optimization.fitting.CurveFitter:fit(Lorg/apache/commons/math/analysis/ParametricUnivariateRealFunction;[D)[D",
                    "org.apache.commons.math.optimization.fitting.CurveFitter:addObservedPoint(DDD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.fitting.GaussianFitter:fit()[D"
                ]
            }
        },
        "60": {
            "0": {
                "method_ids": [
                    3,
                    10,
                    7,
                    12,
                    0,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math.special.Erf:erf(D)D",
                    "org.apache.commons.math.special.Gamma:regularizedGammaP(DDDI)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.util.ContinuedFraction:evaluate(DDI)D",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D",
                    "org.apache.commons.math.ConvergenceException:<init>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D"
                ]
            }
        },
        "94": {
            "0": {
                "method_ids": [
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ]
            }
        },
        "24": {
            "0": {
                "method_ids": [
                    24,
                    8,
                    27,
                    0,
                    36,
                    4,
                    44
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.analysis.function.StepFunction:value(D)D",
                    "org.apache.commons.math3.analysis.FunctionUtils$4:value(D)D",
                    "org.apache.commons.math3.analysis.function.Sin:value(D)D",
                    "org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair:getPoint()D",
                    "org.apache.commons.math3.util.FastMath:sin(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;"
                ]
            }
        },
        "23": {
            "0": {
                "method_ids": [
                    16,
                    25,
                    29,
                    8,
                    46,
                    38
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math3.analysis.function.StepFunction:value(D)D",
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:best(Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;Z)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer:optimize(ILorg/apache/commons/math3/analysis/UnivariateFunction;Lorg/apache/commons/math3/optimization/GoalType;DDD)Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.analysis.function.Sin:value(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math3/optimization/univariate/UnivariatePointValuePair;"
                ]
            }
        },
        "15": {
            "0": {
                "method_ids": [
                    17,
                    0,
                    14,
                    1,
                    15
                ],
                "method_signatures": [
                    "org.apache.commons.math3.util.FastMath:pow(DD)D",
                    "org.apache.commons.math3.util.FastMath:log(D[D)D",
                    "org.apache.commons.math3.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math3.dfp.Dfp:round(I)I",
                    "org.apache.commons.math3.dfp.DfpField:getRoundingMode()Lorg/apache/commons/math3/dfp/DfpField$RoundingMode;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.FastMath:pow(DD)D"
                ]
            }
        },
        "9": {
            "0": {
                "method_ids": [
                    11,
                    1,
                    3,
                    6,
                    8,
                    14,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:revert()Lorg/apache/commons/math3/geometry/euclidean/threed/Line;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:negate()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:subtract(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:toArray()[D",
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:getDirection()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;",
                    "org.apache.commons.math3.geometry.euclidean.threed.Vector3D:getNormSq()D",
                    "org.apache.commons.math3.util.MathArrays:linearCombination(DDDDDD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.geometry.euclidean.threed.Line:revert()Lorg/apache/commons/math3/geometry/euclidean/threed/Line;"
                ]
            }
        },
        "79": {
            "0": {
                "method_ids": [
                    2,
                    1,
                    5,
                    7,
                    3,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:assignPointsToClusters(Ljava/util/Collection;Ljava/util/Collection;)V",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:chooseInitialCenters(Ljava/util/Collection;ILjava/util/Random;)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:getNearestCluster(Ljava/util/Collection;Lorg/apache/commons/math/stat/clustering/Clusterable;)Lorg/apache/commons/math/stat/clustering/Cluster;",
                    "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:cluster(Ljava/util/Collection;II)Ljava/util/List;",
                    "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:distanceFrom(Lorg/apache/commons/math/stat/clustering/EuclideanIntegerPoint;)D",
                    "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint:getPoint()[I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:distance([I[I)D"
                ]
            }
        },
        "106": {
            "0": {
                "method_ids": [
                    11,
                    17,
                    10,
                    12,
                    19,
                    3,
                    6,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.FractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;",
                    "org.apache.commons.math.fraction.ProperFractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;",
                    "org.apache.commons.math.fraction.Fraction:<init>(II)V",
                    "org.apache.commons.math.fraction.FractionFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.fraction.FractionFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V",
                    "org.apache.commons.math.fraction.FractionFormat:getNumeratorFormat()Ljava/text/NumberFormat;",
                    "org.apache.commons.math.fraction.FractionFormat:getDenominatorFormat()Ljava/text/NumberFormat;",
                    "org.apache.commons.math.fraction.ProperFractionFormat:getWholeFormat()Ljava/text/NumberFormat;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.ProperFractionFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/fraction/Fraction;"
                ]
            }
        },
        "46": {
            "0": {
                "method_ids": [
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    4,
                    2,
                    7,
                    13,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "41": {
            "0": {
                "method_ids": [
                    6,
                    9,
                    5,
                    7,
                    15
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.descriptive.moment.Mean:evaluate([D[DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[D)D",
                    "org.apache.commons.math.stat.descriptive.summary.Sum:evaluate([DII)D",
                    "org.apache.commons.math.stat.descriptive.moment.Variance:clear()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.descriptive.moment.Variance:evaluate([D[DDII)D"
                ]
            }
        },
        "101": {
            "0": {
                "method_ids": [
                    3,
                    2,
                    7,
                    15
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.ComplexFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.complex.ComplexFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V",
                    "org.apache.commons.math.complex.ComplexFormat:parseNumber(Ljava/lang/String;Ljava/text/NumberFormat;Ljava/text/ParsePosition;)Ljava/lang/Number;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    3,
                    2,
                    15,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.ComplexFormat:parseNextCharacter(Ljava/lang/String;Ljava/text/ParsePosition;)C",
                    "org.apache.commons.math.complex.ComplexFormat:parseNumber(Ljava/lang/String;Ljava/text/NumberFormat;Ljava/text/ParsePosition;)Ljava/lang/Number;",
                    "org.apache.commons.math.complex.ComplexFormat:parseAndIgnoreWhitespace(Ljava/lang/String;Ljava/text/ParsePosition;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.ComplexFormat:parse(Ljava/lang/String;Ljava/text/ParsePosition;)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "48": {
            "0": {
                "method_ids": [
                    15,
                    11,
                    35,
                    13,
                    31
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:solve(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D",
                    "org.apache.commons.math.util.Incrementor:incrementCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BaseSecantSolver:doSolve()D"
                ]
            }
        },
        "77": {
            "0": {
                "method_ids": [
                    3,
                    16,
                    24,
                    22,
                    6,
                    20,
                    19
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.AbstractRealVector:getL1Norm()D",
                    "org.apache.commons.math.linear.AbstractRealVector:getNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:sparseIterator()Ljava/util/Iterator;",
                    "org.apache.commons.math.linear.OpenMapRealVector:isDefaultValue(D)Z",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:put(ID)D",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:findInsertionIndex(I)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D"
                ]
            },
            "1": {
                "method_ids": [
                    1,
                    2,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.ArrayRealVector:getNorm()D",
                    "org.apache.commons.math.linear.ArrayRealVector:getL1Norm()D",
                    "org.apache.commons.math.linear.ArrayRealVector:<init>([D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.ArrayRealVector:getLInfNorm()D",
                    "org.apache.commons.math.linear.OpenMapRealVector:getLInfNorm()D"
                ]
            }
        },
        "7": {
            "0": {
                "method_ids": [
                    84,
                    125,
                    127,
                    20,
                    67,
                    55,
                    56,
                    124
                ],
                "method_signatures": [
                    "org.apache.commons.math3.ode.events.EventState:evaluateStep(Lorg/apache/commons/math3/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math3.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math3/ode/sampling/AbstractStepInterpolator;[D[DD)D",
                    "org.apache.commons.math3.ode.events.EventState:reinitializeBegin(Lorg/apache/commons/math3/ode/sampling/StepInterpolator;)V",
                    "org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math3/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math3.ode.AbstractIntegrator:initIntegration(D[DD)V",
                    "org.apache.commons.math3.ode.ExpandableStatefulODE:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math3.ode.ExpandableStatefulODE:getCompleteState()[D",
                    "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator:getOrder()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.ode.AbstractIntegrator:acceptStep(Lorg/apache/commons/math3/ode/sampling/AbstractStepInterpolator;[D[DD)D"
                ]
            }
        },
        "83": {
            "0": {
                "method_ids": [
                    50,
                    51,
                    23,
                    14,
                    41,
                    49,
                    31
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:isPhase1Solved(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:discardArtificialVariables()V",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:initialize()V",
                    "org.apache.commons.math.optimization.linear.AbstractLinearOptimizer:optimize(Lorg/apache/commons/math/optimization/linear/LinearObjectiveFunction;Ljava/util/Collection;Lorg/apache/commons/math/optimization/GoalType;Z)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getBasicRow(IZ)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;"
                ]
            }
        },
        "84": {
            "0": {
                "method_ids": [
                    66,
                    11,
                    12,
                    27,
                    26
                ],
                "method_signatures": [
                    "Unknown Signature",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:incrementIterationsCounter()V",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:evaluateSimplex(Ljava/util/Comparator;)V",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:setMaxIterations(I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V"
                ]
            },
            "1": {
                "method_ids": [
                    21,
                    3,
                    22,
                    7,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:optimize(Lorg/apache/commons/math/analysis/MultivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;[D)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.MultiDirectional:evaluateNewSimplex([Lorg/apache/commons/math/optimization/RealPointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V",
                    "org.apache.commons.math.optimization.SimpleScalarValueChecker:converged(ILorg/apache/commons/math/optimization/RealPointValuePair;Lorg/apache/commons/math/optimization/RealPointValuePair;)Z",
                    "org.apache.commons.math.optimization.direct.DirectSearchOptimizer:getEvaluations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.MultiDirectional:iterateSimplex(Ljava/util/Comparator;)V"
                ]
            }
        },
        "70": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:clearResult()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BisectionSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)D"
                ]
            }
        },
        "13": {
            "0": {
                "method_ids": [
                    60,
                    9,
                    51,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.EigenDecomposition:transformToTridiagonal(Lorg/apache/commons/math3/linear/RealMatrix;)V",
                    "org.apache.commons.math3.optimization.fitting.PolynomialFitter:fit([D)[D",
                    "org.apache.commons.math3.linear.TriDiagonalTransformer:getQT()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.linear.DiagonalMatrix:getRowDimension()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ]
            }
        },
        "14": {
            "0": {
                "method_ids": [
                    34,
                    2,
                    21,
                    36
                ],
                "method_signatures": [
                    "org.apache.commons.math3.linear.BlockRealMatrix:createBlocksLayout(II)[[D",
                    "org.apache.commons.math3.fitting.CurveFitter:fit(Lorg/apache/commons/math3/analysis/ParametricUnivariateFunction;[D)[D",
                    "org.apache.commons.math3.fitting.CurveFitter:addObservedPoint(DDD)V",
                    "org.apache.commons.math3.linear.MatrixUtils:createRealMatrix(II)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.vector.Weight:<init>([D)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:squareRoot(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ]
            }
        },
        "22": {
            "0": {
                "method_ids": [
                    9,
                    4,
                    0,
                    1,
                    5,
                    21
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z",
                    "org.apache.commons.math3.util.FastMath:log1p(D)D",
                    "org.apache.commons.math3.util.FastMath:log(D[D)D",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.special.Beta:logBeta(DDDI)D",
                    "org.apache.commons.math3.distribution.FDistribution:density(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    11,
                    13,
                    5,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:getSupportUpperBound()D",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V",
                    "org.apache.commons.math3.distribution.UniformRealDistribution:<init>(DDD)V",
                    "org.apache.commons.math3.random.AbstractWell:setSeed([I)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.UniformRealDistribution:isSupportUpperBoundInclusive()Z",
                    "org.apache.commons.math3.distribution.FDistribution:isSupportLowerBoundInclusive()Z"
                ]
            }
        },
        "25": {
            "0": {
                "method_ids": [
                    1,
                    5,
                    3,
                    7,
                    0,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:sortObservations()V",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessAOmega()V",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:<init>([Lorg/apache/commons/math3/optimization/fitting/WeightedObservedPoint;)V",
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guess()[D",
                    "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:getX()D",
                    "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint:getY()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser:guessAOmega()V"
                ]
            }
        },
        "71": {
            "0": {
                "method_ids": [
                    14,
                    49,
                    21,
                    50,
                    43
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:estimateError([[D[D[DD)D",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:sanityChecks(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)V",
                    "org.apache.commons.math.ode.events.CombinedEventsManager:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            },
            "1": {
                "method_ids": [
                    35,
                    17,
                    16,
                    33,
                    49
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.events.EventState:stepAccepted(D[D)V",
                    "org.apache.commons.math.ode.events.CombinedEventsManager:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.ode.AbstractIntegrator:sanityChecks(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D"
                ]
            }
        },
        "1": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    5,
                    11
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
                    "org.apache.commons.math3.util.FastMath:floor(D)D",
                    "org.apache.commons.math3.util.FastMath:abs(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V"
                ]
            },
            "1": {
                "method_ids": [
                    8,
                    0,
                    10,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.FractionConversionException:<init>(DJJ)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DI)V",
                    "org.apache.commons.math3.util.FastMath:floor(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.fraction.Fraction:<init>(DDII)V",
                    "org.apache.commons.math3.fraction.BigFraction:<init>(DDII)V"
                ]
            }
        },
        "85": {
            "0": {
                "method_ids": [
                    12,
                    6,
                    21,
                    0,
                    26
                ],
                "method_signatures": [
                    "org.apache.commons.math.distribution.AbstractContinuousDistribution:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:cumulativeProbability(D)D",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D",
                    "org.apache.commons.math.special.Gamma:logGamma(D)D",
                    "org.apache.commons.math.distribution.NormalDistributionImpl:inverseCumulativeProbability(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D"
                ]
            }
        },
        "49": {
            "0": {
                "method_ids": [
                    24,
                    33,
                    7,
                    32,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:advance()V",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:put(ID)D",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:remove(I)D",
                    "org.apache.commons.math.util.OpenIntToDoubleHashMap:findInsertionIndex([I[BII)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeDivide(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeDivide([D)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;",
                    "org.apache.commons.math.linear.OpenMapRealVector:ebeMultiply([D)Lorg/apache/commons/math/linear/OpenMapRealVector;"
                ]
            }
        },
        "6": {
            "21": {
                "method_ids": [
                    51,
                    22,
                    27,
                    23,
                    1,
                    3,
                    9,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "0": {
                "method_ids": [
                    90,
                    64,
                    42,
                    36,
                    73,
                    78,
                    7,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeResiduals([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeWeightedJacobian([D)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.vector.Target:getTarget()[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getWeight()Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.InitialGuess:getInitialGuess()[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:setCost(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "17": {
                "method_ids": [
                    69,
                    29,
                    30,
                    1,
                    5,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "16": {
                "method_ids": [
                    69,
                    29,
                    1,
                    30,
                    12,
                    5,
                    37,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    9,
                    10,
                    35,
                    83,
                    43,
                    0,
                    60
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeResiduals([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:computeCost([D)D",
                    "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer:getTarget()[D",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:getWeightSquareRoot()Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "20": {
                "method_ids": [
                    69,
                    29,
                    1,
                    30,
                    5,
                    12,
                    37,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "11": {
                "method_ids": [
                    69,
                    29,
                    30,
                    25,
                    5,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "27": {
                "method_ids": [
                    36,
                    39,
                    4,
                    59,
                    8,
                    44
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer$LineSearch:search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:checkParameters()V",
                    "org.apache.commons.math3.util.Incrementor:incrementCount()V",
                    "org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction:getObjectiveFunction()Lorg/apache/commons/math3/analysis/UnivariateFunction;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "6": {
                "method_ids": [
                    30,
                    1,
                    29,
                    5,
                    12,
                    37,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "7": {
                "method_ids": [
                    30,
                    1,
                    29,
                    69,
                    5,
                    12,
                    68
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "26": {
                "method_ids": [
                    69,
                    29,
                    30,
                    25,
                    5,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "10": {
                "method_ids": [
                    30,
                    54,
                    47,
                    31,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "13": {
                "method_ids": [
                    30,
                    1,
                    29,
                    5,
                    12,
                    68
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "8": {
                "method_ids": [
                    30,
                    29,
                    69,
                    12,
                    5,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "4": {
                "method_ids": [
                    31,
                    56,
                    11,
                    3,
                    60
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction:getObjectiveFunction()Lorg/apache/commons/math3/analysis/MultivariateFunction;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "25": {
                "method_ids": [
                    69,
                    29,
                    30,
                    12,
                    5,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "24": {
                "method_ids": [
                    69,
                    29,
                    30,
                    1,
                    5,
                    12,
                    8,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:updateEvolutionPaths(Lorg/apache/commons/math3/linear/RealMatrix;Lorg/apache/commons/math3/linear/RealMatrix;)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "5": {
                "method_ids": [
                    30,
                    54,
                    3,
                    37,
                    20
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "12": {
                "method_ids": [
                    69,
                    29,
                    1,
                    30,
                    12,
                    5,
                    9,
                    8,
                    14,
                    59
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:inverse([I)[I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:log(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "9": {
                "method_ids": [
                    30,
                    55,
                    10,
                    42,
                    31,
                    2,
                    57
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex:evaluateNewSimplex(Lorg/apache/commons/math3/analysis/MultivariateFunction;[Lorg/apache/commons/math3/optim/PointValuePair;DLjava/util/Comparator;)Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "19": {
                "method_ids": [
                    35,
                    50,
                    44,
                    93,
                    61
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:checkParameters()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "2": {
                "method_ids": [
                    69,
                    29,
                    30,
                    1,
                    12,
                    5,
                    8
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "23": {
                "method_ids": [
                    30,
                    54,
                    47,
                    31,
                    37
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex:iterate(Lorg/apache/commons/math3/analysis/MultivariateFunction;Ljava/util/Comparator;)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "15": {
                "method_ids": [
                    30,
                    54,
                    3,
                    37,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "14": {
                "method_ids": [
                    30,
                    29,
                    69,
                    25,
                    12,
                    5,
                    8,
                    9
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "22": {
                "method_ids": [
                    31,
                    2,
                    3,
                    38,
                    5,
                    12
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:<init>(DD)V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I",
                    "org.apache.commons.math3.optim.BaseOptimizer:getIterations()I",
                    "org.apache.commons.math3.util.Incrementor:incrementCount()V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction:<init>(Lorg/apache/commons/math3/analysis/MultivariateFunction;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "18": {
                "method_ids": [
                    31,
                    56,
                    32,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:incrementEvaluationCount()V",
                    "org.apache.commons.math3.optim.BaseOptimizer:getEvaluations()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            },
            "3": {
                "method_ids": [
                    69,
                    29,
                    30,
                    25,
                    5,
                    12,
                    8,
                    9,
                    14,
                    59
                ],
                "method_signatures": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:initializeCMA([D)V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:checkParameters()V",
                    "org.apache.commons.math3.optim.BaseMultivariateOptimizer:parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:penalty([D[D)D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction:repair([D)[D",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:push([DD)V",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:sumRows(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:inverse([I)[I",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:log(Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.BaseOptimizer:<init>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointVectorValuePair;",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:doOptimize()Lorg/apache/commons/math3/optim/PointValuePair;"
                ]
            }
        },
        "82": {
            "0": {
                "method_ids": [
                    46,
                    49,
                    36,
                    21,
                    22,
                    23,
                    31,
                    12,
                    13,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:isOptimal(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Z",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:doIteration(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)V",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotColumn(Lorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:getSolution()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.linear.SimplexTableau:createTableau(Z)[[D",
                    "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getValue([D)D",
                    "org.apache.commons.math.optimization.linear.LinearConstraint:getValue()D",
                    "org.apache.commons.math.optimization.linear.LinearObjectiveFunction:getCoefficients()Lorg/apache/commons/math/linear/RealVector;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.linear.SimplexSolver:getPivotRow(ILorg/apache/commons/math/optimization/linear/SimplexTableau;)Ljava/lang/Integer;"
                ]
            }
        },
        "76": {
            "0": {
                "method_ids": [
                    16,
                    15,
                    23,
                    29,
                    43
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;I)V",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getS()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getVT()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:multiply(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:subtract(Lorg/apache/commons/math/linear/RealMatrix;)Lorg/apache/commons/math/linear/RealMatrix;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            },
            "1": {
                "method_ids": [
                    46,
                    45,
                    52,
                    53,
                    28,
                    15,
                    61,
                    50,
                    19,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.EigenDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:decompose()V",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getSingularValues()[D",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getS()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.BiDiagonalTransformer:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.EigenDecompositionImpl:findEigenvalues()V",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:<init>(Lorg/apache/commons/math/linear/RealMatrix;)V",
                    "org.apache.commons.math.linear.Array2DRowRealMatrix:getEntry(II)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getU()Lorg/apache/commons/math/linear/RealMatrix;",
                    "org.apache.commons.math.linear.SingularValueDecompositionImpl:getV()Lorg/apache/commons/math/linear/RealMatrix;"
                ]
            }
        },
        "100": {
            "0": {
                "method_ids": [
                    23,
                    5,
                    3,
                    6,
                    38
                ],
                "method_signatures": [
                    "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
                    "org.apache.commons.math.estimation.GaussNewtonEstimator:estimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V",
                    "org.apache.commons.math.estimation.AbstractEstimator:updateJacobian()V",
                    "org.apache.commons.math.estimation.AbstractEstimator:getRMS(Lorg/apache/commons/math/estimation/EstimationProblem;)D",
                    "org.apache.commons.math.estimation.AbstractEstimator:initializeEstimate(Lorg/apache/commons/math/estimation/EstimationProblem;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.estimation.AbstractEstimator:getCovariances(Lorg/apache/commons/math/estimation/EstimationProblem;)[[D",
                    "org.apache.commons.math.estimation.AbstractEstimator:guessParametersErrors(Lorg/apache/commons/math/estimation/EstimationProblem;)[D"
                ]
            }
        },
        "40": {
            "0": {
                "method_ids": [
                    2,
                    25,
                    15,
                    0,
                    29
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:doSolve()D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:computeObjectiveValue(D)D",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:incrementEvaluationCount()V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:setup(ILorg/apache/commons/math/analysis/UnivariateFunction;DDD)V",
                    "org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver:solve(ILorg/apache/commons/math/analysis/UnivariateFunction;DDD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:doSolve()D"
                ]
            }
        },
        "78": {
            "0": {
                "method_ids": [
                    24,
                    17,
                    14,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z",
                    "org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D",
                    "org.apache.commons.math.ode.events.EventState$1:<init>(Lorg/apache/commons/math/ode/events/EventState;Lorg/apache/commons/math/ode/sampling/StepInterpolator;)V",
                    "org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl:verifyInterval(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.events.EventState:evaluateStep(Lorg/apache/commons/math/ode/sampling/StepInterpolator;)Z"
                ]
            }
        },
        "8": {
            "0": {
                "method_ids": [
                    17,
                    19,
                    6,
                    2,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;",
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample()Ljava/lang/Object;",
                    "org.apache.commons.math3.distribution.DiscreteDistribution:<init>(Ljava/util/List;)V",
                    "org.apache.commons.math3.util.Pair:getKey()Ljava/lang/Object;",
                    "org.apache.commons.math3.util.Pair:getValue()Ljava/lang/Object;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.distribution.DiscreteDistribution:sample(I)[Ljava/lang/Object;"
                ]
            }
        },
        "47": {
            "0": {
                "method_ids": [
                    2,
                    3,
                    1,
                    5,
                    4,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.math.complex.Complex:getReal()D",
                    "org.apache.commons.math.complex.Complex:getImaginary()D",
                    "org.apache.commons.math.complex.Complex:toString()Ljava/lang/String;",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    6,
                    12,
                    9,
                    13,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:atan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:log()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:divide(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:divide(D)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "65": {
            "0": {
                "method_ids": [
                    49,
                    22,
                    20,
                    15,
                    30
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:guessParametersErrors()[D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getCovariances()[[D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getChiSquare()D"
                ]
            }
        },
        "91": {
            "0": {
                "method_ids": [
                    2,
                    0,
                    3,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I",
                    "org.apache.commons.math.fraction.Fraction:doubleValue()D",
                    "org.apache.commons.math.fraction.Fraction:<init>(II)V",
                    "org.apache.commons.math.util.MathUtils:gcd(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.Fraction:compareTo(Lorg/apache/commons/math/fraction/Fraction;)I"
                ]
            }
        },
        "96": {
            "0": {
                "method_ids": [
                    0,
                    2,
                    5,
                    3,
                    1,
                    6,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:multiply(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.MathUtils:hash(D)I",
                    "org.apache.commons.math.complex.Complex:hashCode()I",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:equals(Ljava/lang/Object;)Z"
                ]
            }
        },
        "62": {
            "0": {
                "method_ids": [
                    12,
                    16,
                    28,
                    4,
                    22
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.univariate.BrentOptimizer:doOptimize()Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer:computeObjectiveValue(D)D",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:sortPairs(Lorg/apache/commons/math/optimization/GoalType;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;",
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer:optimize(Lorg/apache/commons/math/analysis/UnivariateRealFunction;Lorg/apache/commons/math/optimization/GoalType;DDD)Lorg/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair;"
                ]
            }
        },
        "54": {
            "0": {
                "method_ids": [
                    54,
                    10,
                    6,
                    47,
                    7
                ],
                "method_signatures": [
                    "org.apache.commons.math.dfp.DfpField:getZero()Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:getZero()Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:divide(I)Lorg/apache/commons/math/dfp/Dfp;",
                    "org.apache.commons.math.dfp.Dfp:toDouble()D",
                    "org.apache.commons.math.dfp.DfpField:newDfp(BB)Lorg/apache/commons/math/dfp/Dfp;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.dfp.Dfp:<init>(Lorg/apache/commons/math/dfp/DfpField;D)V",
                    "org.apache.commons.math.dfp.Dfp:toDouble()D"
                ]
            }
        },
        "53": {
            "0": {
                "method_ids": [
                    1,
                    6,
                    3,
                    2,
                    4,
                    5
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:<init>(DD)V",
                    "org.apache.commons.math.complex.Complex:isNaN()Z",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:getReal()D",
                    "org.apache.commons.math.complex.Complex:getImaginary()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:add(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "98": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.BigMatrixImpl:<init>([[Ljava/math/BigDecimal;Z)V",
                    "org.apache.commons.math.linear.BigMatrixImpl:getRowDimension()I",
                    "org.apache.commons.math.linear.BigMatrixImpl:getColumnDimension()I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D"
                ]
            },
            "1": {
                "method_ids": [
                    2,
                    1,
                    3,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D",
                    "org.apache.commons.math.linear.RealMatrixImpl:getColumnDimension()I",
                    "org.apache.commons.math.linear.RealMatrixImpl:getRowDimension()I",
                    "org.apache.commons.math.linear.RealMatrixImpl:<init>([[DZ)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.linear.BigMatrixImpl:operate([Ljava/math/BigDecimal;)[Ljava/math/BigDecimal;",
                    "org.apache.commons.math.linear.RealMatrixImpl:operate([D)[D"
                ]
            }
        },
        "38": {
            "0": {
                "method_ids": [
                    24,
                    3,
                    13,
                    0,
                    1,
                    4
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:prelim([D[D)V",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:doOptimize()Lorg/apache/commons/math/optimization/RealPointValuePair;",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:bobyqb([D[D)D",
                    "org.apache.commons.math.optimization.direct.BaseAbstractMultivariateOptimizer:computeObjectiveValue([D)D",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:setup([D[D)V",
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:<init>(IDD)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.direct.BOBYQAOptimizer:prelim([D[D)V"
                ]
            }
        },
        "36": {
            "0": {
                "method_ids": [
                    1,
                    0,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F",
                    "org.apache.commons.math.fraction.BigFraction:<init>(Ljava/math/BigInteger;Ljava/math/BigInteger;)V",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F"
                ]
            },
            "1": {
                "method_ids": [
                    2,
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:<init>(Ljava/math/BigInteger;Ljava/math/BigInteger;)V",
                    "org.apache.commons.math.util.MathUtils:checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.fraction.BigFraction:doubleValue()D",
                    "org.apache.commons.math.fraction.BigFraction:floatValue()F"
                ]
            }
        },
        "31": {
            "0": {
                "method_ids": [
                    11,
                    19,
                    23,
                    24,
                    8,
                    6
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.AbstractIntegerDistribution:inverseCumulativeProbability(D)I",
                    "org.apache.commons.math3.distribution.BinomialDistribution:getNumericalMean()D",
                    "org.apache.commons.math3.distribution.BinomialDistribution:cumulativeProbability(I)D",
                    "org.apache.commons.math3.distribution.BinomialDistribution:<init>(ID)V",
                    "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D"
                ]
            },
            "1": {
                "method_ids": [
                    19,
                    26,
                    30,
                    21,
                    23,
                    20,
                    49
                ],
                "method_signatures": [
                    "org.apache.commons.math3.distribution.AbstractRealDistribution:inverseCumulativeProbability(D)D",
                    "org.apache.commons.math3.distribution.FDistribution:cumulativeProbability(D)D",
                    "org.apache.commons.math3.distribution.FDistribution:getNumeratorDegreesOfFreedom()D",
                    "org.apache.commons.math3.distribution.FDistribution:getDenominatorDegreesOfFreedom()D",
                    "org.apache.commons.math3.special.Beta:regularizedBeta(DDD)D",
                    "org.apache.commons.math3.util.FastMath:log(D)D",
                    "org.apache.commons.math3.util.FastMath:exp(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.util.ContinuedFraction:evaluate(DDI)D"
                ]
            }
        },
        "52": {
            "0": {
                "method_ids": [
                    6,
                    13,
                    8,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V",
                    "org.apache.commons.math.geometry.euclidean.threed.Vector3D:getNormSq()D",
                    "org.apache.commons.math.geometry.euclidean.threed.Vector3D:dotProduct(Lorg/apache/commons/math/geometry/Vector;)D",
                    "org.apache.commons.math.util.MathUtils:linearCombination(DDDD)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.geometry.euclidean.threed.Rotation:<init>(Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math/geometry/euclidean/threed/Vector3D;)V"
                ]
            }
        },
        "99": {
            "0": {
                "method_ids": [
                    0,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:lcm(II)I",
                    "org.apache.commons.math.util.MathUtils:gcd(II)I",
                    "org.apache.commons.math.util.MathUtils:mulAndCheck(II)I"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:gcd(II)I",
                    "org.apache.commons.math.util.MathUtils:lcm(II)I"
                ]
            }
        },
        "55": {
            "0": {
                "method_ids": [
                    0,
                    4,
                    1,
                    2,
                    3
                ],
                "method_signatures": [
                    "org.apache.commons.math.geometry.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector3D;Lorg/apache/commons/math/geometry/Vector3D;)Lorg/apache/commons/math/geometry/Vector3D;",
                    "org.apache.commons.math.geometry.Vector3D:<init>(DDD)V",
                    "org.apache.commons.math.geometry.Vector3D:getY()D",
                    "org.apache.commons.math.geometry.Vector3D:getZ()D",
                    "org.apache.commons.math.geometry.Vector3D:getX()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.geometry.Vector3D:crossProduct(Lorg/apache/commons/math/geometry/Vector3D;Lorg/apache/commons/math/geometry/Vector3D;)Lorg/apache/commons/math/geometry/Vector3D;"
                ]
            }
        },
        "63": {
            "0": {
                "method_ids": [
                    0,
                    1
                ],
                "method_signatures": [
                    "org.apache.commons.math.util.MathUtils:equals([D[D)Z",
                    "org.apache.commons.math.util.MathUtils:equals(DD)Z"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.util.MathUtils:equals(DD)Z"
                ]
            }
        },
        "97": {
            "0": {
                "method_ids": [
                    4,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.analysis.BrentSolver:solve(DD)D",
                    "org.apache.commons.math.analysis.UnivariateRealSolverImpl:verifyInterval(DD)V",
                    "org.apache.commons.math.analysis.BrentSolver:<init>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.analysis.BrentSolver:solve(DD)D"
                ]
            }
        },
        "90": {
            "0": {
                "method_ids": [
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V",
                    "org.apache.commons.math.stat.Frequency:<init>()V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.stat.Frequency:addValue(Ljava/lang/Object;)V"
                ]
            }
        },
        "64": {
            "0": {
                "method_ids": [
                    21,
                    5,
                    9,
                    22,
                    1,
                    0
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:optimize(Lorg/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction;[D[D[D)Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getRMS()D",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:setParRelativeTolerance(D)V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:setInitialStepBoundFactor(D)V"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            },
            "1": {
                "method_ids": [
                    21,
                    19,
                    5,
                    6,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateJacobian()V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:updateResidualsAndCost()V",
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:determineLMParameter([DD[D[D[D[D)V",
                    "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer:getChiSquare()D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:doOptimize()Lorg/apache/commons/math/optimization/VectorialPointValuePair;"
                ]
            }
        },
        "30": {
            "0": {
                "method_ids": [
                    9,
                    8,
                    18,
                    17,
                    16
                ],
                "method_signatures": [
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyUTest([D[D)D",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:mannWhitneyU([D[D)D",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:ensureDataConformance([D[D)V",
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:concatenateSamples([D[D)[D",
                    "org.apache.commons.math3.stat.ranking.NaturalRanking:rank([D)[D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math3.stat.inference.MannWhitneyUTest:calculateAsymptoticPValue(DII)D"
                ]
            }
        },
        "37": {
            "0": {
                "method_ids": [
                    6,
                    9,
                    10,
                    4,
                    5,
                    11,
                    8,
                    1,
                    13
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sinh(D)D",
                    "org.apache.commons.math.util.FastMath:cos(D)D",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.util.FastMath:exp(DD[D)D",
                    "org.apache.commons.math.util.FastMath:cosQ(DD)D",
                    "org.apache.commons.math.util.FastMath:polySine(D)D",
                    "org.apache.commons.math.util.FastMath:polyCosine(D)D",
                    "org.apache.commons.math.util.FastMath:exp(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "1": {
                "method_ids": [
                    12,
                    4,
                    7,
                    8,
                    6,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.util.FastMath:cos(D)D",
                    "org.apache.commons.math.util.FastMath:cosQ(DD)D",
                    "org.apache.commons.math.util.FastMath:polySine(D)D",
                    "org.apache.commons.math.util.FastMath:polyCosine(D)D",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "2": {
                "method_ids": [
                    6,
                    14,
                    9,
                    4,
                    10
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:cosh(D)D",
                    "org.apache.commons.math.util.FastMath:sinh(D)D",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.util.FastMath:cos(D)D"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            },
            "3": {
                "method_ids": [
                    13,
                    4,
                    9,
                    10,
                    7,
                    1,
                    2
                ],
                "method_signatures": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.util.FastMath:sin(D)D",
                    "org.apache.commons.math.util.FastMath:cos(D)D",
                    "org.apache.commons.math.util.FastMath:cosQ(DD)D",
                    "org.apache.commons.math.util.FastMath:polySine(D)D",
                    "org.apache.commons.math.util.FastMath:polyCosine(D)D",
                    "org.apache.commons.math.complex.Complex:createComplex(DD)Lorg/apache/commons/math/complex/Complex;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.complex.Complex:tan()Lorg/apache/commons/math/complex/Complex;",
                    "org.apache.commons.math.complex.Complex:tanh()Lorg/apache/commons/math/complex/Complex;"
                ]
            }
        },
        "39": {
            "0": {
                "method_ids": [
                    35,
                    14,
                    68,
                    67,
                    58,
                    44,
                    16,
                    40
                ],
                "method_signatures": [
                    "org.apache.commons.math.ode.ExpandableStatefulODE:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:computeDerivatives(D[D[D)V",
                    "org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:setStepSizeControl(DDDD)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:sanityChecks(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V",
                    "org.apache.commons.math.ode.EquationsMapper:extractEquationData([D[D)V",
                    "org.apache.commons.math.ode.AbstractIntegrator:integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D",
                    "org.apache.commons.math.ode.ExpandableStatefulODE:setPrimaryState([D)V",
                    "org.apache.commons.math.ode.ExpandableStatefulODE:getPrimaryMapper()Lorg/apache/commons/math/ode/EquationsMapper;"
                ],
                "d4j_groundtruth": [
                    "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:integrate(Lorg/apache/commons/math/ode/ExpandableStatefulODE;D)V"
                ]
            }
        }
    }
}